define(['dart_sdk', 'packages/event_bus/event_bus.dart', 'packages/typed_data/src/typed_buffer.dart', 'packages/mqtt_client/src/observable/src/records.dart', 'packages/mqtt_client/src/observable/src/observable.dart'], (function load__packages__mqtt_client__mqtt_client_dart(dart_sdk, packages__event_bus__event_bus$46dart, packages__typed_data__src__typed_buffer$46dart, packages__mqtt_client__src__observable__src__records$46dart, packages__mqtt_client__src__observable__src__observable$46dart) {
  'use strict';
  const core = dart_sdk.core;
  const io = dart_sdk.io;
  const async = dart_sdk.async;
  const _js_helper = dart_sdk._js_helper;
  const _interceptors = dart_sdk._interceptors;
  const _http = dart_sdk._http;
  const convert = dart_sdk.convert;
  const _native_typed_data = dart_sdk._native_typed_data;
  const typed_data = dart_sdk.typed_data;
  const dart = dart_sdk.dart;
  const dartx = dart_sdk.dartx;
  const event_bus = packages__event_bus__event_bus$46dart.event_bus;
  const typed_buffer = packages__typed_data__src__typed_buffer$46dart.src__typed_buffer;
  const records = packages__mqtt_client__src__observable__src__records$46dart.src__observable__src__records;
  const observable = packages__mqtt_client__src__observable__src__observable$46dart.src__observable__src__observable;
  const change_notifier = packages__mqtt_client__src__observable__src__observable$46dart.src__observable__src__change_notifier;
  var mqtt_client = Object.create(dart.library);
  var $trim = dartx.trim;
  var $toString = dartx.toString;
  var $split = dartx.split;
  var $_get = dartx._get;
  var $_set = dartx._set;
  var $remove = dartx.remove;
  var $add = dartx.add;
  var $toList = dartx.toList;
  var $isNotEmpty = dartx.isNotEmpty;
  var $contains = dartx.contains;
  var $isEmpty = dartx.isEmpty;
  var $hashCode = dartx.hashCode;
  var $_equals = dartx._equals;
  var $any = dartx.any;
  var $endsWith = dartx.endsWith;
  var $length = dartx.length;
  var $keys = dartx.keys;
  var $containsKey = dartx.containsKey;
  var $values = dartx.values;
  var $forEach = dartx.forEach;
  var $rightShift = dartx['>>'];
  var $codeUnitAt = dartx.codeUnitAt;
  var $removeRange = dartx.removeRange;
  var $getRange = dartx.getRange;
  var $buffer = dartx.buffer;
  var $asInt8List = dartx.asInt8List;
  var $codeUnits = dartx.codeUnits;
  var $modulo = dartx['%'];
  var $truncate = dartx.truncate;
  var $clear = dartx.clear;
  dart._checkModuleNullSafetyMode(false);
  var T = {
    MqttClientConnectionStatusL: () => (T.MqttClientConnectionStatusL = dart.constFn(dart.legacy(mqtt_client.MqttClientConnectionStatus)))(),
    ExceptionL: () => (T.ExceptionL = dart.constFn(dart.legacy(core.Exception)))(),
    MqttConnectionStateL: () => (T.MqttConnectionStateL = dart.constFn(dart.legacy(mqtt_client.MqttConnectionState)))(),
    MqttMessageTypeL: () => (T.MqttMessageTypeL = dart.constFn(dart.legacy(mqtt_client.MqttMessageType)))(),
    boolL: () => (T.boolL = dart.constFn(dart.legacy(core.bool)))(),
    MqttMessageL: () => (T.MqttMessageL = dart.constFn(dart.legacy(mqtt_client.MqttMessage)))(),
    MqttMessageLToboolL: () => (T.MqttMessageLToboolL = dart.constFn(dart.fnType(T.boolL(), [T.MqttMessageL()])))(),
    MqttMessageLToLboolL: () => (T.MqttMessageLToLboolL = dart.constFn(dart.legacy(T.MqttMessageLToboolL())))(),
    LinkedMapOfMqttMessageTypeL$MqttMessageLToLboolL: () => (T.LinkedMapOfMqttMessageTypeL$MqttMessageLToLboolL = dart.constFn(_js_helper.LinkedMap$(T.MqttMessageTypeL(), T.MqttMessageLToLboolL())))(),
    JSArrayOfMqttMessageLToLboolL: () => (T.JSArrayOfMqttMessageLToLboolL = dart.constFn(_interceptors.JSArray$(T.MqttMessageLToLboolL())))(),
    intL: () => (T.intL = dart.constFn(dart.legacy(core.int)))(),
    JSArrayOfintL: () => (T.JSArrayOfintL = dart.constFn(_interceptors.JSArray$(T.intL())))(),
    CompleterOfvoid: () => (T.CompleterOfvoid = dart.constFn(async.Completer$(dart.void)))(),
    ListOfintL: () => (T.ListOfintL = dart.constFn(core.List$(T.intL())))(),
    ListLOfintL: () => (T.ListLOfintL = dart.constFn(dart.legacy(T.ListOfintL())))(),
    CompleterOfMqttClientConnectionStatusL: () => (T.CompleterOfMqttClientConnectionStatusL = dart.constFn(async.Completer$(T.MqttClientConnectionStatusL())))(),
    dynamicToNull: () => (T.dynamicToNull = dart.constFn(dart.fnType(core.Null, [dart.dynamic])))(),
    StringL: () => (T.StringL = dart.constFn(dart.legacy(core.String)))(),
    SecureSocketL: () => (T.SecureSocketL = dart.constFn(dart.legacy(io.SecureSocket)))(),
    SecureSocketLToNull: () => (T.SecureSocketLToNull = dart.constFn(dart.fnType(core.Null, [T.SecureSocketL()])))(),
    TlsExceptionL: () => (T.TlsExceptionL = dart.constFn(dart.legacy(io.TlsException)))(),
    HandshakeExceptionL: () => (T.HandshakeExceptionL = dart.constFn(dart.legacy(io.HandshakeException)))(),
    SocketExceptionL: () => (T.SocketExceptionL = dart.constFn(dart.legacy(io.SocketException)))(),
    MqttConnectionHandlerL: () => (T.MqttConnectionHandlerL = dart.constFn(dart.legacy(mqtt_client.MqttConnectionHandler)))(),
    MessageAvailableL: () => (T.MessageAvailableL = dart.constFn(dart.legacy(mqtt_client.MessageAvailable)))(),
    MqttConnectAckMessageL: () => (T.MqttConnectAckMessageL = dart.constFn(dart.legacy(mqtt_client.MqttConnectAckMessage)))(),
    TopicL: () => (T.TopicL = dart.constFn(dart.legacy(mqtt_client.Topic)))(),
    TopicLTovoid: () => (T.TopicLTovoid = dart.constFn(dart.fnType(dart.void, [T.TopicL()])))(),
    StringLToboolL: () => (T.StringLToboolL = dart.constFn(dart.fnType(T.boolL(), [T.StringL()])))(),
    MqttSubscriptionStatusL: () => (T.MqttSubscriptionStatusL = dart.constFn(dart.legacy(mqtt_client.MqttSubscriptionStatus)))(),
    MqttQosL: () => (T.MqttQosL = dart.constFn(dart.legacy(mqtt_client.MqttQos)))(),
    MqttPublishMessageL: () => (T.MqttPublishMessageL = dart.constFn(dart.legacy(mqtt_client.MqttPublishMessage)))(),
    LinkedMapOfintL$MqttPublishMessageL: () => (T.LinkedMapOfintL$MqttPublishMessageL = dart.constFn(_js_helper.LinkedMap$(T.intL(), T.MqttPublishMessageL())))(),
    TypeL: () => (T.TypeL = dart.constFn(dart.legacy(core.Type)))(),
    ObjectL: () => (T.ObjectL = dart.constFn(dart.legacy(core.Object)))(),
    LinkedMapOfTypeL$ObjectL: () => (T.LinkedMapOfTypeL$ObjectL = dart.constFn(_js_helper.LinkedMap$(T.TypeL(), T.ObjectL())))(),
    StreamControllerOfMqttPublishMessageL: () => (T.StreamControllerOfMqttPublishMessageL = dart.constFn(async.StreamController$(T.MqttPublishMessageL())))(),
    MqttPublishAckMessageL: () => (T.MqttPublishAckMessageL = dart.constFn(dart.legacy(mqtt_client.MqttPublishAckMessage)))(),
    MqttPublishReleaseMessageL: () => (T.MqttPublishReleaseMessageL = dart.constFn(dart.legacy(mqtt_client.MqttPublishReleaseMessage)))(),
    MqttPublishCompleteMessageL: () => (T.MqttPublishCompleteMessageL = dart.constFn(dart.legacy(mqtt_client.MqttPublishCompleteMessage)))(),
    MqttPublishReceivedMessageL: () => (T.MqttPublishReceivedMessageL = dart.constFn(dart.legacy(mqtt_client.MqttPublishReceivedMessage)))(),
    SubscriptionL: () => (T.SubscriptionL = dart.constFn(dart.legacy(mqtt_client.Subscription)))(),
    LinkedMapOfStringL$SubscriptionL: () => (T.LinkedMapOfStringL$SubscriptionL = dart.constFn(_js_helper.LinkedMap$(T.StringL(), T.SubscriptionL())))(),
    LinkedMapOfintL$SubscriptionL: () => (T.LinkedMapOfintL$SubscriptionL = dart.constFn(_js_helper.LinkedMap$(T.intL(), T.SubscriptionL())))(),
    LinkedMapOfintL$StringL: () => (T.LinkedMapOfintL$StringL = dart.constFn(_js_helper.LinkedMap$(T.intL(), T.StringL())))(),
    MqttReceivedMessageOfMqttMessageL: () => (T.MqttReceivedMessageOfMqttMessageL = dart.constFn(mqtt_client.MqttReceivedMessage$(T.MqttMessageL())))(),
    MqttReceivedMessageLOfMqttMessageL: () => (T.MqttReceivedMessageLOfMqttMessageL = dart.constFn(dart.legacy(T.MqttReceivedMessageOfMqttMessageL())))(),
    ChangeNotifierOfMqttReceivedMessageLOfMqttMessageL: () => (T.ChangeNotifierOfMqttReceivedMessageLOfMqttMessageL = dart.constFn(change_notifier.ChangeNotifier$(T.MqttReceivedMessageLOfMqttMessageL())))(),
    MessageReceivedL: () => (T.MessageReceivedL = dart.constFn(dart.legacy(mqtt_client.MessageReceived)))(),
    MqttSubscribeAckMessageL: () => (T.MqttSubscribeAckMessageL = dart.constFn(dart.legacy(mqtt_client.MqttSubscribeAckMessage)))(),
    MqttUnsubscribeAckMessageL: () => (T.MqttUnsubscribeAckMessageL = dart.constFn(dart.legacy(mqtt_client.MqttUnsubscribeAckMessage)))(),
    intLAndSubscriptionLToNull: () => (T.intLAndSubscriptionLToNull = dart.constFn(dart.fnType(core.Null, [T.intL(), T.SubscriptionL()])))(),
    Uint8BufferL: () => (T.Uint8BufferL = dart.constFn(dart.legacy(typed_buffer.Uint8Buffer)))(),
    FutureOfvoid: () => (T.FutureOfvoid = dart.constFn(async.Future$(dart.void)))(),
    doubleL: () => (T.doubleL = dart.constFn(dart.legacy(core.double)))(),
    JSArrayOfdoubleL: () => (T.JSArrayOfdoubleL = dart.constFn(_interceptors.JSArray$(T.doubleL())))(),
    ErrorL: () => (T.ErrorL = dart.constFn(dart.legacy(core.Error)))(),
    MqttReadWriteFlagsL: () => (T.MqttReadWriteFlagsL = dart.constFn(dart.legacy(mqtt_client.MqttReadWriteFlags)))(),
    MqttConnectReturnCodeL: () => (T.MqttConnectReturnCodeL = dart.constFn(dart.legacy(mqtt_client.MqttConnectReturnCode)))(),
    LinkedMapOfStringL$MqttQosL: () => (T.LinkedMapOfStringL$MqttQosL = dart.constFn(_js_helper.LinkedMap$(T.StringL(), T.MqttQosL())))(),
    StringLAndMqttQosLToNull: () => (T.StringLAndMqttQosLToNull = dart.constFn(dart.fnType(core.Null, [T.StringL(), T.MqttQosL()])))(),
    JSArrayOfMqttQosL: () => (T.JSArrayOfMqttQosL = dart.constFn(_interceptors.JSArray$(T.MqttQosL())))(),
    JSArrayOfStringL: () => (T.JSArrayOfStringL = dart.constFn(_interceptors.JSArray$(T.StringL())))()
  };
  const CT = Object.create({
    _: () => (C, CT)
  });
  dart.defineLazy(CT, {
    get C0() {
      return C[0] = dart.const({
        __proto__: mqtt_client.MqttConnectionState.prototype,
        [_name$]: "MqttConnectionState.disconnecting",
        index: 0
      });
    },
    get C1() {
      return C[1] = dart.const({
        __proto__: mqtt_client.MqttConnectionState.prototype,
        [_name$]: "MqttConnectionState.disconnected",
        index: 1
      });
    },
    get C2() {
      return C[2] = dart.const({
        __proto__: mqtt_client.MqttConnectionState.prototype,
        [_name$]: "MqttConnectionState.connecting",
        index: 2
      });
    },
    get C3() {
      return C[3] = dart.const({
        __proto__: mqtt_client.MqttConnectionState.prototype,
        [_name$]: "MqttConnectionState.connected",
        index: 3
      });
    },
    get C4() {
      return C[4] = dart.const({
        __proto__: mqtt_client.MqttConnectionState.prototype,
        [_name$]: "MqttConnectionState.faulted",
        index: 4
      });
    },
    get C5() {
      return C[5] = dart.constList([C[0] || CT.C0, C[1] || CT.C1, C[2] || CT.C2, C[3] || CT.C3, C[4] || CT.C4], T.MqttConnectionStateL());
    },
    get C6() {
      return C[6] = dart.constList(["mqtt", "mqttv3.1", "mqttv3.11"], T.StringL());
    },
    get C7() {
      return C[7] = dart.constList(["mqtt"], T.StringL());
    },
    get C8() {
      return C[8] = dart.fn(mqtt_client.Topic.validateMinLength, T.TopicLTovoid());
    },
    get C9() {
      return C[9] = dart.fn(mqtt_client.Topic.validateMaxLength, T.TopicLTovoid());
    },
    get C10() {
      return C[10] = dart.fn(mqtt_client.PublicationTopic._validateWildcards, T.TopicLTovoid());
    },
    get C11() {
      return C[11] = dart.fn(mqtt_client.SubscriptionTopic._validateMultiWildcard, T.TopicLTovoid());
    },
    get C12() {
      return C[12] = dart.fn(mqtt_client.SubscriptionTopic._validateFragments, T.TopicLTovoid());
    },
    get C13() {
      return C[13] = dart.const({
        __proto__: mqtt_client.MqttSubscriptionStatus.prototype,
        [_name$]: "MqttSubscriptionStatus.doesNotExist",
        index: 0
      });
    },
    get C14() {
      return C[14] = dart.const({
        __proto__: mqtt_client.MqttSubscriptionStatus.prototype,
        [_name$]: "MqttSubscriptionStatus.pending",
        index: 1
      });
    },
    get C15() {
      return C[15] = dart.const({
        __proto__: mqtt_client.MqttSubscriptionStatus.prototype,
        [_name$]: "MqttSubscriptionStatus.active",
        index: 2
      });
    },
    get C16() {
      return C[16] = dart.constList([C[13] || CT.C13, C[14] || CT.C14, C[15] || CT.C15], T.MqttSubscriptionStatusL());
    },
    get C17() {
      return C[17] = dart.const({
        __proto__: mqtt_client.MqttQos.prototype,
        [_name$]: "MqttQos.atMostOnce",
        index: 0
      });
    },
    get C18() {
      return C[18] = dart.const({
        __proto__: mqtt_client.MqttQos.prototype,
        [_name$]: "MqttQos.atLeastOnce",
        index: 1
      });
    },
    get C19() {
      return C[19] = dart.const({
        __proto__: mqtt_client.MqttQos.prototype,
        [_name$]: "MqttQos.exactlyOnce",
        index: 2
      });
    },
    get C20() {
      return C[20] = dart.const({
        __proto__: mqtt_client.MqttQos.prototype,
        [_name$]: "MqttQos.reserved1",
        index: 3
      });
    },
    get C21() {
      return C[21] = dart.const({
        __proto__: mqtt_client.MqttQos.prototype,
        [_name$]: "MqttQos.failure",
        index: 4
      });
    },
    get C22() {
      return C[22] = dart.constList([C[17] || CT.C17, C[18] || CT.C18, C[19] || CT.C19, C[20] || CT.C20, C[21] || CT.C21], T.MqttQosL());
    },
    get C23() {
      return C[23] = dart.const({
        __proto__: convert.Utf8Decoder.prototype,
        [Utf8Decoder__allowMalformed]: false
      });
    },
    get C24() {
      return C[24] = dart.const({
        __proto__: convert.Utf8Encoder.prototype
      });
    },
    get C25() {
      return C[25] = dart.const({
        __proto__: mqtt_client.MqttReadWriteFlags.prototype,
        [_name$]: "MqttReadWriteFlags.none",
        index: 0
      });
    },
    get C26() {
      return C[26] = dart.const({
        __proto__: mqtt_client.MqttReadWriteFlags.prototype,
        [_name$]: "MqttReadWriteFlags.protocolName",
        index: 1
      });
    },
    get C27() {
      return C[27] = dart.const({
        __proto__: mqtt_client.MqttReadWriteFlags.prototype,
        [_name$]: "MqttReadWriteFlags.protocolVersion",
        index: 2
      });
    },
    get C28() {
      return C[28] = dart.const({
        __proto__: mqtt_client.MqttReadWriteFlags.prototype,
        [_name$]: "MqttReadWriteFlags.connectFlags",
        index: 3
      });
    },
    get C29() {
      return C[29] = dart.const({
        __proto__: mqtt_client.MqttReadWriteFlags.prototype,
        [_name$]: "MqttReadWriteFlags.keepAlive",
        index: 4
      });
    },
    get C30() {
      return C[30] = dart.const({
        __proto__: mqtt_client.MqttReadWriteFlags.prototype,
        [_name$]: "MqttReadWriteFlags.returnCode",
        index: 5
      });
    },
    get C31() {
      return C[31] = dart.const({
        __proto__: mqtt_client.MqttReadWriteFlags.prototype,
        [_name$]: "MqttReadWriteFlags.topicName",
        index: 6
      });
    },
    get C32() {
      return C[32] = dart.const({
        __proto__: mqtt_client.MqttReadWriteFlags.prototype,
        [_name$]: "MqttReadWriteFlags.messageIdentifier",
        index: 7
      });
    },
    get C33() {
      return C[33] = dart.constList([C[25] || CT.C25, C[26] || CT.C26, C[27] || CT.C27, C[28] || CT.C28, C[29] || CT.C29, C[30] || CT.C30, C[31] || CT.C31, C[32] || CT.C32], T.MqttReadWriteFlagsL());
    },
    get C34() {
      return C[34] = dart.const({
        __proto__: mqtt_client.MqttConnectReturnCode.prototype,
        [_name$]: "MqttConnectReturnCode.connectionAccepted",
        index: 0
      });
    },
    get C35() {
      return C[35] = dart.const({
        __proto__: mqtt_client.MqttConnectReturnCode.prototype,
        [_name$]: "MqttConnectReturnCode.unacceptedProtocolVersion",
        index: 1
      });
    },
    get C36() {
      return C[36] = dart.const({
        __proto__: mqtt_client.MqttConnectReturnCode.prototype,
        [_name$]: "MqttConnectReturnCode.identifierRejected",
        index: 2
      });
    },
    get C37() {
      return C[37] = dart.const({
        __proto__: mqtt_client.MqttConnectReturnCode.prototype,
        [_name$]: "MqttConnectReturnCode.brokerUnavailable",
        index: 3
      });
    },
    get C38() {
      return C[38] = dart.const({
        __proto__: mqtt_client.MqttConnectReturnCode.prototype,
        [_name$]: "MqttConnectReturnCode.badUsernameOrPassword",
        index: 4
      });
    },
    get C39() {
      return C[39] = dart.const({
        __proto__: mqtt_client.MqttConnectReturnCode.prototype,
        [_name$]: "MqttConnectReturnCode.notAuthorized",
        index: 5
      });
    },
    get C40() {
      return C[40] = dart.const({
        __proto__: mqtt_client.MqttConnectReturnCode.prototype,
        [_name$]: "MqttConnectReturnCode.unsolicited",
        index: 6
      });
    },
    get C41() {
      return C[41] = dart.const({
        __proto__: mqtt_client.MqttConnectReturnCode.prototype,
        [_name$]: "MqttConnectReturnCode.solicited",
        index: 7
      });
    },
    get C42() {
      return C[42] = dart.const({
        __proto__: mqtt_client.MqttConnectReturnCode.prototype,
        [_name$]: "MqttConnectReturnCode.noneSpecified",
        index: 8
      });
    },
    get C43() {
      return C[43] = dart.constList([C[34] || CT.C34, C[35] || CT.C35, C[36] || CT.C36, C[37] || CT.C37, C[38] || CT.C38, C[39] || CT.C39, C[40] || CT.C40, C[41] || CT.C41, C[42] || CT.C42], T.MqttConnectReturnCodeL());
    },
    get C44() {
      return C[44] = dart.const({
        __proto__: mqtt_client.MqttMessageType.prototype,
        [_name$]: "MqttMessageType.reserved1",
        index: 0
      });
    },
    get C45() {
      return C[45] = dart.const({
        __proto__: mqtt_client.MqttMessageType.prototype,
        [_name$]: "MqttMessageType.connect",
        index: 1
      });
    },
    get C46() {
      return C[46] = dart.const({
        __proto__: mqtt_client.MqttMessageType.prototype,
        [_name$]: "MqttMessageType.connectAck",
        index: 2
      });
    },
    get C47() {
      return C[47] = dart.const({
        __proto__: mqtt_client.MqttMessageType.prototype,
        [_name$]: "MqttMessageType.publish",
        index: 3
      });
    },
    get C48() {
      return C[48] = dart.const({
        __proto__: mqtt_client.MqttMessageType.prototype,
        [_name$]: "MqttMessageType.publishAck",
        index: 4
      });
    },
    get C49() {
      return C[49] = dart.const({
        __proto__: mqtt_client.MqttMessageType.prototype,
        [_name$]: "MqttMessageType.publishReceived",
        index: 5
      });
    },
    get C50() {
      return C[50] = dart.const({
        __proto__: mqtt_client.MqttMessageType.prototype,
        [_name$]: "MqttMessageType.publishRelease",
        index: 6
      });
    },
    get C51() {
      return C[51] = dart.const({
        __proto__: mqtt_client.MqttMessageType.prototype,
        [_name$]: "MqttMessageType.publishComplete",
        index: 7
      });
    },
    get C52() {
      return C[52] = dart.const({
        __proto__: mqtt_client.MqttMessageType.prototype,
        [_name$]: "MqttMessageType.subscribe",
        index: 8
      });
    },
    get C53() {
      return C[53] = dart.const({
        __proto__: mqtt_client.MqttMessageType.prototype,
        [_name$]: "MqttMessageType.subscribeAck",
        index: 9
      });
    },
    get C54() {
      return C[54] = dart.const({
        __proto__: mqtt_client.MqttMessageType.prototype,
        [_name$]: "MqttMessageType.unsubscribe",
        index: 10
      });
    },
    get C55() {
      return C[55] = dart.const({
        __proto__: mqtt_client.MqttMessageType.prototype,
        [_name$]: "MqttMessageType.unsubscribeAck",
        index: 11
      });
    },
    get C56() {
      return C[56] = dart.const({
        __proto__: mqtt_client.MqttMessageType.prototype,
        [_name$]: "MqttMessageType.pingRequest",
        index: 12
      });
    },
    get C57() {
      return C[57] = dart.const({
        __proto__: mqtt_client.MqttMessageType.prototype,
        [_name$]: "MqttMessageType.pingResponse",
        index: 13
      });
    },
    get C58() {
      return C[58] = dart.const({
        __proto__: mqtt_client.MqttMessageType.prototype,
        [_name$]: "MqttMessageType.disconnect",
        index: 14
      });
    },
    get C59() {
      return C[59] = dart.const({
        __proto__: mqtt_client.MqttMessageType.prototype,
        [_name$]: "MqttMessageType.reserved2",
        index: 15
      });
    },
    get C60() {
      return C[60] = dart.constList([C[44] || CT.C44, C[45] || CT.C45, C[46] || CT.C46, C[47] || CT.C47, C[48] || CT.C48, C[49] || CT.C49, C[50] || CT.C50, C[51] || CT.C51, C[52] || CT.C52, C[53] || CT.C53, C[54] || CT.C54, C[55] || CT.C55, C[56] || CT.C56, C[57] || CT.C57, C[58] || CT.C58, C[59] || CT.C59], T.MqttMessageTypeL());
    }
  }, false);
  var C = Array(61).fill(void 0);
  var I = ["package:mqtt_client/mqtt_client.dart"];
  var server$ = dart.privateName(mqtt_client, "MqttClient.server");
  var port$ = dart.privateName(mqtt_client, "MqttClient.port");
  var clientIdentifier$ = dart.privateName(mqtt_client, "MqttClient.clientIdentifier");
  var useWebSocket = dart.privateName(mqtt_client, "MqttClient.useWebSocket");
  var secure = dart.privateName(mqtt_client, "MqttClient.secure");
  var securityContext = dart.privateName(mqtt_client, "MqttClient.securityContext");
  var keepAlivePeriod = dart.privateName(mqtt_client, "MqttClient.keepAlivePeriod");
  var connectionMessage = dart.privateName(mqtt_client, "MqttClient.connectionMessage");
  var onDisconnected = dart.privateName(mqtt_client, "MqttClient.onDisconnected");
  var onConnected = dart.privateName(mqtt_client, "MqttClient.onConnected");
  var updates = dart.privateName(mqtt_client, "MqttClient.updates");
  var _websocketProtocols = dart.privateName(mqtt_client, "_websocketProtocols");
  var _connectionHandler = dart.privateName(mqtt_client, "_connectionHandler");
  var _subscriptionsManager = dart.privateName(mqtt_client, "_subscriptionsManager");
  var _keepAlive = dart.privateName(mqtt_client, "_keepAlive");
  var _publishingManager = dart.privateName(mqtt_client, "_publishingManager");
  var _connectionStatus = dart.privateName(mqtt_client, "_connectionStatus");
  var _onSubscribed = dart.privateName(mqtt_client, "_onSubscribed");
  var _onSubscribeFail = dart.privateName(mqtt_client, "_onSubscribeFail");
  var _onUnsubscribed = dart.privateName(mqtt_client, "_onUnsubscribed");
  var _clientEventBus$ = dart.privateName(mqtt_client, "_clientEventBus");
  var _internalDisconnect = dart.privateName(mqtt_client, "_internalDisconnect");
  var _getConnectMessage = dart.privateName(mqtt_client, "_getConnectMessage");
  var _disconnect = dart.privateName(mqtt_client, "_disconnect");
  mqtt_client.MqttClient = class MqttClient extends core.Object {
    get server() {
      return this[server$];
    }
    set server(value) {
      this[server$] = value;
    }
    get port() {
      return this[port$];
    }
    set port(value) {
      this[port$] = value;
    }
    get clientIdentifier() {
      return this[clientIdentifier$];
    }
    set clientIdentifier(value) {
      this[clientIdentifier$] = value;
    }
    get useWebSocket() {
      return this[useWebSocket];
    }
    set useWebSocket(value) {
      this[useWebSocket] = value;
    }
    get secure() {
      return this[secure];
    }
    set secure(value) {
      this[secure] = value;
    }
    get securityContext() {
      return this[securityContext];
    }
    set securityContext(value) {
      this[securityContext] = value;
    }
    get keepAlivePeriod() {
      return this[keepAlivePeriod];
    }
    set keepAlivePeriod(value) {
      this[keepAlivePeriod] = value;
    }
    get connectionMessage() {
      return this[connectionMessage];
    }
    set connectionMessage(value) {
      this[connectionMessage] = value;
    }
    get onDisconnected() {
      return this[onDisconnected];
    }
    set onDisconnected(value) {
      this[onDisconnected] = value;
    }
    get onConnected() {
      return this[onConnected];
    }
    set onConnected(value) {
      this[onConnected] = value;
    }
    get updates() {
      return this[updates];
    }
    set updates(value) {
      this[updates] = value;
    }
    set websocketProtocols(protocols) {
      this[_websocketProtocols] = protocols;
      if (this[_connectionHandler] != null) {
        this[_connectionHandler].websocketProtocols = protocols;
      }
    }
    get published() {
      return this[_publishingManager] != null ? this[_publishingManager].published.stream : null;
    }
    get connectionState() {
      return this[_connectionHandler] != null ? this[_connectionHandler].connectionStatus.state : mqtt_client.MqttConnectionState.disconnected;
    }
    get connectionStatus() {
      return this[_connectionHandler] != null ? this[_connectionHandler].connectionStatus : this[_connectionStatus];
    }
    get onSubscribed() {
      return this[_onSubscribed];
    }
    set onSubscribed(cb) {
      let t0;
      this[_onSubscribed] = cb;
      t0 = this[_subscriptionsManager];
      t0 == null ? null : t0.onSubscribed = cb;
    }
    get onSubscribeFail() {
      return this[_onSubscribeFail];
    }
    set onSubscribeFail(cb) {
      let t0;
      this[_onSubscribeFail] = cb;
      t0 = this[_subscriptionsManager];
      t0 == null ? null : t0.onSubscribeFail = cb;
    }
    get onUnsubscribed() {
      return this[_onUnsubscribed];
    }
    set onUnsubscribed(cb) {
      let t0;
      this[_onUnsubscribed] = cb;
      t0 = this[_subscriptionsManager];
      t0 == null ? null : t0.onUnsubscribed = cb;
    }
    connect(username = null, password = null) {
      return async.async(T.MqttClientConnectionStatusL(), (function* connect() {
        let t0;
        if (username != null) {
          mqtt_client.MqttLogger.log("Authenticating with username '{" + dart.str(username) + "}' and password '{" + dart.str(password) + "}'");
          if (username[$trim]().length > 12) {
            mqtt_client.MqttLogger.log("Username length (" + dart.str(username[$trim]().length) + ") exceeds the max recommended in the MQTT spec. ");
          }
        }
        if (password != null && password[$trim]().length > 12) {
          mqtt_client.MqttLogger.log("Password length (" + dart.str(password[$trim]().length) + ") exceeds the max recommended in the MQTT spec. ");
        }
        t0 = this.connectionMessage;
        t0 == null ? null : t0.authenticateAs(username, password);
        this[_clientEventBus$] = new event_bus.EventBus.new();
        this[_connectionHandler] = new mqtt_client.SynchronousMqttConnectionHandler.new(this[_clientEventBus$]);
        if (dart.test(this.useWebSocket)) {
          this[_connectionHandler].secure = false;
          this[_connectionHandler].useWebSocket = true;
          if (this[_websocketProtocols] != null) {
            this[_connectionHandler].websocketProtocols = this[_websocketProtocols];
          }
        }
        if (dart.test(this.secure)) {
          this[_connectionHandler].secure = true;
          this[_connectionHandler].useWebSocket = false;
          this[_connectionHandler].securityContext = this.securityContext;
        }
        this[_connectionHandler].onDisconnected = dart.bind(this, _internalDisconnect);
        this[_connectionHandler].onConnected = this.onConnected;
        this[_publishingManager] = new mqtt_client.PublishingManager.new(this[_connectionHandler], this[_clientEventBus$]);
        this[_subscriptionsManager] = new mqtt_client.SubscriptionsManager.new(this[_connectionHandler], this[_publishingManager], this[_clientEventBus$]);
        this[_subscriptionsManager].onSubscribed = this.onSubscribed;
        this[_subscriptionsManager].onUnsubscribed = this.onUnsubscribed;
        this[_subscriptionsManager].onSubscribeFail = this.onSubscribeFail;
        this.updates = this[_subscriptionsManager].subscriptionNotifier.changes;
        this[_keepAlive] = new mqtt_client.MqttConnectionKeepAlive.new(this[_connectionHandler], this.keepAlivePeriod);
        let connectMessage = this[_getConnectMessage](username, password);
        return yield this[_connectionHandler].connect(this.server, this.port, connectMessage);
      }).bind(this));
    }
    [_getConnectMessage](username, password) {
      let t0;
      t0 = this.connectionMessage;
      return t0 == null ? this.connectionMessage = new mqtt_client.MqttConnectMessage.new().withClientIdentifier(this.clientIdentifier).withWillQos(mqtt_client.MqttQos.atMostOnce).keepAliveFor(mqtt_client.Constants.defaultKeepAlive).authenticateAs(username, password).startClean() : t0;
    }
    subscribe(topic, qosLevel) {
      if (this.connectionStatus.state != mqtt_client.MqttConnectionState.connected) {
        dart.throw(new mqtt_client.ConnectionException.new(this[_connectionHandler].connectionStatus.state));
      }
      return this[_subscriptionsManager].registerSubscription(topic, qosLevel);
    }
    publishMessage(topic, qualityOfService, data, opts) {
      let retain = opts && 'retain' in opts ? opts.retain : false;
      if (this[_connectionHandler].connectionStatus.state != mqtt_client.MqttConnectionState.connected) {
        dart.throw(new mqtt_client.ConnectionException.new(this[_connectionHandler].connectionStatus.state));
      }
      try {
        let pubTopic = new mqtt_client.PublicationTopic.new(topic);
        return this[_publishingManager].publish(pubTopic, qualityOfService, data, retain);
      } catch (e$) {
        let e = dart.getThrown(e$);
        if (T.ExceptionL().is(e)) {
          dart.throw(new mqtt_client.InvalidTopicException.new(dart.toString(e), topic));
        } else
          throw e$;
      }
    }
    unsubscribe(topic) {
      this[_subscriptionsManager].unsubscribe(topic);
    }
    getSubscriptionsStatus(topic) {
      return this[_subscriptionsManager].getSubscriptionsStatus(topic);
    }
    disconnect() {
      this[_disconnect]({unsolicited: false});
    }
    [_internalDisconnect]() {
      if (this.connectionStatus.state == mqtt_client.MqttConnectionState.connected) {
        this[_disconnect]({unsolicited: true});
      }
    }
    [_disconnect](opts) {
      let t1, t1$;
      let unsolicited = opts && 'unsolicited' in opts ? opts.unsolicited : true;
      let returnCode = mqtt_client.MqttConnectReturnCode.unsolicited;
      if (!dart.test(unsolicited)) {
        t1 = this[_connectionHandler];
        t1 == null ? null : t1.disconnect();
        returnCode = mqtt_client.MqttConnectReturnCode.solicited;
      }
      this[_publishingManager].published.close();
      this[_publishingManager] = null;
      this[_subscriptionsManager] = null;
      t1$ = this[_keepAlive];
      t1$ == null ? null : t1$.stop();
      this[_keepAlive] = null;
      this[_connectionHandler] = null;
      this[_clientEventBus$].destroy();
      this[_connectionStatus].state = mqtt_client.MqttConnectionState.disconnected;
      this[_connectionStatus].returnCode = returnCode;
      if (this.onDisconnected != null) {
        this.onDisconnected();
      }
    }
    logging(opts) {
      let on = opts && 'on' in opts ? opts.on : null;
      mqtt_client.MqttLogger.loggingOn = false;
      if (dart.test(on)) {
        mqtt_client.MqttLogger.loggingOn = true;
      }
    }
    setProtocolV31() {
      mqtt_client.Protocol.version = 3;
      mqtt_client.Protocol.name_ = "MQIsdp";
    }
    setProtocolV311() {
      mqtt_client.Protocol.version = 4;
      mqtt_client.Protocol.name_ = "MQTT";
    }
  };
  (mqtt_client.MqttClient.new = function(server, clientIdentifier) {
    this[useWebSocket] = false;
    this[_websocketProtocols] = null;
    this[secure] = false;
    this[securityContext] = io.SecurityContext.defaultContext;
    this[_connectionHandler] = null;
    this[_subscriptionsManager] = null;
    this[_keepAlive] = null;
    this[keepAlivePeriod] = mqtt_client.Constants.defaultKeepAlive;
    this[_publishingManager] = null;
    this[_connectionStatus] = new mqtt_client.MqttClientConnectionStatus.new();
    this[connectionMessage] = null;
    this[onDisconnected] = null;
    this[onConnected] = null;
    this[_onSubscribed] = null;
    this[_onSubscribeFail] = null;
    this[_onUnsubscribed] = null;
    this[_clientEventBus$] = null;
    this[updates] = null;
    this[port$] = null;
    this[server$] = server;
    this[clientIdentifier$] = clientIdentifier;
    this.port = 1883;
  }).prototype = mqtt_client.MqttClient.prototype;
  (mqtt_client.MqttClient.withPort = function(server, clientIdentifier, port) {
    this[useWebSocket] = false;
    this[_websocketProtocols] = null;
    this[secure] = false;
    this[securityContext] = io.SecurityContext.defaultContext;
    this[_connectionHandler] = null;
    this[_subscriptionsManager] = null;
    this[_keepAlive] = null;
    this[keepAlivePeriod] = mqtt_client.Constants.defaultKeepAlive;
    this[_publishingManager] = null;
    this[_connectionStatus] = new mqtt_client.MqttClientConnectionStatus.new();
    this[connectionMessage] = null;
    this[onDisconnected] = null;
    this[onConnected] = null;
    this[_onSubscribed] = null;
    this[_onSubscribeFail] = null;
    this[_onUnsubscribed] = null;
    this[_clientEventBus$] = null;
    this[updates] = null;
    this[server$] = server;
    this[clientIdentifier$] = clientIdentifier;
    this[port$] = port;
    ;
  }).prototype = mqtt_client.MqttClient.prototype;
  dart.addTypeTests(mqtt_client.MqttClient);
  dart.addTypeCaches(mqtt_client.MqttClient);
  dart.setMethodSignature(mqtt_client.MqttClient, () => ({
    __proto__: dart.getMethods(mqtt_client.MqttClient.__proto__),
    connect: dart.fnType(dart.legacy(async.Future$(dart.legacy(mqtt_client.MqttClientConnectionStatus))), [], [dart.legacy(core.String), dart.legacy(core.String)]),
    [_getConnectMessage]: dart.fnType(dart.legacy(mqtt_client.MqttConnectMessage), [dart.legacy(core.String), dart.legacy(core.String)]),
    subscribe: dart.fnType(dart.legacy(mqtt_client.Subscription), [dart.legacy(core.String), dart.legacy(mqtt_client.MqttQos)]),
    publishMessage: dart.fnType(dart.legacy(core.int), [dart.legacy(core.String), dart.legacy(mqtt_client.MqttQos), dart.legacy(typed_buffer.Uint8Buffer)], {retain: dart.legacy(core.bool)}, {}),
    unsubscribe: dart.fnType(dart.void, [dart.legacy(core.String)]),
    getSubscriptionsStatus: dart.fnType(dart.legacy(mqtt_client.MqttSubscriptionStatus), [dart.legacy(core.String)]),
    disconnect: dart.fnType(dart.void, []),
    [_internalDisconnect]: dart.fnType(dart.void, []),
    [_disconnect]: dart.fnType(dart.void, [], {unsolicited: dart.legacy(core.bool)}, {}),
    logging: dart.fnType(dart.void, [], {on: dart.legacy(core.bool)}, {}),
    setProtocolV31: dart.fnType(dart.void, []),
    setProtocolV311: dart.fnType(dart.void, [])
  }));
  dart.setGetterSignature(mqtt_client.MqttClient, () => ({
    __proto__: dart.getGetters(mqtt_client.MqttClient.__proto__),
    published: dart.legacy(async.Stream$(dart.legacy(mqtt_client.MqttPublishMessage))),
    connectionState: dart.legacy(mqtt_client.MqttConnectionState),
    connectionStatus: dart.legacy(mqtt_client.MqttClientConnectionStatus),
    onSubscribed: dart.legacy(dart.fnType(dart.void, [dart.legacy(core.String)])),
    onSubscribeFail: dart.legacy(dart.fnType(dart.void, [dart.legacy(core.String)])),
    onUnsubscribed: dart.legacy(dart.fnType(dart.void, [dart.legacy(core.String)]))
  }));
  dart.setSetterSignature(mqtt_client.MqttClient, () => ({
    __proto__: dart.getSetters(mqtt_client.MqttClient.__proto__),
    websocketProtocols: dart.legacy(core.List$(dart.legacy(core.String))),
    onSubscribed: dart.legacy(dart.fnType(dart.void, [dart.legacy(core.String)])),
    onSubscribeFail: dart.legacy(dart.fnType(dart.void, [dart.legacy(core.String)])),
    onUnsubscribed: dart.legacy(dart.fnType(dart.void, [dart.legacy(core.String)]))
  }));
  dart.setLibraryUri(mqtt_client.MqttClient, I[0]);
  dart.setFieldSignature(mqtt_client.MqttClient, () => ({
    __proto__: dart.getFields(mqtt_client.MqttClient.__proto__),
    server: dart.fieldType(dart.legacy(core.String)),
    port: dart.fieldType(dart.legacy(core.int)),
    clientIdentifier: dart.fieldType(dart.legacy(core.String)),
    useWebSocket: dart.fieldType(dart.legacy(core.bool)),
    [_websocketProtocols]: dart.fieldType(dart.legacy(core.List$(dart.legacy(core.String)))),
    secure: dart.fieldType(dart.legacy(core.bool)),
    securityContext: dart.fieldType(dart.legacy(io.SecurityContext)),
    [_connectionHandler]: dart.fieldType(dart.legacy(mqtt_client.MqttConnectionHandler)),
    [_subscriptionsManager]: dart.fieldType(dart.legacy(mqtt_client.SubscriptionsManager)),
    [_keepAlive]: dart.fieldType(dart.legacy(mqtt_client.MqttConnectionKeepAlive)),
    keepAlivePeriod: dart.fieldType(dart.legacy(core.int)),
    [_publishingManager]: dart.fieldType(dart.legacy(mqtt_client.PublishingManager)),
    [_connectionStatus]: dart.fieldType(dart.legacy(mqtt_client.MqttClientConnectionStatus)),
    connectionMessage: dart.fieldType(dart.legacy(mqtt_client.MqttConnectMessage)),
    onDisconnected: dart.fieldType(dart.legacy(dart.fnType(dart.void, []))),
    onConnected: dart.fieldType(dart.legacy(dart.fnType(dart.void, []))),
    [_onSubscribed]: dart.fieldType(dart.legacy(dart.fnType(dart.void, [dart.legacy(core.String)]))),
    [_onSubscribeFail]: dart.fieldType(dart.legacy(dart.fnType(dart.void, [dart.legacy(core.String)]))),
    [_onUnsubscribed]: dart.fieldType(dart.legacy(dart.fnType(dart.void, [dart.legacy(core.String)]))),
    [_clientEventBus$]: dart.fieldType(dart.legacy(event_bus.EventBus)),
    updates: dart.fieldType(dart.legacy(async.Stream$(dart.legacy(core.List$(dart.legacy(mqtt_client.MqttReceivedMessage$(dart.legacy(mqtt_client.MqttMessage))))))))
  }));
  mqtt_client.Constants = class Constants extends core.Object {};
  (mqtt_client.Constants.new = function() {
    ;
  }).prototype = mqtt_client.Constants.prototype;
  dart.addTypeTests(mqtt_client.Constants);
  dart.addTypeCaches(mqtt_client.Constants);
  dart.setLibraryUri(mqtt_client.Constants, I[0]);
  dart.defineLazy(mqtt_client.Constants, {
    /*mqtt_client.Constants.maxMessageSize*/get maxMessageSize() {
      return 268435455;
    },
    /*mqtt_client.Constants.maxClientIdentifierLength*/get maxClientIdentifierLength() {
      return 1024;
    },
    /*mqtt_client.Constants.maxClientIdentifierLengthSpec*/get maxClientIdentifierLengthSpec() {
      return 23;
    },
    /*mqtt_client.Constants.defaultMqttPort*/get defaultMqttPort() {
      return 1883;
    },
    /*mqtt_client.Constants.recommendedMaxUsernamePasswordLength*/get recommendedMaxUsernamePasswordLength() {
      return 12;
    },
    /*mqtt_client.Constants.defaultKeepAlive*/get defaultKeepAlive() {
      return 60;
    },
    set defaultKeepAlive(_) {},
    /*mqtt_client.Constants.mqttV31ProtocolVersion*/get mqttV31ProtocolVersion() {
      return 3;
    },
    /*mqtt_client.Constants.mqttV31ProtocolName*/get mqttV31ProtocolName() {
      return "MQIsdp";
    },
    /*mqtt_client.Constants.mqttV311ProtocolVersion*/get mqttV311ProtocolVersion() {
      return 4;
    },
    /*mqtt_client.Constants.mqttV311ProtocolName*/get mqttV311ProtocolName() {
      return "MQTT";
    }
  }, true);
  mqtt_client.Protocol = class Protocol extends core.Object {};
  (mqtt_client.Protocol.new = function() {
    ;
  }).prototype = mqtt_client.Protocol.prototype;
  dart.addTypeTests(mqtt_client.Protocol);
  dart.addTypeCaches(mqtt_client.Protocol);
  dart.setLibraryUri(mqtt_client.Protocol, I[0]);
  dart.defineLazy(mqtt_client.Protocol, {
    /*mqtt_client.Protocol.version*/get version() {
      return 3;
    },
    set version(_) {},
    /*mqtt_client.Protocol.name_*/get name_() {
      return "MQIsdp";
    },
    set name_(_) {}
  }, true);
  var _message$ = dart.privateName(mqtt_client, "_message");
  mqtt_client.MessageAvailable = class MessageAvailable extends core.Object {
    get message() {
      return this[_message$];
    }
  };
  (mqtt_client.MessageAvailable.new = function(_message) {
    this[_message$] = _message;
    ;
  }).prototype = mqtt_client.MessageAvailable.prototype;
  dart.addTypeTests(mqtt_client.MessageAvailable);
  dart.addTypeCaches(mqtt_client.MessageAvailable);
  dart.setGetterSignature(mqtt_client.MessageAvailable, () => ({
    __proto__: dart.getGetters(mqtt_client.MessageAvailable.__proto__),
    message: dart.legacy(mqtt_client.MqttMessage)
  }));
  dart.setLibraryUri(mqtt_client.MessageAvailable, I[0]);
  dart.setFieldSignature(mqtt_client.MessageAvailable, () => ({
    __proto__: dart.getFields(mqtt_client.MessageAvailable.__proto__),
    [_message$]: dart.fieldType(dart.legacy(mqtt_client.MqttMessage))
  }));
  var _topic$ = dart.privateName(mqtt_client, "_topic");
  mqtt_client.MessageReceived = class MessageReceived extends core.Object {
    get message() {
      return this[_message$];
    }
    get topic() {
      return this[_topic$];
    }
  };
  (mqtt_client.MessageReceived.new = function(_topic, _message) {
    this[_topic$] = _topic;
    this[_message$] = _message;
    ;
  }).prototype = mqtt_client.MessageReceived.prototype;
  dart.addTypeTests(mqtt_client.MessageReceived);
  dart.addTypeCaches(mqtt_client.MessageReceived);
  dart.setGetterSignature(mqtt_client.MessageReceived, () => ({
    __proto__: dart.getGetters(mqtt_client.MessageReceived.__proto__),
    message: dart.legacy(mqtt_client.MqttMessage),
    topic: dart.legacy(mqtt_client.PublicationTopic)
  }));
  dart.setLibraryUri(mqtt_client.MessageReceived, I[0]);
  dart.setFieldSignature(mqtt_client.MessageReceived, () => ({
    __proto__: dart.getFields(mqtt_client.MessageReceived.__proto__),
    [_message$]: dart.fieldType(dart.legacy(mqtt_client.MqttMessage)),
    [_topic$]: dart.fieldType(dart.legacy(mqtt_client.PublicationTopic))
  }));
  mqtt_client.ClientIdentifierException = class ClientIdentifierException extends core.Object {
    toString() {
      return this[_message$];
    }
  };
  (mqtt_client.ClientIdentifierException.new = function(clientIdentifier) {
    this[_message$] = null;
    this[_message$] = "mqtt-client::ClientIdentifierException: Client id " + dart.str(clientIdentifier) + " is too long at " + dart.str(clientIdentifier.length) + ", " + "Maximum ClientIdentifier length is " + dart.str(1024);
  }).prototype = mqtt_client.ClientIdentifierException.prototype;
  dart.addTypeTests(mqtt_client.ClientIdentifierException);
  dart.addTypeCaches(mqtt_client.ClientIdentifierException);
  mqtt_client.ClientIdentifierException[dart.implements] = () => [core.Exception];
  dart.setMethodSignature(mqtt_client.ClientIdentifierException, () => ({
    __proto__: dart.getMethods(mqtt_client.ClientIdentifierException.__proto__),
    toString: dart.fnType(dart.legacy(core.String), []),
    [$toString]: dart.fnType(dart.legacy(core.String), [])
  }));
  dart.setLibraryUri(mqtt_client.ClientIdentifierException, I[0]);
  dart.setFieldSignature(mqtt_client.ClientIdentifierException, () => ({
    __proto__: dart.getFields(mqtt_client.ClientIdentifierException.__proto__),
    [_message$]: dart.fieldType(dart.legacy(core.String))
  }));
  dart.defineExtensionMethods(mqtt_client.ClientIdentifierException, ['toString']);
  mqtt_client.ConnectionException = class ConnectionException extends core.Object {
    toString() {
      return this[_message$];
    }
  };
  (mqtt_client.ConnectionException.new = function(state) {
    this[_message$] = null;
    this[_message$] = "mqtt-client::ConnectionException: The connection must be in the Connected state in order to perform this operation. " + "Current state is " + dart.str(dart.toString(state)[$split](".")[$_get](1));
  }).prototype = mqtt_client.ConnectionException.prototype;
  dart.addTypeTests(mqtt_client.ConnectionException);
  dart.addTypeCaches(mqtt_client.ConnectionException);
  mqtt_client.ConnectionException[dart.implements] = () => [core.Exception];
  dart.setMethodSignature(mqtt_client.ConnectionException, () => ({
    __proto__: dart.getMethods(mqtt_client.ConnectionException.__proto__),
    toString: dart.fnType(dart.legacy(core.String), []),
    [$toString]: dart.fnType(dart.legacy(core.String), [])
  }));
  dart.setLibraryUri(mqtt_client.ConnectionException, I[0]);
  dart.setFieldSignature(mqtt_client.ConnectionException, () => ({
    __proto__: dart.getFields(mqtt_client.ConnectionException.__proto__),
    [_message$]: dart.fieldType(dart.legacy(core.String))
  }));
  dart.defineExtensionMethods(mqtt_client.ConnectionException, ['toString']);
  mqtt_client.NoConnectionException = class NoConnectionException extends core.Object {
    toString() {
      return this[_message$];
    }
  };
  (mqtt_client.NoConnectionException.new = function(message) {
    this[_message$] = null;
    this[_message$] = "mqtt-client::NoConnectionException: " + dart.str(message);
  }).prototype = mqtt_client.NoConnectionException.prototype;
  dart.addTypeTests(mqtt_client.NoConnectionException);
  dart.addTypeCaches(mqtt_client.NoConnectionException);
  mqtt_client.NoConnectionException[dart.implements] = () => [core.Exception];
  dart.setMethodSignature(mqtt_client.NoConnectionException, () => ({
    __proto__: dart.getMethods(mqtt_client.NoConnectionException.__proto__),
    toString: dart.fnType(dart.legacy(core.String), []),
    [$toString]: dart.fnType(dart.legacy(core.String), [])
  }));
  dart.setLibraryUri(mqtt_client.NoConnectionException, I[0]);
  dart.setFieldSignature(mqtt_client.NoConnectionException, () => ({
    __proto__: dart.getFields(mqtt_client.NoConnectionException.__proto__),
    [_message$]: dart.fieldType(dart.legacy(core.String))
  }));
  dart.defineExtensionMethods(mqtt_client.NoConnectionException, ['toString']);
  mqtt_client.InvalidHeaderException = class InvalidHeaderException extends core.Object {
    toString() {
      return this[_message$];
    }
  };
  (mqtt_client.InvalidHeaderException.new = function(text) {
    this[_message$] = null;
    this[_message$] = "mqtt-client::InvalidHeaderException: " + dart.str(text);
  }).prototype = mqtt_client.InvalidHeaderException.prototype;
  dart.addTypeTests(mqtt_client.InvalidHeaderException);
  dart.addTypeCaches(mqtt_client.InvalidHeaderException);
  mqtt_client.InvalidHeaderException[dart.implements] = () => [core.Exception];
  dart.setMethodSignature(mqtt_client.InvalidHeaderException, () => ({
    __proto__: dart.getMethods(mqtt_client.InvalidHeaderException.__proto__),
    toString: dart.fnType(dart.legacy(core.String), []),
    [$toString]: dart.fnType(dart.legacy(core.String), [])
  }));
  dart.setLibraryUri(mqtt_client.InvalidHeaderException, I[0]);
  dart.setFieldSignature(mqtt_client.InvalidHeaderException, () => ({
    __proto__: dart.getFields(mqtt_client.InvalidHeaderException.__proto__),
    [_message$]: dart.fieldType(dart.legacy(core.String))
  }));
  dart.defineExtensionMethods(mqtt_client.InvalidHeaderException, ['toString']);
  mqtt_client.InvalidMessageException = class InvalidMessageException extends core.Object {
    toString() {
      return this[_message$];
    }
  };
  (mqtt_client.InvalidMessageException.new = function(text) {
    this[_message$] = null;
    this[_message$] = "mqtt-client::InvalidMessageException: " + dart.str(text);
  }).prototype = mqtt_client.InvalidMessageException.prototype;
  dart.addTypeTests(mqtt_client.InvalidMessageException);
  dart.addTypeCaches(mqtt_client.InvalidMessageException);
  mqtt_client.InvalidMessageException[dart.implements] = () => [core.Exception];
  dart.setMethodSignature(mqtt_client.InvalidMessageException, () => ({
    __proto__: dart.getMethods(mqtt_client.InvalidMessageException.__proto__),
    toString: dart.fnType(dart.legacy(core.String), []),
    [$toString]: dart.fnType(dart.legacy(core.String), [])
  }));
  dart.setLibraryUri(mqtt_client.InvalidMessageException, I[0]);
  dart.setFieldSignature(mqtt_client.InvalidMessageException, () => ({
    __proto__: dart.getFields(mqtt_client.InvalidMessageException.__proto__),
    [_message$]: dart.fieldType(dart.legacy(core.String))
  }));
  dart.defineExtensionMethods(mqtt_client.InvalidMessageException, ['toString']);
  mqtt_client.InvalidPayloadSizeException = class InvalidPayloadSizeException extends core.Object {
    toString() {
      return this[_message$];
    }
  };
  (mqtt_client.InvalidPayloadSizeException.new = function(size, max) {
    this[_message$] = null;
    this[_message$] = "mqtt-client::InvalidPayloadSizeException: The size of the payload (" + dart.str(size) + " bytes) must " + "be equal to or greater than 0 and less than " + dart.str(max) + " bytes";
  }).prototype = mqtt_client.InvalidPayloadSizeException.prototype;
  dart.addTypeTests(mqtt_client.InvalidPayloadSizeException);
  dart.addTypeCaches(mqtt_client.InvalidPayloadSizeException);
  mqtt_client.InvalidPayloadSizeException[dart.implements] = () => [core.Exception];
  dart.setMethodSignature(mqtt_client.InvalidPayloadSizeException, () => ({
    __proto__: dart.getMethods(mqtt_client.InvalidPayloadSizeException.__proto__),
    toString: dart.fnType(dart.legacy(core.String), []),
    [$toString]: dart.fnType(dart.legacy(core.String), [])
  }));
  dart.setLibraryUri(mqtt_client.InvalidPayloadSizeException, I[0]);
  dart.setFieldSignature(mqtt_client.InvalidPayloadSizeException, () => ({
    __proto__: dart.getFields(mqtt_client.InvalidPayloadSizeException.__proto__),
    [_message$]: dart.fieldType(dart.legacy(core.String))
  }));
  dart.defineExtensionMethods(mqtt_client.InvalidPayloadSizeException, ['toString']);
  mqtt_client.InvalidTopicException = class InvalidTopicException extends core.Object {
    toString() {
      return this[_message$];
    }
  };
  (mqtt_client.InvalidTopicException.new = function(message, topic) {
    this[_message$] = null;
    this[_message$] = "mqtt-client::InvalidTopicException: Topic " + dart.str(topic) + " is " + dart.str(message);
  }).prototype = mqtt_client.InvalidTopicException.prototype;
  dart.addTypeTests(mqtt_client.InvalidTopicException);
  dart.addTypeCaches(mqtt_client.InvalidTopicException);
  mqtt_client.InvalidTopicException[dart.implements] = () => [core.Exception];
  dart.setMethodSignature(mqtt_client.InvalidTopicException, () => ({
    __proto__: dart.getMethods(mqtt_client.InvalidTopicException.__proto__),
    toString: dart.fnType(dart.legacy(core.String), []),
    [$toString]: dart.fnType(dart.legacy(core.String), [])
  }));
  dart.setLibraryUri(mqtt_client.InvalidTopicException, I[0]);
  dart.setFieldSignature(mqtt_client.InvalidTopicException, () => ({
    __proto__: dart.getFields(mqtt_client.InvalidTopicException.__proto__),
    [_message$]: dart.fieldType(dart.legacy(core.String))
  }));
  dart.defineExtensionMethods(mqtt_client.InvalidTopicException, ['toString']);
  var _name$ = dart.privateName(mqtt_client, "_name");
  mqtt_client.MqttConnectionState = class MqttConnectionState extends core.Object {
    toString() {
      return this[_name$];
    }
  };
  (mqtt_client.MqttConnectionState.new = function(index, _name) {
    this.index = index;
    this[_name$] = _name;
    ;
  }).prototype = mqtt_client.MqttConnectionState.prototype;
  dart.addTypeTests(mqtt_client.MqttConnectionState);
  dart.addTypeCaches(mqtt_client.MqttConnectionState);
  dart.setMethodSignature(mqtt_client.MqttConnectionState, () => ({
    __proto__: dart.getMethods(mqtt_client.MqttConnectionState.__proto__),
    toString: dart.fnType(dart.legacy(core.String), []),
    [$toString]: dart.fnType(dart.legacy(core.String), [])
  }));
  dart.setLibraryUri(mqtt_client.MqttConnectionState, I[0]);
  dart.setFieldSignature(mqtt_client.MqttConnectionState, () => ({
    __proto__: dart.getFields(mqtt_client.MqttConnectionState.__proto__),
    index: dart.finalFieldType(dart.legacy(core.int)),
    [_name$]: dart.finalFieldType(dart.legacy(core.String))
  }));
  dart.defineExtensionMethods(mqtt_client.MqttConnectionState, ['toString']);
  mqtt_client.MqttConnectionState.disconnecting = C[0] || CT.C0;
  mqtt_client.MqttConnectionState.disconnected = C[1] || CT.C1;
  mqtt_client.MqttConnectionState.connecting = C[2] || CT.C2;
  mqtt_client.MqttConnectionState.connected = C[3] || CT.C3;
  mqtt_client.MqttConnectionState.faulted = C[4] || CT.C4;
  mqtt_client.MqttConnectionState.values = C[5] || CT.C5;
  mqtt_client.IMqttConnectionHandler = class IMqttConnectionHandler extends core.Object {};
  (mqtt_client.IMqttConnectionHandler.new = function() {
    ;
  }).prototype = mqtt_client.IMqttConnectionHandler.prototype;
  dart.addTypeTests(mqtt_client.IMqttConnectionHandler);
  dart.addTypeCaches(mqtt_client.IMqttConnectionHandler);
  dart.setLibraryUri(mqtt_client.IMqttConnectionHandler, I[0]);
  var connection = dart.privateName(mqtt_client, "MqttConnectionHandler.connection");
  var messageProcessorRegistry = dart.privateName(mqtt_client, "MqttConnectionHandler.messageProcessorRegistry");
  var sentMessageCallbacks = dart.privateName(mqtt_client, "MqttConnectionHandler.sentMessageCallbacks");
  var connectionStatus = dart.privateName(mqtt_client, "MqttConnectionHandler.connectionStatus");
  var useWebSocket$ = dart.privateName(mqtt_client, "MqttConnectionHandler.useWebSocket");
  var websocketProtocols = dart.privateName(mqtt_client, "MqttConnectionHandler.websocketProtocols");
  var secure$ = dart.privateName(mqtt_client, "MqttConnectionHandler.secure");
  var securityContext$ = dart.privateName(mqtt_client, "MqttConnectionHandler.securityContext");
  var onConnected$ = dart.privateName(mqtt_client, "MqttConnectionHandler.onConnected");
  var onDisconnected$ = dart.privateName(mqtt_client, "MqttConnectionHandler.onDisconnected");
  mqtt_client.MqttConnectionHandler = class MqttConnectionHandler extends core.Object {
    get connection() {
      return this[connection];
    }
    set connection(value) {
      this[connection] = value;
    }
    get messageProcessorRegistry() {
      return this[messageProcessorRegistry];
    }
    set messageProcessorRegistry(value) {
      this[messageProcessorRegistry] = value;
    }
    get sentMessageCallbacks() {
      return this[sentMessageCallbacks];
    }
    set sentMessageCallbacks(value) {
      this[sentMessageCallbacks] = value;
    }
    get connectionStatus() {
      return this[connectionStatus];
    }
    set connectionStatus(value) {
      this[connectionStatus] = value;
    }
    get useWebSocket() {
      return this[useWebSocket$];
    }
    set useWebSocket(value) {
      this[useWebSocket$] = value;
    }
    get websocketProtocols() {
      return this[websocketProtocols];
    }
    set websocketProtocols(value) {
      this[websocketProtocols] = value;
    }
    get secure() {
      return this[secure$];
    }
    set secure(value) {
      this[secure$] = value;
    }
    get securityContext() {
      return this[securityContext$];
    }
    set securityContext(value) {
      this[securityContext$] = value;
    }
    get onConnected() {
      return this[onConnected$];
    }
    set onConnected(value) {
      this[onConnected$] = value;
    }
    get onDisconnected() {
      return this[onDisconnected$];
    }
    set onDisconnected(value) {
      this[onDisconnected$] = value;
    }
    connect(server, port, message) {
      return async.async(T.MqttClientConnectionStatusL(), (function* connect() {
        try {
          yield this.internalConnect(server, port, message);
          return this.connectionStatus;
        } catch (e) {
          let ex = dart.getThrown(e);
          if (T.ExceptionL().is(ex)) {
            this.connectionStatus.state = mqtt_client.MqttConnectionState.faulted;
            dart.rethrow(e);
          } else
            throw e;
        }
      }).bind(this));
    }
    sendMessage(message) {
      mqtt_client.MqttLogger.log("MqttConnectionHandler::sendMessage - " + dart.str(message));
      if (this.connectionStatus.state == mqtt_client.MqttConnectionState.connected || this.connectionStatus.state == mqtt_client.MqttConnectionState.connecting) {
        let buff = new typed_buffer.Uint8Buffer.new();
        let stream = new mqtt_client.MqttByteBuffer.new(buff);
        message.writeTo(stream);
        stream.seek(0);
        dart.dsend(this.connection, 'send', [stream]);
        for (let callback of this.sentMessageCallbacks) {
          callback(message);
        }
      } else {
        mqtt_client.MqttLogger.log("MqttConnectionHandler::sendMessage - not connected");
      }
    }
    close() {
      if (this.connectionStatus.state == mqtt_client.MqttConnectionState.connected) {
        this.disconnect();
      }
    }
    registerForMessage(msgType, callback) {
      this.messageProcessorRegistry[$_set](msgType, callback);
    }
    unRegisterForMessage(msgType) {
      this.messageProcessorRegistry[$remove](msgType);
    }
    registerForAllSentMessages(sentMsgCallback) {
      this.sentMessageCallbacks[$add](sentMsgCallback);
    }
    unRegisterForAllSentMessages(sentMsgCallback) {
      this.sentMessageCallbacks[$remove](sentMsgCallback);
    }
    messageAvailable(event) {
      let callback = this.messageProcessorRegistry[$_get](event.message.header.messageType);
      callback(event.message);
    }
  };
  (mqtt_client.MqttConnectionHandler.new = function() {
    this[connection] = null;
    this[messageProcessorRegistry] = new (T.LinkedMapOfMqttMessageTypeL$MqttMessageLToLboolL()).new();
    this[sentMessageCallbacks] = T.JSArrayOfMqttMessageLToLboolL().of([]);
    this[connectionStatus] = new mqtt_client.MqttClientConnectionStatus.new();
    this[useWebSocket$] = false;
    this[websocketProtocols] = null;
    this[secure$] = false;
    this[securityContext$] = null;
    this[onConnected$] = null;
    this[onDisconnected$] = null;
    ;
  }).prototype = mqtt_client.MqttConnectionHandler.prototype;
  dart.addTypeTests(mqtt_client.MqttConnectionHandler);
  dart.addTypeCaches(mqtt_client.MqttConnectionHandler);
  mqtt_client.MqttConnectionHandler[dart.implements] = () => [mqtt_client.IMqttConnectionHandler];
  dart.setMethodSignature(mqtt_client.MqttConnectionHandler, () => ({
    __proto__: dart.getMethods(mqtt_client.MqttConnectionHandler.__proto__),
    connect: dart.fnType(dart.legacy(async.Future$(dart.legacy(mqtt_client.MqttClientConnectionStatus))), [dart.legacy(core.String), dart.legacy(core.int), dart.legacy(mqtt_client.MqttConnectMessage)]),
    sendMessage: dart.fnType(dart.void, [dart.legacy(mqtt_client.MqttMessage)]),
    close: dart.fnType(dart.void, []),
    registerForMessage: dart.fnType(dart.void, [dart.legacy(mqtt_client.MqttMessageType), dart.legacy(dart.fnType(dart.legacy(core.bool), [dart.legacy(mqtt_client.MqttMessage)]))]),
    unRegisterForMessage: dart.fnType(dart.void, [dart.legacy(mqtt_client.MqttMessageType)]),
    registerForAllSentMessages: dart.fnType(dart.void, [dart.legacy(dart.fnType(dart.legacy(core.bool), [dart.legacy(mqtt_client.MqttMessage)]))]),
    unRegisterForAllSentMessages: dart.fnType(dart.void, [dart.legacy(dart.fnType(dart.legacy(core.bool), [dart.legacy(mqtt_client.MqttMessage)]))]),
    messageAvailable: dart.fnType(dart.void, [dart.legacy(mqtt_client.MessageAvailable)])
  }));
  dart.setLibraryUri(mqtt_client.MqttConnectionHandler, I[0]);
  dart.setFieldSignature(mqtt_client.MqttConnectionHandler, () => ({
    __proto__: dart.getFields(mqtt_client.MqttConnectionHandler.__proto__),
    connection: dart.fieldType(dart.dynamic),
    messageProcessorRegistry: dart.fieldType(dart.legacy(core.Map$(dart.legacy(mqtt_client.MqttMessageType), dart.legacy(dart.fnType(dart.legacy(core.bool), [dart.legacy(mqtt_client.MqttMessage)]))))),
    sentMessageCallbacks: dart.fieldType(dart.legacy(core.List$(dart.legacy(dart.fnType(dart.legacy(core.bool), [dart.legacy(mqtt_client.MqttMessage)]))))),
    connectionStatus: dart.fieldType(dart.legacy(mqtt_client.MqttClientConnectionStatus)),
    useWebSocket: dart.fieldType(dart.legacy(core.bool)),
    websocketProtocols: dart.fieldType(dart.legacy(core.List$(dart.legacy(core.String)))),
    secure: dart.fieldType(dart.legacy(core.bool)),
    securityContext: dart.fieldType(dart.legacy(io.SecurityContext)),
    onConnected: dart.fieldType(dart.legacy(dart.fnType(dart.void, []))),
    onDisconnected: dart.fieldType(dart.legacy(dart.fnType(dart.void, [])))
  }));
  var messageBytes = dart.privateName(mqtt_client, "ReadWrapper.messageBytes");
  mqtt_client.ReadWrapper = class ReadWrapper extends core.Object {
    get messageBytes() {
      return this[messageBytes];
    }
    set messageBytes(value) {
      this[messageBytes] = value;
    }
  };
  (mqtt_client.ReadWrapper.new = function() {
    this[messageBytes] = null;
    this.messageBytes = T.JSArrayOfintL().of([]);
  }).prototype = mqtt_client.ReadWrapper.prototype;
  dart.addTypeTests(mqtt_client.ReadWrapper);
  dart.addTypeCaches(mqtt_client.ReadWrapper);
  dart.setLibraryUri(mqtt_client.ReadWrapper, I[0]);
  dart.setFieldSignature(mqtt_client.ReadWrapper, () => ({
    __proto__: dart.getFields(mqtt_client.ReadWrapper.__proto__),
    messageBytes: dart.fieldType(dart.legacy(core.List$(dart.legacy(core.int))))
  }));
  var client = dart.privateName(mqtt_client, "MqttConnection.client");
  var readWrapper = dart.privateName(mqtt_client, "MqttConnection.readWrapper");
  var messageStream = dart.privateName(mqtt_client, "MqttConnection.messageStream");
  var onDisconnected$0 = dart.privateName(mqtt_client, "MqttConnection.onDisconnected");
  var _onData = dart.privateName(mqtt_client, "_onData");
  var _onError = dart.privateName(mqtt_client, "_onError");
  var _onDone = dart.privateName(mqtt_client, "_onDone");
  var _startListening = dart.privateName(mqtt_client, "_startListening");
  mqtt_client.MqttConnection = class MqttConnection extends core.Object {
    get client() {
      return this[client];
    }
    set client(value) {
      this[client] = value;
    }
    get readWrapper() {
      return this[readWrapper];
    }
    set readWrapper(value) {
      this[readWrapper] = value;
    }
    get messageStream() {
      return this[messageStream];
    }
    set messageStream(value) {
      this[messageStream] = value;
    }
    get onDisconnected() {
      return this[onDisconnected$0];
    }
    set onDisconnected(value) {
      this[onDisconnected$0] = value;
    }
    connect(server, port) {
      let completer = T.CompleterOfvoid().new();
      return completer.future;
    }
    [_startListening]() {
      mqtt_client.MqttLogger.log("MqttConnection::_startListening");
      try {
        dart.dsend(this.client, 'listen', [dart.bind(this, _onData)], {onError: dart.bind(this, _onError), onDone: dart.bind(this, _onDone)});
      } catch (e$) {
        let e = dart.getThrown(e$);
        if (T.ExceptionL().is(e)) {
          core.print("MqttConnection::_startListening - exception raised " + dart.str(e));
        } else
          throw e$;
      }
    }
    [_onData](data) {
      mqtt_client.MqttLogger.log("MqttConnection::_onData");
      if (dart.equals(dart.dload(data, 'length'), 0)) {
        return;
      }
      this.messageStream.addAll(T.ListLOfintL().as(data));
      while (dart.test(this.messageStream.isMessageAvailable())) {
        let messageIsValid = true;
        let msg = null;
        try {
          msg = mqtt_client.MqttMessage.createFrom(this.messageStream);
          if (msg == null) {
            return;
          }
        } catch (e) {
          let ex = dart.getThrown(e);
          if (T.ExceptionL().is(ex)) {
            mqtt_client.MqttLogger.log("MqttConnection::_ondata - message is not valid");
            messageIsValid = false;
          } else
            throw e;
        }
        if (!messageIsValid) {
          return;
        }
        if (messageIsValid) {
          this.messageStream.shrink();
          mqtt_client.MqttLogger.log("MqttConnection::_onData - message received " + dart.str(msg));
          if (!dart.test(this[_clientEventBus$].streamController.isClosed)) {
            this[_clientEventBus$].fire(new mqtt_client.MessageAvailable.new(msg));
            mqtt_client.MqttLogger.log("MqttConnection::_onData - message processed");
          } else {
            mqtt_client.MqttLogger.log("MqttConnection::_onData - message not processed, disconnecting");
          }
        }
      }
    }
    [_onError](error) {
      this[_disconnect]();
      mqtt_client.MqttLogger.log("MqttConnection::_onError - calling disconnected callback");
      this.onDisconnected();
    }
    [_onDone]() {
      this[_disconnect]();
      mqtt_client.MqttLogger.log("MqttConnection::_onDone - calling disconnected callback");
      this.onDisconnected();
    }
    [_disconnect]() {
      if (this.client != null) {
        dart.dsend(this.client, 'close', []);
        this.client = null;
      }
    }
    send(message) {
      let t6;
      let messageBytes = message.read(message.length);
      t6 = this.client;
      t6 == null ? null : dart.dsend(t6, 'add', [messageBytes[$toList]()]);
    }
    disconnect() {
      this[_onDone]();
    }
  };
  (mqtt_client.MqttConnection.new = function(_clientEventBus) {
    this[client] = null;
    this[readWrapper] = null;
    this[messageStream] = null;
    this[onDisconnected$0] = null;
    this[_clientEventBus$] = _clientEventBus;
    ;
  }).prototype = mqtt_client.MqttConnection.prototype;
  (mqtt_client.MqttConnection.fromConnect = function(server, port, _clientEventBus) {
    this[client] = null;
    this[readWrapper] = null;
    this[messageStream] = null;
    this[onDisconnected$0] = null;
    this[_clientEventBus$] = _clientEventBus;
    this.connect(server, port);
  }).prototype = mqtt_client.MqttConnection.prototype;
  dart.addTypeTests(mqtt_client.MqttConnection);
  dart.addTypeCaches(mqtt_client.MqttConnection);
  dart.setMethodSignature(mqtt_client.MqttConnection, () => ({
    __proto__: dart.getMethods(mqtt_client.MqttConnection.__proto__),
    connect: dart.fnType(dart.legacy(async.Future$(dart.void)), [dart.legacy(core.String), dart.legacy(core.int)]),
    [_startListening]: dart.fnType(dart.void, []),
    [_onData]: dart.fnType(dart.void, [dart.dynamic]),
    [_onError]: dart.fnType(dart.void, [dart.dynamic]),
    [_onDone]: dart.fnType(dart.void, []),
    [_disconnect]: dart.fnType(dart.void, []),
    send: dart.fnType(dart.void, [dart.legacy(mqtt_client.MqttByteBuffer)]),
    disconnect: dart.fnType(dart.void, [])
  }));
  dart.setLibraryUri(mqtt_client.MqttConnection, I[0]);
  dart.setFieldSignature(mqtt_client.MqttConnection, () => ({
    __proto__: dart.getFields(mqtt_client.MqttConnection.__proto__),
    client: dart.fieldType(dart.dynamic),
    readWrapper: dart.fieldType(dart.legacy(mqtt_client.ReadWrapper)),
    messageStream: dart.fieldType(dart.legacy(mqtt_client.MqttByteBuffer)),
    onDisconnected: dart.fieldType(dart.legacy(dart.fnType(dart.void, []))),
    [_clientEventBus$]: dart.fieldType(dart.legacy(event_bus.EventBus))
  }));
  mqtt_client.MqttNormalConnection = class MqttNormalConnection extends mqtt_client.MqttConnection {
    connect(server, port) {
      let completer = T.CompleterOfMqttClientConnectionStatusL().new();
      try {
        io.Socket.connect(server, port).then(core.Null, dart.fn(socket => {
          this.client = socket;
          this.readWrapper = new mqtt_client.ReadWrapper.new();
          this.messageStream = new mqtt_client.MqttByteBuffer.new(new typed_buffer.Uint8Buffer.new());
          this[_startListening]();
          completer.complete();
        }, T.dynamicToNull())).catchError(dart.fn(e => {
          this[_onError](e);
          completer.completeError(e);
        }, T.dynamicToNull()));
      } catch (e$) {
        let e = dart.getThrown(e$);
        if (T.ExceptionL().is(e)) {
          completer.completeError(e);
          let message = "MqttNormalConnection::The connection to the message broker {" + dart.str(server) + "}:{" + dart.str(port) + "} could not be made.";
          dart.throw(new mqtt_client.NoConnectionException.new(message));
        } else
          throw e$;
      }
      return completer.future;
    }
  };
  (mqtt_client.MqttNormalConnection.new = function(eventBus) {
    mqtt_client.MqttNormalConnection.__proto__.new.call(this, eventBus);
    ;
  }).prototype = mqtt_client.MqttNormalConnection.prototype;
  (mqtt_client.MqttNormalConnection.fromConnect = function(server, port, eventBus) {
    mqtt_client.MqttNormalConnection.__proto__.new.call(this, eventBus);
    this.connect(server, port);
  }).prototype = mqtt_client.MqttNormalConnection.prototype;
  dart.addTypeTests(mqtt_client.MqttNormalConnection);
  dart.addTypeCaches(mqtt_client.MqttNormalConnection);
  dart.setMethodSignature(mqtt_client.MqttNormalConnection, () => ({
    __proto__: dart.getMethods(mqtt_client.MqttNormalConnection.__proto__),
    connect: dart.fnType(dart.legacy(async.Future$(dart.legacy(mqtt_client.MqttClientConnectionStatus))), [dart.legacy(core.String), dart.legacy(core.int)])
  }));
  dart.setLibraryUri(mqtt_client.MqttNormalConnection, I[0]);
  var protocols = dart.privateName(mqtt_client, "MqttWsConnection.protocols");
  mqtt_client.MqttWsConnection = class MqttWsConnection extends mqtt_client.MqttConnection {
    get protocols() {
      return this[protocols];
    }
    set protocols(value) {
      this[protocols] = value;
    }
    connect(server, port) {
      let completer = T.CompleterOfMqttClientConnectionStatusL().new();
      let uri = null;
      try {
        uri = core.Uri.parse(server);
      } catch (e) {
        let ex = dart.getThrown(e);
        if (T.ExceptionL().is(ex)) {
          let message = "MqttWsConnection::The URI supplied for the WS connection is not valid - " + dart.str(server);
          dart.throw(new mqtt_client.NoConnectionException.new(message));
        } else
          throw e;
      }
      if (uri.scheme !== "ws" && uri.scheme !== "wss") {
        let message = "MqttWsConnection::The URI supplied for the WS has an incorrect scheme - " + dart.str(server);
        dart.throw(new mqtt_client.NoConnectionException.new(message));
      }
      if (port != null) {
        uri = uri.replace({port: port});
      }
      let uriString = dart.toString(uri);
      mqtt_client.MqttLogger.log("MqttWsConnection:: WS URL is " + dart.str(uriString) + ", protocols are " + dart.str(this.protocols));
      try {
        _http.WebSocket.connect(uriString, {protocols: dart.test(this.protocols[$isNotEmpty]) ? this.protocols : null}).then(core.Null, dart.fn(socket => {
          this.client = socket;
          this.readWrapper = new mqtt_client.ReadWrapper.new();
          this.messageStream = new mqtt_client.MqttByteBuffer.new(new typed_buffer.Uint8Buffer.new());
          this[_startListening]();
          completer.complete();
        }, T.dynamicToNull())).catchError(dart.fn(e => {
          this[_onError](e);
          completer.completeError(e);
        }, T.dynamicToNull()));
      } catch (e$) {
        let ex$ = dart.getThrown(e$);
        if (T.ExceptionL().is(ex$)) {
          let message = "MqttWsConnection::The connection to the message broker {" + dart.str(uriString) + "} could not be made.";
          dart.throw(new mqtt_client.NoConnectionException.new(message));
        } else
          throw e$;
      }
      return completer.future;
    }
  };
  (mqtt_client.MqttWsConnection.new = function(eventBus) {
    this[protocols] = mqtt_client.MqttWsConnection.protocolsMultipleDefault;
    mqtt_client.MqttWsConnection.__proto__.new.call(this, eventBus);
    ;
  }).prototype = mqtt_client.MqttWsConnection.prototype;
  (mqtt_client.MqttWsConnection.fromConnect = function(server, port, eventBus) {
    this[protocols] = mqtt_client.MqttWsConnection.protocolsMultipleDefault;
    mqtt_client.MqttWsConnection.__proto__.new.call(this, eventBus);
    this.connect(server, port);
  }).prototype = mqtt_client.MqttWsConnection.prototype;
  dart.addTypeTests(mqtt_client.MqttWsConnection);
  dart.addTypeCaches(mqtt_client.MqttWsConnection);
  dart.setMethodSignature(mqtt_client.MqttWsConnection, () => ({
    __proto__: dart.getMethods(mqtt_client.MqttWsConnection.__proto__),
    connect: dart.fnType(dart.legacy(async.Future$(dart.legacy(mqtt_client.MqttClientConnectionStatus))), [dart.legacy(core.String), dart.legacy(core.int)])
  }));
  dart.setLibraryUri(mqtt_client.MqttWsConnection, I[0]);
  dart.setFieldSignature(mqtt_client.MqttWsConnection, () => ({
    __proto__: dart.getFields(mqtt_client.MqttWsConnection.__proto__),
    protocols: dart.fieldType(dart.legacy(core.List$(dart.legacy(core.String))))
  }));
  dart.defineLazy(mqtt_client.MqttWsConnection, {
    /*mqtt_client.MqttWsConnection.protocolsMultipleDefault*/get protocolsMultipleDefault() {
      return C[6] || CT.C6;
    },
    /*mqtt_client.MqttWsConnection.protocolsSingleDefault*/get protocolsSingleDefault() {
      return C[7] || CT.C7;
    }
  }, true);
  var context$ = dart.privateName(mqtt_client, "MqttSecureConnection.context");
  mqtt_client.MqttSecureConnection = class MqttSecureConnection extends mqtt_client.MqttConnection {
    get context() {
      return this[context$];
    }
    set context(value) {
      this[context$] = value;
    }
    connect(server, port) {
      let completer = T.CompleterOfMqttClientConnectionStatusL().new();
      mqtt_client.MqttLogger.log("MqttSecureConnection::connect");
      try {
        io.SecureSocket.connect(server, port, {context: this.context}).then(core.Null, dart.fn(socket => {
          mqtt_client.MqttLogger.log("MqttSecureConnection::connect - securing socket");
          this.client = socket;
          this.readWrapper = new mqtt_client.ReadWrapper.new();
          this.messageStream = new mqtt_client.MqttByteBuffer.new(new typed_buffer.Uint8Buffer.new());
          mqtt_client.MqttLogger.log("MqttSecureConnection::connect - start listening");
          this[_startListening]();
          completer.complete();
        }, T.SecureSocketLToNull())).catchError(dart.fn(e => {
          this[_onError](e);
          completer.completeError(e);
        }, T.dynamicToNull()));
      } catch (e$) {
        let ex = dart.getThrown(e$);
        if (T.SocketExceptionL().is(ex)) {
          let e = ex;
          let message = "MqttSecureConnection::The connection to the message broker {" + dart.str(server) + "}:{" + dart.str(port) + "} could not be made. Error is " + dart.str(dart.toString(e));
          completer.completeError(e);
          dart.throw(new mqtt_client.NoConnectionException.new(message));
        } else if (T.HandshakeExceptionL().is(ex)) {
          let e = ex;
          let message = "MqttSecureConnection::Handshake exception to the message broker {" + dart.str(server) + "}:{" + dart.str(port) + "}. Error is " + dart.str(dart.toString(e));
          completer.completeError(e);
          dart.throw(new mqtt_client.NoConnectionException.new(message));
        } else if (T.TlsExceptionL().is(ex)) {
          let e = ex;
          let message = "MqttSecureConnection::TLS exception raised on secure connection. Error is " + dart.str(dart.toString(e));
          dart.throw(new mqtt_client.NoConnectionException.new(message));
        } else
          throw e$;
      }
      return completer.future;
    }
  };
  (mqtt_client.MqttSecureConnection.new = function(context, eventBus) {
    this[context$] = context;
    mqtt_client.MqttSecureConnection.__proto__.new.call(this, eventBus);
    ;
  }).prototype = mqtt_client.MqttSecureConnection.prototype;
  (mqtt_client.MqttSecureConnection.fromConnect = function(server, port, eventBus) {
    this[context$] = null;
    mqtt_client.MqttSecureConnection.__proto__.new.call(this, eventBus);
    this.connect(server, port);
  }).prototype = mqtt_client.MqttSecureConnection.prototype;
  dart.addTypeTests(mqtt_client.MqttSecureConnection);
  dart.addTypeCaches(mqtt_client.MqttSecureConnection);
  dart.setMethodSignature(mqtt_client.MqttSecureConnection, () => ({
    __proto__: dart.getMethods(mqtt_client.MqttSecureConnection.__proto__),
    connect: dart.fnType(dart.legacy(async.Future$(dart.legacy(mqtt_client.MqttClientConnectionStatus))), [dart.legacy(core.String), dart.legacy(core.int)])
  }));
  dart.setLibraryUri(mqtt_client.MqttSecureConnection, I[0]);
  dart.setFieldSignature(mqtt_client.MqttSecureConnection, () => ({
    __proto__: dart.getFields(mqtt_client.MqttSecureConnection.__proto__),
    context: dart.fieldType(dart.legacy(io.SecurityContext))
  }));
  var keepAlivePeriod$ = dart.privateName(mqtt_client, "MqttConnectionKeepAlive.keepAlivePeriod");
  var pingTimer = dart.privateName(mqtt_client, "MqttConnectionKeepAlive.pingTimer");
  var _shutdownPadlock = dart.privateName(mqtt_client, "_shutdownPadlock");
  mqtt_client.MqttConnectionKeepAlive = class MqttConnectionKeepAlive extends core.Object {
    get keepAlivePeriod() {
      return this[keepAlivePeriod$];
    }
    set keepAlivePeriod(value) {
      this[keepAlivePeriod$] = value;
    }
    get pingTimer() {
      return this[pingTimer];
    }
    set pingTimer(value) {
      this[pingTimer] = value;
    }
    pingRequired() {
      if (dart.test(this[_shutdownPadlock])) {
        return false;
      } else {
        this[_shutdownPadlock] = true;
      }
      let pinged = false;
      let pingMsg = new mqtt_client.MqttPingRequestMessage.new();
      if (this[_connectionHandler].connectionStatus.state == mqtt_client.MqttConnectionState.connected) {
        this[_connectionHandler].sendMessage(pingMsg);
        pinged = true;
      }
      this.pingTimer = async.Timer.new(new core.Duration.new({milliseconds: this.keepAlivePeriod}), dart.bind(this, 'pingRequired'));
      this[_shutdownPadlock] = false;
      return pinged;
    }
    pingRequestReceived(pingMsg) {
      {
        if (dart.test(this[_shutdownPadlock])) {
          return false;
        } else {
          this[_shutdownPadlock] = true;
        }
        let pingMsg = new mqtt_client.MqttPingResponseMessage.new();
        this[_connectionHandler].sendMessage(pingMsg);
        this[_shutdownPadlock] = false;
        return true;
      }
    }
    pingResponseReceived(pingMsg) {
      return true;
    }
    messageSent(msg) {
      return true;
    }
    stop() {
      this.pingTimer.cancel();
    }
  };
  (mqtt_client.MqttConnectionKeepAlive.new = function(connectionHandler, keepAliveSeconds) {
    this[keepAlivePeriod$] = null;
    this[pingTimer] = null;
    this[_connectionHandler] = null;
    this[_shutdownPadlock] = false;
    this[_connectionHandler] = T.MqttConnectionHandlerL().as(connectionHandler);
    this.keepAlivePeriod = dart.notNull(keepAliveSeconds) * 1000;
    connectionHandler.registerForMessage(mqtt_client.MqttMessageType.pingRequest, dart.bind(this, 'pingRequestReceived'));
    connectionHandler.registerForMessage(mqtt_client.MqttMessageType.pingResponse, dart.bind(this, 'pingResponseReceived'));
    connectionHandler.registerForAllSentMessages(dart.bind(this, 'messageSent'));
    this.pingTimer = async.Timer.new(new core.Duration.new({milliseconds: this.keepAlivePeriod}), dart.bind(this, 'pingRequired'));
  }).prototype = mqtt_client.MqttConnectionKeepAlive.prototype;
  dart.addTypeTests(mqtt_client.MqttConnectionKeepAlive);
  dart.addTypeCaches(mqtt_client.MqttConnectionKeepAlive);
  dart.setMethodSignature(mqtt_client.MqttConnectionKeepAlive, () => ({
    __proto__: dart.getMethods(mqtt_client.MqttConnectionKeepAlive.__proto__),
    pingRequired: dart.fnType(dart.legacy(core.bool), []),
    pingRequestReceived: dart.fnType(dart.legacy(core.bool), [dart.legacy(mqtt_client.MqttMessage)]),
    pingResponseReceived: dart.fnType(dart.legacy(core.bool), [dart.legacy(mqtt_client.MqttMessage)]),
    messageSent: dart.fnType(dart.legacy(core.bool), [dart.legacy(mqtt_client.MqttMessage)]),
    stop: dart.fnType(dart.void, [])
  }));
  dart.setLibraryUri(mqtt_client.MqttConnectionKeepAlive, I[0]);
  dart.setFieldSignature(mqtt_client.MqttConnectionKeepAlive, () => ({
    __proto__: dart.getFields(mqtt_client.MqttConnectionKeepAlive.__proto__),
    keepAlivePeriod: dart.fieldType(dart.legacy(core.int)),
    pingTimer: dart.fieldType(dart.legacy(async.Timer)),
    [_connectionHandler]: dart.fieldType(dart.legacy(mqtt_client.MqttConnectionHandler)),
    [_shutdownPadlock]: dart.fieldType(dart.legacy(core.bool))
  }));
  var _connectTimer = dart.privateName(mqtt_client, "_connectTimer");
  var _connectAckProcessor = dart.privateName(mqtt_client, "_connectAckProcessor");
  var _performConnectionDisconnect = dart.privateName(mqtt_client, "_performConnectionDisconnect");
  mqtt_client.SynchronousMqttConnectionHandler = class SynchronousMqttConnectionHandler extends mqtt_client.MqttConnectionHandler {
    internalConnect(hostname, port, connectMessage) {
      return async.async(T.MqttClientConnectionStatusL(), (function* internalConnect() {
        let connectionAttempts = 0;
        mqtt_client.MqttLogger.log("SynchronousMqttConnectionHandler::internalConnect entered");
        do {
          mqtt_client.MqttLogger.log("SynchronousMqttConnectionHandler::internalConnect - initiating connection try " + dart.str(connectionAttempts));
          this.connectionStatus.state = mqtt_client.MqttConnectionState.connecting;
          if (dart.test(this.useWebSocket)) {
            mqtt_client.MqttLogger.log("SynchronousMqttConnectionHandler::internalConnect - websocket selected");
            this.connection = new mqtt_client.MqttWsConnection.new(this[_clientEventBus$]);
            if (this.websocketProtocols != null) {
              dart.dput(this.connection, 'protocols', this.websocketProtocols);
            }
          } else if (dart.test(this.secure)) {
            mqtt_client.MqttLogger.log("SynchronousMqttConnectionHandler::internalConnect - secure selected");
            this.connection = new mqtt_client.MqttSecureConnection.new(this.securityContext, this[_clientEventBus$]);
          } else {
            mqtt_client.MqttLogger.log("SynchronousMqttConnectionHandler::internalConnect - insecure TCP selected");
            this.connection = new mqtt_client.MqttNormalConnection.new(this[_clientEventBus$]);
          }
          dart.dput(this.connection, 'onDisconnected', this.onDisconnected);
          this[_connectTimer] = new mqtt_client.MqttCancellableAsyncSleep.new(5000);
          yield dart.dsend(this.connection, 'connect', [hostname, port]);
          this.registerForMessage(mqtt_client.MqttMessageType.connectAck, dart.bind(this, _connectAckProcessor));
          this[_clientEventBus$].on(T.MessageAvailableL()).listen(dart.bind(this, 'messageAvailable'));
          mqtt_client.MqttLogger.log("SynchronousMqttConnectionHandler::internalConnect sending connect message");
          this.sendMessage(connectMessage);
          mqtt_client.MqttLogger.log("SynchronousMqttConnectionHandler::internalConnect - pre sleep, state = " + dart.str(this.connectionStatus));
          yield this[_connectTimer].sleep();
          mqtt_client.MqttLogger.log("SynchronousMqttConnectionHandler::internalConnect - post sleep, state = " + dart.str(this.connectionStatus));
        } while (this.connectionStatus.state != mqtt_client.MqttConnectionState.connected && (connectionAttempts = connectionAttempts + 1) < 3);
        if (this.connectionStatus.state != mqtt_client.MqttConnectionState.connected) {
          mqtt_client.MqttLogger.log("SynchronousMqttConnectionHandler::internalConnect failed");
          dart.throw(new mqtt_client.NoConnectionException.new("The maximum allowed connection attempts ({" + dart.str(3) + "}) were exceeded. " + "The broker is not responding to the connection request message " + "(Missing Connection Acknowledgement"));
        }
        mqtt_client.MqttLogger.log("SynchronousMqttConnectionHandler::internalConnect exited with state " + dart.str(this.connectionStatus));
        return this.connectionStatus;
      }).bind(this));
    }
    disconnect() {
      mqtt_client.MqttLogger.log("SynchronousMqttConnectionHandler::disconnect");
      this.connectionStatus.state = mqtt_client.MqttConnectionState.disconnecting;
      this.sendMessage(new mqtt_client.MqttDisconnectMessage.new());
      this[_performConnectionDisconnect]();
      return this.connectionStatus.state = mqtt_client.MqttConnectionState.disconnected;
    }
    [_performConnectionDisconnect]() {
      this.connectionStatus.state = mqtt_client.MqttConnectionState.disconnected;
    }
    [_connectAckProcessor](msg) {
      mqtt_client.MqttLogger.log("SynchronousMqttConnectionHandler::_connectAckProcessor");
      try {
        let ackMsg = T.MqttConnectAckMessageL().as(msg);
        if (ackMsg.variableHeader.returnCode == mqtt_client.MqttConnectReturnCode.brokerUnavailable || ackMsg.variableHeader.returnCode == mqtt_client.MqttConnectReturnCode.identifierRejected || ackMsg.variableHeader.returnCode == mqtt_client.MqttConnectReturnCode.unacceptedProtocolVersion || ackMsg.variableHeader.returnCode == mqtt_client.MqttConnectReturnCode.notAuthorized || ackMsg.variableHeader.returnCode == mqtt_client.MqttConnectReturnCode.badUsernameOrPassword) {
          mqtt_client.MqttLogger.log("SynchronousMqttConnectionHandler::_connectAckProcessor connection rejected");
          this.connectionStatus.returnCode = ackMsg.variableHeader.returnCode;
          this[_performConnectionDisconnect]();
        } else {
          mqtt_client.MqttLogger.log("SynchronousMqttConnectionHandler::_connectAckProcessor - state = connected");
          this.connectionStatus.state = mqtt_client.MqttConnectionState.connected;
          this.connectionStatus.returnCode = mqtt_client.MqttConnectReturnCode.connectionAccepted;
          if (this.onConnected != null) {
            this.onConnected();
          }
        }
      } catch (e) {
        let ex = dart.getThrown(e);
        if (T.ExceptionL().is(ex)) {
          this[_performConnectionDisconnect]();
        } else
          throw e;
      }
      mqtt_client.MqttLogger.log("SynchronousMqttConnectionHandler:: cancelling connect timer");
      this[_connectTimer].cancel();
      return true;
    }
  };
  (mqtt_client.SynchronousMqttConnectionHandler.new = function(_clientEventBus) {
    this[_connectTimer] = null;
    this[_clientEventBus$] = _clientEventBus;
    mqtt_client.SynchronousMqttConnectionHandler.__proto__.new.call(this);
    ;
  }).prototype = mqtt_client.SynchronousMqttConnectionHandler.prototype;
  dart.addTypeTests(mqtt_client.SynchronousMqttConnectionHandler);
  dart.addTypeCaches(mqtt_client.SynchronousMqttConnectionHandler);
  dart.setMethodSignature(mqtt_client.SynchronousMqttConnectionHandler, () => ({
    __proto__: dart.getMethods(mqtt_client.SynchronousMqttConnectionHandler.__proto__),
    internalConnect: dart.fnType(dart.legacy(async.Future$(dart.legacy(mqtt_client.MqttClientConnectionStatus))), [dart.legacy(core.String), dart.legacy(core.int), dart.legacy(mqtt_client.MqttConnectMessage)]),
    disconnect: dart.fnType(dart.legacy(mqtt_client.MqttConnectionState), []),
    [_performConnectionDisconnect]: dart.fnType(dart.void, []),
    [_connectAckProcessor]: dart.fnType(dart.legacy(core.bool), [dart.legacy(mqtt_client.MqttMessage)])
  }));
  dart.setLibraryUri(mqtt_client.SynchronousMqttConnectionHandler, I[0]);
  dart.setFieldSignature(mqtt_client.SynchronousMqttConnectionHandler, () => ({
    __proto__: dart.getFields(mqtt_client.SynchronousMqttConnectionHandler.__proto__),
    [_connectTimer]: dart.fieldType(dart.legacy(mqtt_client.MqttCancellableAsyncSleep)),
    [_clientEventBus$]: dart.fieldType(dart.legacy(event_bus.EventBus))
  }));
  dart.defineLazy(mqtt_client.SynchronousMqttConnectionHandler, {
    /*mqtt_client.SynchronousMqttConnectionHandler.maxConnectionAttempts*/get maxConnectionAttempts() {
      return 3;
    }
  }, true);
  var rawTopic$ = dart.privateName(mqtt_client, "Topic.rawTopic");
  var topicFragments = dart.privateName(mqtt_client, "Topic.topicFragments");
  mqtt_client.Topic = class Topic extends core.Object {
    get rawTopic() {
      return this[rawTopic$];
    }
    set rawTopic(value) {
      this[rawTopic$] = value;
    }
    get topicFragments() {
      return this[topicFragments];
    }
    set topicFragments(value) {
      this[topicFragments] = value;
    }
    static validateMaxLength(topicInstance) {
      if (topicInstance.rawTopic.length > 65535) {
        dart.throw(core.Exception.new("mqtt_client::Topic: The length of the supplied rawTopic " + "(" + dart.str(topicInstance.rawTopic.length) + ") is longer than the maximum allowable (" + dart.str(65535) + ")"));
      }
    }
    get hasWildcards() {
      return this.rawTopic[$contains]("#") || this.rawTopic[$contains]("+");
    }
    static validateMinLength(topicInstance) {
      if (topicInstance.rawTopic[$isEmpty]) {
        dart.throw(core.Exception.new("mqtt_client::Topic: rawTopic must contain at least one character"));
      }
    }
    get hashCode() {
      return dart.hashCode(this.rawTopic);
    }
    _equals(other) {
      if (other == null) return false;
      if (this === other) {
        return true;
      }
      return T.TopicL().is(other) && this.rawTopic == other.rawTopic;
    }
    toString() {
      return this.rawTopic;
    }
  };
  (mqtt_client.Topic.new = function(rawTopic, validations) {
    this[topicFragments] = null;
    this[rawTopic$] = rawTopic;
    this.topicFragments = this.rawTopic[$split]("/"[$_get](0));
    for (let validation of validations) {
      dart.dcall(validation, [this]);
    }
  }).prototype = mqtt_client.Topic.prototype;
  dart.addTypeTests(mqtt_client.Topic);
  dart.addTypeCaches(mqtt_client.Topic);
  dart.setMethodSignature(mqtt_client.Topic, () => ({
    __proto__: dart.getMethods(mqtt_client.Topic.__proto__),
    _equals: dart.fnType(dart.legacy(core.bool), [dart.legacy(core.Object)]),
    [$_equals]: dart.fnType(dart.legacy(core.bool), [dart.legacy(core.Object)]),
    toString: dart.fnType(dart.legacy(core.String), []),
    [$toString]: dart.fnType(dart.legacy(core.String), [])
  }));
  dart.setGetterSignature(mqtt_client.Topic, () => ({
    __proto__: dart.getGetters(mqtt_client.Topic.__proto__),
    hasWildcards: dart.legacy(core.bool),
    hashCode: dart.legacy(core.int),
    [$hashCode]: dart.legacy(core.int)
  }));
  dart.setLibraryUri(mqtt_client.Topic, I[0]);
  dart.setFieldSignature(mqtt_client.Topic, () => ({
    __proto__: dart.getFields(mqtt_client.Topic.__proto__),
    rawTopic: dart.fieldType(dart.legacy(core.String)),
    topicFragments: dart.fieldType(dart.legacy(core.List$(dart.legacy(core.String))))
  }));
  dart.defineExtensionMethods(mqtt_client.Topic, ['_equals', 'toString']);
  dart.defineExtensionAccessors(mqtt_client.Topic, ['hashCode']);
  dart.defineLazy(mqtt_client.Topic, {
    /*mqtt_client.Topic.topicSeparator*/get topicSeparator() {
      return "/";
    },
    /*mqtt_client.Topic.multiWildcard*/get multiWildcard() {
      return "#";
    },
    /*mqtt_client.Topic.multiWildcardValidEnd*/get multiWildcardValidEnd() {
      return "/#";
    },
    /*mqtt_client.Topic.wildcard*/get wildcard() {
      return "+";
    },
    /*mqtt_client.Topic.maxTopicLength*/get maxTopicLength() {
      return 65535;
    }
  }, true);
  var state = dart.privateName(mqtt_client, "MqttClientConnectionStatus.state");
  var returnCode = dart.privateName(mqtt_client, "MqttClientConnectionStatus.returnCode");
  mqtt_client.MqttClientConnectionStatus = class MqttClientConnectionStatus extends core.Object {
    get state() {
      return this[state];
    }
    set state(value) {
      this[state] = value;
    }
    get returnCode() {
      return this[returnCode];
    }
    set returnCode(value) {
      this[returnCode] = value;
    }
    toString() {
      let s = dart.toString(this.state)[$split](".")[$_get](1);
      let r = dart.toString(this.returnCode)[$split](".")[$_get](1);
      return "Connection status is " + dart.str(s) + " with return code " + dart.str(r);
    }
  };
  (mqtt_client.MqttClientConnectionStatus.new = function() {
    this[state] = mqtt_client.MqttConnectionState.disconnected;
    this[returnCode] = mqtt_client.MqttConnectReturnCode.noneSpecified;
    ;
  }).prototype = mqtt_client.MqttClientConnectionStatus.prototype;
  dart.addTypeTests(mqtt_client.MqttClientConnectionStatus);
  dart.addTypeCaches(mqtt_client.MqttClientConnectionStatus);
  dart.setMethodSignature(mqtt_client.MqttClientConnectionStatus, () => ({
    __proto__: dart.getMethods(mqtt_client.MqttClientConnectionStatus.__proto__),
    toString: dart.fnType(dart.legacy(core.String), []),
    [$toString]: dart.fnType(dart.legacy(core.String), [])
  }));
  dart.setLibraryUri(mqtt_client.MqttClientConnectionStatus, I[0]);
  dart.setFieldSignature(mqtt_client.MqttClientConnectionStatus, () => ({
    __proto__: dart.getFields(mqtt_client.MqttClientConnectionStatus.__proto__),
    state: dart.fieldType(dart.legacy(mqtt_client.MqttConnectionState)),
    returnCode: dart.fieldType(dart.legacy(mqtt_client.MqttConnectReturnCode))
  }));
  dart.defineExtensionMethods(mqtt_client.MqttClientConnectionStatus, ['toString']);
  mqtt_client.PublicationTopic = class PublicationTopic extends mqtt_client.Topic {
    static _validateWildcards(topicInstance) {
      if (dart.test(topicInstance.hasWildcards)) {
        dart.throw(core.Exception.new("mqtt_client::PublicationTopic: Cannot publish to a topic that contains MQTT topic wildcards (# or +)"));
      }
    }
  };
  (mqtt_client.PublicationTopic.new = function(topic) {
    mqtt_client.PublicationTopic.__proto__.new.call(this, topic, [C[8] || CT.C8, C[9] || CT.C9, C[10] || CT.C10]);
    ;
  }).prototype = mqtt_client.PublicationTopic.prototype;
  dart.addTypeTests(mqtt_client.PublicationTopic);
  dart.addTypeCaches(mqtt_client.PublicationTopic);
  dart.setLibraryUri(mqtt_client.PublicationTopic, I[0]);
  mqtt_client.SubscriptionTopic = class SubscriptionTopic extends mqtt_client.Topic {
    static _validateFragments(topicInstance) {
      let invalidFragment = topicInstance.topicFragments[$any](dart.fn(fragment => (fragment[$contains]("#") || fragment[$contains]("+")) && fragment.length > 1, T.StringLToboolL()));
      if (dart.test(invalidFragment)) {
        dart.throw(core.Exception.new("mqtt_client::SubscriptionTopic: rawTopic Fragment contains a wildcard but is more than one character long"));
      }
    }
    static _validateMultiWildcard(topicInstance) {
      if (topicInstance.rawTopic[$contains]("#") && !topicInstance.rawTopic[$endsWith]("#")) {
        dart.throw(core.Exception.new("mqtt_client::SubscriptionTopic: The rawTopic wildcard # can only be present at the end of a topic"));
      }
      if (topicInstance.rawTopic.length > 1 && topicInstance.rawTopic[$endsWith]("#") && !topicInstance.rawTopic[$endsWith]("/#")) {
        dart.throw(core.Exception.new("mqtt_client::SubscriptionTopic: Topics using the # wildcard longer than 1 character must " + "be immediately preceeded by a the rawTopic separator /"));
      }
    }
    matches(matcheeTopic) {
      if (this.rawTopic === "#") {
        return true;
      }
      if (this.rawTopic == matcheeTopic.rawTopic) {
        return true;
      }
      for (let i = 0; i < dart.notNull(this.topicFragments[$length]); i = i + 1) {
        let lhsFragment = this.topicFragments[$_get](i);
        if (lhsFragment === "#") {
          return true;
        }
        let isLhsWildcard = lhsFragment === "+";
        if (isLhsWildcard && dart.notNull(matcheeTopic.topicFragments[$length]) <= i) {
          return false;
        }
        if (!isLhsWildcard) {
          let rhsFragment = matcheeTopic.topicFragments[$_get](i);
          if (lhsFragment != rhsFragment) {
            return false;
          }
        }
        if (i + 1 === this.topicFragments[$length] && dart.notNull(matcheeTopic.topicFragments[$length]) > dart.notNull(this.topicFragments[$length])) {
          return false;
        }
      }
      return true;
    }
  };
  (mqtt_client.SubscriptionTopic.new = function(rawTopic) {
    mqtt_client.SubscriptionTopic.__proto__.new.call(this, rawTopic, [C[8] || CT.C8, C[9] || CT.C9, C[11] || CT.C11, C[12] || CT.C12]);
    ;
  }).prototype = mqtt_client.SubscriptionTopic.prototype;
  dart.addTypeTests(mqtt_client.SubscriptionTopic);
  dart.addTypeCaches(mqtt_client.SubscriptionTopic);
  dart.setMethodSignature(mqtt_client.SubscriptionTopic, () => ({
    __proto__: dart.getMethods(mqtt_client.SubscriptionTopic.__proto__),
    matches: dart.fnType(dart.legacy(core.bool), [dart.legacy(mqtt_client.PublicationTopic)])
  }));
  dart.setLibraryUri(mqtt_client.SubscriptionTopic, I[0]);
  mqtt_client.MqttSubscriptionStatus = class MqttSubscriptionStatus extends core.Object {
    toString() {
      return this[_name$];
    }
  };
  (mqtt_client.MqttSubscriptionStatus.new = function(index, _name) {
    this.index = index;
    this[_name$] = _name;
    ;
  }).prototype = mqtt_client.MqttSubscriptionStatus.prototype;
  dart.addTypeTests(mqtt_client.MqttSubscriptionStatus);
  dart.addTypeCaches(mqtt_client.MqttSubscriptionStatus);
  dart.setMethodSignature(mqtt_client.MqttSubscriptionStatus, () => ({
    __proto__: dart.getMethods(mqtt_client.MqttSubscriptionStatus.__proto__),
    toString: dart.fnType(dart.legacy(core.String), []),
    [$toString]: dart.fnType(dart.legacy(core.String), [])
  }));
  dart.setLibraryUri(mqtt_client.MqttSubscriptionStatus, I[0]);
  dart.setFieldSignature(mqtt_client.MqttSubscriptionStatus, () => ({
    __proto__: dart.getFields(mqtt_client.MqttSubscriptionStatus.__proto__),
    index: dart.finalFieldType(dart.legacy(core.int)),
    [_name$]: dart.finalFieldType(dart.legacy(core.String))
  }));
  dart.defineExtensionMethods(mqtt_client.MqttSubscriptionStatus, ['toString']);
  mqtt_client.MqttSubscriptionStatus.doesNotExist = C[13] || CT.C13;
  mqtt_client.MqttSubscriptionStatus.pending = C[14] || CT.C14;
  mqtt_client.MqttSubscriptionStatus.active = C[15] || CT.C15;
  mqtt_client.MqttSubscriptionStatus.values = C[16] || CT.C16;
  mqtt_client.MqttQos = class MqttQos extends core.Object {
    toString() {
      return this[_name$];
    }
  };
  (mqtt_client.MqttQos.new = function(index, _name) {
    this.index = index;
    this[_name$] = _name;
    ;
  }).prototype = mqtt_client.MqttQos.prototype;
  dart.addTypeTests(mqtt_client.MqttQos);
  dart.addTypeCaches(mqtt_client.MqttQos);
  dart.setMethodSignature(mqtt_client.MqttQos, () => ({
    __proto__: dart.getMethods(mqtt_client.MqttQos.__proto__),
    toString: dart.fnType(dart.legacy(core.String), []),
    [$toString]: dart.fnType(dart.legacy(core.String), [])
  }));
  dart.setLibraryUri(mqtt_client.MqttQos, I[0]);
  dart.setFieldSignature(mqtt_client.MqttQos, () => ({
    __proto__: dart.getFields(mqtt_client.MqttQos.__proto__),
    index: dart.finalFieldType(dart.legacy(core.int)),
    [_name$]: dart.finalFieldType(dart.legacy(core.String))
  }));
  dart.defineExtensionMethods(mqtt_client.MqttQos, ['toString']);
  mqtt_client.MqttQos.atMostOnce = C[17] || CT.C17;
  mqtt_client.MqttQos.atLeastOnce = C[18] || CT.C18;
  mqtt_client.MqttQos.exactlyOnce = C[19] || CT.C19;
  mqtt_client.MqttQos.reserved1 = C[20] || CT.C20;
  mqtt_client.MqttQos.failure = C[21] || CT.C21;
  mqtt_client.MqttQos.values = C[22] || CT.C22;
  var topic$ = dart.privateName(mqtt_client, "MqttReceivedMessage.topic");
  var payload$ = dart.privateName(mqtt_client, "MqttReceivedMessage.payload");
  const _is_MqttReceivedMessage_default = Symbol('_is_MqttReceivedMessage_default');
  mqtt_client.MqttReceivedMessage$ = dart.generic(T => {
    var TL = () => (TL = dart.constFn(dart.legacy(T)))();
    class MqttReceivedMessage extends records.ChangeRecord {
      get topic() {
        return this[topic$];
      }
      set topic(value) {
        this[topic$] = value;
      }
      get payload() {
        return this[payload$];
      }
      set payload(value) {
        this[payload$] = TL().as(value);
      }
    }
    (MqttReceivedMessage.new = function(topic, payload) {
      this[topic$] = topic;
      this[payload$] = payload;
      MqttReceivedMessage.__proto__.new.call(this);
      ;
    }).prototype = MqttReceivedMessage.prototype;
    dart.addTypeTests(MqttReceivedMessage);
    MqttReceivedMessage.prototype[_is_MqttReceivedMessage_default] = true;
    dart.addTypeCaches(MqttReceivedMessage);
    dart.setLibraryUri(MqttReceivedMessage, I[0]);
    dart.setFieldSignature(MqttReceivedMessage, () => ({
      __proto__: dart.getFields(MqttReceivedMessage.__proto__),
      topic: dart.fieldType(dart.legacy(core.String)),
      payload: dart.fieldType(dart.legacy(T))
    }));
    return MqttReceivedMessage;
  });
  mqtt_client.MqttReceivedMessage = mqtt_client.MqttReceivedMessage$();
  dart.addTypeTests(mqtt_client.MqttReceivedMessage, _is_MqttReceivedMessage_default);
  var messageIdentifierDispenser = dart.privateName(mqtt_client, "PublishingManager.messageIdentifierDispenser");
  var publishedMessages = dart.privateName(mqtt_client, "PublishingManager.publishedMessages");
  var receivedMessages = dart.privateName(mqtt_client, "PublishingManager.receivedMessages");
  var dataConverters = dart.privateName(mqtt_client, "PublishingManager.dataConverters");
  var connectionHandler$ = dart.privateName(mqtt_client, "PublishingManager.connectionHandler");
  var publishEvent = dart.privateName(mqtt_client, "PublishingManager.publishEvent");
  var _published = dart.privateName(mqtt_client, "_published");
  var _notifyPublish = dart.privateName(mqtt_client, "_notifyPublish");
  mqtt_client.PublishingManager = class PublishingManager extends core.Object {
    get messageIdentifierDispenser() {
      return this[messageIdentifierDispenser];
    }
    set messageIdentifierDispenser(value) {
      this[messageIdentifierDispenser] = value;
    }
    get publishedMessages() {
      return this[publishedMessages];
    }
    set publishedMessages(value) {
      this[publishedMessages] = value;
    }
    get receivedMessages() {
      return this[receivedMessages];
    }
    set receivedMessages(value) {
      this[receivedMessages] = value;
    }
    get dataConverters() {
      return this[dataConverters];
    }
    set dataConverters(value) {
      this[dataConverters] = value;
    }
    get connectionHandler() {
      return this[connectionHandler$];
    }
    set connectionHandler(value) {
      this[connectionHandler$] = value;
    }
    get publishEvent() {
      return this[publishEvent];
    }
    set publishEvent(value) {
      this[publishEvent] = value;
    }
    get published() {
      return this[_published];
    }
    publish(topic, qualityOfService, data, retain = false) {
      let msgId = this.messageIdentifierDispenser.getNextMessageIdentifier();
      let msg = new mqtt_client.MqttPublishMessage.new().toTopic(dart.toString(topic)).withMessageIdentifier(msgId).withQos(qualityOfService).publishData(data);
      msg.setRetain({state: retain});
      if (qualityOfService == mqtt_client.MqttQos.atLeastOnce || qualityOfService == mqtt_client.MqttQos.exactlyOnce) {
        this.publishedMessages[$_set](msgId, msg);
      }
      this.connectionHandler.sendMessage(msg);
      return msgId;
    }
    handlePublishAcknowledgement(msg) {
      let ackMsg = T.MqttPublishAckMessageL().as(msg);
      if (dart.test(this.publishedMessages[$keys][$contains](ackMsg.variableHeader.messageIdentifier))) {
        this.publishedMessages[$remove](ackMsg.variableHeader.messageIdentifier);
      }
      return true;
    }
    handlePublish(msg) {
      let pubMsg = T.MqttPublishMessageL().as(msg);
      let publishSuccess = true;
      try {
        let topic = new mqtt_client.PublicationTopic.new(pubMsg.variableHeader.topicName);
        if (pubMsg.header.qos == mqtt_client.MqttQos.atMostOnce) {
          this[_clientEventBus$].fire(new mqtt_client.MessageReceived.new(topic, msg));
          this[_notifyPublish](T.MqttPublishMessageL().as(msg));
        } else if (pubMsg.header.qos == mqtt_client.MqttQos.atLeastOnce) {
          this[_clientEventBus$].fire(new mqtt_client.MessageReceived.new(topic, msg));
          this[_notifyPublish](T.MqttPublishMessageL().as(msg));
          let ackMsg = new mqtt_client.MqttPublishAckMessage.new().withMessageIdentifier(pubMsg.variableHeader.messageIdentifier);
          this.connectionHandler.sendMessage(ackMsg);
        } else if (pubMsg.header.qos == mqtt_client.MqttQos.exactlyOnce) {
          if (!dart.test(this.receivedMessages[$containsKey](pubMsg.variableHeader.messageIdentifier))) {
            this.receivedMessages[$_set](pubMsg.variableHeader.messageIdentifier, pubMsg);
          }
          let pubRecv = new mqtt_client.MqttPublishReceivedMessage.new().withMessageIdentifier(pubMsg.variableHeader.messageIdentifier);
          this.connectionHandler.sendMessage(pubRecv);
        }
      } catch (e) {
        let ex = dart.getThrown(e);
        if (T.ExceptionL().is(ex)) {
          publishSuccess = false;
        } else
          throw e;
      }
      return publishSuccess;
    }
    handlePublishRelease(msg) {
      let pubRelMsg = T.MqttPublishReleaseMessageL().as(msg);
      let publishSuccess = true;
      try {
        let pubMsg = this.receivedMessages[$remove](pubRelMsg.variableHeader.messageIdentifier);
        if (pubMsg != null) {
          let topic = new mqtt_client.PublicationTopic.new(pubMsg.variableHeader.topicName);
          this[_clientEventBus$].fire(new mqtt_client.MessageReceived.new(topic, pubMsg));
          let compMsg = new mqtt_client.MqttPublishCompleteMessage.new().withMessageIdentifier(pubMsg.variableHeader.messageIdentifier);
          this.connectionHandler.sendMessage(compMsg);
        }
      } catch (e) {
        let ex = dart.getThrown(e);
        if (T.ExceptionL().is(ex)) {
          publishSuccess = false;
        } else
          throw e;
      }
      return publishSuccess;
    }
    handlePublishComplete(msg) {
      let compMsg = T.MqttPublishCompleteMessageL().as(msg);
      let publishMessage = this.publishedMessages[$remove](compMsg.variableHeader.messageIdentifier);
      if (publishMessage != null) {
        this[_notifyPublish](publishMessage);
        return true;
      }
      return false;
    }
    handlePublishReceived(msg) {
      let recvMsg = T.MqttPublishReceivedMessageL().as(msg);
      if (dart.test(this.publishedMessages[$containsKey](recvMsg.variableHeader.messageIdentifier))) {
        let relMsg = new mqtt_client.MqttPublishReleaseMessage.new().withMessageIdentifier(recvMsg.variableHeader.messageIdentifier);
        this.connectionHandler.sendMessage(relMsg);
      }
      return true;
    }
    [_notifyPublish](message) {
      if (dart.test(this[_published].hasListener)) {
        this[_published].add(message);
      }
    }
  };
  (mqtt_client.PublishingManager.new = function(connectionHandler, _clientEventBus) {
    this[messageIdentifierDispenser] = mqtt_client.MessageIdentifierDispenser.new();
    this[publishedMessages] = new (T.LinkedMapOfintL$MqttPublishMessageL()).new();
    this[receivedMessages] = new (T.LinkedMapOfintL$MqttPublishMessageL()).new();
    this[dataConverters] = new (T.LinkedMapOfTypeL$ObjectL()).new();
    this[_published] = T.StreamControllerOfMqttPublishMessageL().broadcast();
    this[publishEvent] = null;
    this[connectionHandler$] = connectionHandler;
    this[_clientEventBus$] = _clientEventBus;
    this.connectionHandler.registerForMessage(mqtt_client.MqttMessageType.publishAck, dart.bind(this, 'handlePublishAcknowledgement'));
    this.connectionHandler.registerForMessage(mqtt_client.MqttMessageType.publish, dart.bind(this, 'handlePublish'));
    this.connectionHandler.registerForMessage(mqtt_client.MqttMessageType.publishComplete, dart.bind(this, 'handlePublishComplete'));
    this.connectionHandler.registerForMessage(mqtt_client.MqttMessageType.publishRelease, dart.bind(this, 'handlePublishRelease'));
    this.connectionHandler.registerForMessage(mqtt_client.MqttMessageType.publishReceived, dart.bind(this, 'handlePublishReceived'));
  }).prototype = mqtt_client.PublishingManager.prototype;
  dart.addTypeTests(mqtt_client.PublishingManager);
  dart.addTypeCaches(mqtt_client.PublishingManager);
  mqtt_client.PublishingManager[dart.implements] = () => [mqtt_client.IPublishingManager];
  dart.setMethodSignature(mqtt_client.PublishingManager, () => ({
    __proto__: dart.getMethods(mqtt_client.PublishingManager.__proto__),
    publish: dart.fnType(dart.legacy(core.int), [dart.legacy(mqtt_client.PublicationTopic), dart.legacy(mqtt_client.MqttQos), dart.legacy(typed_buffer.Uint8Buffer)], [dart.legacy(core.bool)]),
    handlePublishAcknowledgement: dart.fnType(dart.legacy(core.bool), [dart.legacy(mqtt_client.MqttMessage)]),
    handlePublish: dart.fnType(dart.legacy(core.bool), [dart.legacy(mqtt_client.MqttMessage)]),
    handlePublishRelease: dart.fnType(dart.legacy(core.bool), [dart.legacy(mqtt_client.MqttMessage)]),
    handlePublishComplete: dart.fnType(dart.legacy(core.bool), [dart.legacy(mqtt_client.MqttMessage)]),
    handlePublishReceived: dart.fnType(dart.legacy(core.bool), [dart.legacy(mqtt_client.MqttMessage)]),
    [_notifyPublish]: dart.fnType(dart.void, [dart.legacy(mqtt_client.MqttPublishMessage)])
  }));
  dart.setGetterSignature(mqtt_client.PublishingManager, () => ({
    __proto__: dart.getGetters(mqtt_client.PublishingManager.__proto__),
    published: dart.legacy(async.StreamController$(dart.legacy(mqtt_client.MqttPublishMessage)))
  }));
  dart.setLibraryUri(mqtt_client.PublishingManager, I[0]);
  dart.setFieldSignature(mqtt_client.PublishingManager, () => ({
    __proto__: dart.getFields(mqtt_client.PublishingManager.__proto__),
    messageIdentifierDispenser: dart.fieldType(dart.legacy(mqtt_client.MessageIdentifierDispenser)),
    publishedMessages: dart.fieldType(dart.legacy(core.Map$(dart.legacy(core.int), dart.legacy(mqtt_client.MqttPublishMessage)))),
    receivedMessages: dart.fieldType(dart.legacy(core.Map$(dart.legacy(core.int), dart.legacy(mqtt_client.MqttPublishMessage)))),
    dataConverters: dart.fieldType(dart.legacy(core.Map$(dart.legacy(core.Type), dart.legacy(core.Object)))),
    connectionHandler: dart.fieldType(dart.legacy(mqtt_client.IMqttConnectionHandler)),
    [_published]: dart.fieldType(dart.legacy(async.StreamController$(dart.legacy(mqtt_client.MqttPublishMessage)))),
    publishEvent: dart.fieldType(dart.legacy(mqtt_client.MessageReceived)),
    [_clientEventBus$]: dart.fieldType(dart.legacy(event_bus.EventBus))
  }));
  var publishEvent$ = dart.privateName(mqtt_client, "IPublishingManager.publishEvent");
  mqtt_client.IPublishingManager = class IPublishingManager extends core.Object {
    get publishEvent() {
      return this[publishEvent$];
    }
    set publishEvent(value) {
      this[publishEvent$] = value;
    }
  };
  (mqtt_client.IPublishingManager.new = function() {
    this[publishEvent$] = null;
    ;
  }).prototype = mqtt_client.IPublishingManager.prototype;
  dart.addTypeTests(mqtt_client.IPublishingManager);
  dart.addTypeCaches(mqtt_client.IPublishingManager);
  dart.setLibraryUri(mqtt_client.IPublishingManager, I[0]);
  dart.setFieldSignature(mqtt_client.IPublishingManager, () => ({
    __proto__: dart.getFields(mqtt_client.IPublishingManager.__proto__),
    publishEvent: dart.fieldType(dart.legacy(mqtt_client.MessageReceived))
  }));
  var messageIdentifier = dart.privateName(mqtt_client, "Subscription.messageIdentifier");
  var createdTime = dart.privateName(mqtt_client, "Subscription.createdTime");
  var topic = dart.privateName(mqtt_client, "Subscription.topic");
  var qos = dart.privateName(mqtt_client, "Subscription.qos");
  const Object_Observable$36 = class Object_Observable extends core.Object {};
  (Object_Observable$36.new = function() {
    observable.Observable$(dart.legacy(records.ChangeRecord)).new.call(this);
  }).prototype = Object_Observable$36.prototype;
  dart.applyMixin(Object_Observable$36, observable.Observable$(dart.legacy(records.ChangeRecord)));
  mqtt_client.Subscription = class Subscription extends Object_Observable$36 {
    get messageIdentifier() {
      return this[messageIdentifier];
    }
    set messageIdentifier(value) {
      this[messageIdentifier] = value;
    }
    get createdTime() {
      return this[createdTime];
    }
    set createdTime(value) {
      this[createdTime] = value;
    }
    get topic() {
      return this[topic];
    }
    set topic(value) {
      this[topic] = value;
    }
    get qos() {
      return this[qos];
    }
    set qos(value) {
      this[qos] = value;
    }
  };
  (mqtt_client.Subscription.new = function() {
    this[messageIdentifier] = null;
    this[createdTime] = null;
    this[topic] = null;
    this[qos] = null;
    mqtt_client.Subscription.__proto__.new.call(this);
    ;
  }).prototype = mqtt_client.Subscription.prototype;
  dart.addTypeTests(mqtt_client.Subscription);
  dart.addTypeCaches(mqtt_client.Subscription);
  dart.setLibraryUri(mqtt_client.Subscription, I[0]);
  dart.setFieldSignature(mqtt_client.Subscription, () => ({
    __proto__: dart.getFields(mqtt_client.Subscription.__proto__),
    messageIdentifier: dart.fieldType(dart.legacy(core.int)),
    createdTime: dart.fieldType(dart.legacy(core.DateTime)),
    topic: dart.fieldType(dart.legacy(mqtt_client.SubscriptionTopic)),
    qos: dart.fieldType(dart.legacy(mqtt_client.MqttQos))
  }));
  var messageIdentifierDispenser$ = dart.privateName(mqtt_client, "SubscriptionsManager.messageIdentifierDispenser");
  var subscriptions = dart.privateName(mqtt_client, "SubscriptionsManager.subscriptions");
  var pendingSubscriptions = dart.privateName(mqtt_client, "SubscriptionsManager.pendingSubscriptions");
  var pendingUnsubscriptions = dart.privateName(mqtt_client, "SubscriptionsManager.pendingUnsubscriptions");
  var connectionHandler$0 = dart.privateName(mqtt_client, "SubscriptionsManager.connectionHandler");
  var publishingManager$ = dart.privateName(mqtt_client, "SubscriptionsManager.publishingManager");
  var onSubscribed = dart.privateName(mqtt_client, "SubscriptionsManager.onSubscribed");
  var onUnsubscribed = dart.privateName(mqtt_client, "SubscriptionsManager.onUnsubscribed");
  var onSubscribeFail = dart.privateName(mqtt_client, "SubscriptionsManager.onSubscribeFail");
  var _subscriptionNotifier = dart.privateName(mqtt_client, "_subscriptionNotifier");
  mqtt_client.SubscriptionsManager = class SubscriptionsManager extends core.Object {
    get messageIdentifierDispenser() {
      return this[messageIdentifierDispenser$];
    }
    set messageIdentifierDispenser(value) {
      this[messageIdentifierDispenser$] = value;
    }
    get subscriptions() {
      return this[subscriptions];
    }
    set subscriptions(value) {
      this[subscriptions] = value;
    }
    get pendingSubscriptions() {
      return this[pendingSubscriptions];
    }
    set pendingSubscriptions(value) {
      this[pendingSubscriptions] = value;
    }
    get pendingUnsubscriptions() {
      return this[pendingUnsubscriptions];
    }
    set pendingUnsubscriptions(value) {
      this[pendingUnsubscriptions] = value;
    }
    get connectionHandler() {
      return this[connectionHandler$0];
    }
    set connectionHandler(value) {
      this[connectionHandler$0] = value;
    }
    get publishingManager() {
      return this[publishingManager$];
    }
    set publishingManager(value) {
      this[publishingManager$] = value;
    }
    get onSubscribed() {
      return this[onSubscribed];
    }
    set onSubscribed(value) {
      this[onSubscribed] = value;
    }
    get onUnsubscribed() {
      return this[onUnsubscribed];
    }
    set onUnsubscribed(value) {
      this[onUnsubscribed] = value;
    }
    get onSubscribeFail() {
      return this[onSubscribeFail];
    }
    set onSubscribeFail(value) {
      this[onSubscribeFail] = value;
    }
    get subscriptionNotifier() {
      return this[_subscriptionNotifier];
    }
    registerSubscription(topic, qos) {
      let t19;
      let cn = this.tryGetExistingSubscription(topic);
      t19 = cn;
      return t19 == null ? cn = this.createNewSubscription(topic, qos) : t19;
    }
    tryGetExistingSubscription(topic) {
      let retSub = this.subscriptions[$_get](topic);
      if (retSub == null) {
        for (let sub of this.pendingSubscriptions[$values]) {
          if (sub.topic.rawTopic == topic) {
            return sub;
          }
        }
      }
      return retSub;
    }
    createNewSubscription(topic, qos) {
      let t20;
      try {
        let subscriptionTopic = new mqtt_client.SubscriptionTopic.new(topic);
        let msgId = this.messageIdentifierDispenser.getNextMessageIdentifier();
        let sub = new mqtt_client.Subscription.new();
        sub.topic = subscriptionTopic;
        sub.qos = qos;
        sub.messageIdentifier = msgId;
        sub.createdTime = new core.DateTime.now();
        this.pendingSubscriptions[$_set](sub.messageIdentifier, sub);
        let msg = new mqtt_client.MqttSubscribeMessage.new().withMessageIdentifier(sub.messageIdentifier).toTopic(sub.topic.rawTopic).atQos(sub.qos);
        this.connectionHandler.sendMessage(msg);
        return sub;
      } catch (e$) {
        let e = dart.getThrown(e$);
        if (T.ExceptionL().is(e)) {
          mqtt_client.MqttLogger.log("Subscriptionsmanager::createNewSubscription exception raised, text is " + dart.str(e));
          if (this.onSubscribeFail != null) {
            t20 = topic;
            this.onSubscribeFail(t20);
          }
          return null;
        } else
          throw e$;
      }
    }
    publishMessageReceived(event) {
      let topic = event.topic;
      let msg = new (T.MqttReceivedMessageOfMqttMessageL()).new(topic.rawTopic, event.message);
      this.subscriptionNotifier.notifyChange(msg);
    }
    unsubscribe(topic) {
      let unsubscribeMsg = new mqtt_client.MqttUnsubscribeMessage.new().withMessageIdentifier(this.messageIdentifierDispenser.getNextMessageIdentifier()).fromTopic(topic);
      this.connectionHandler.sendMessage(unsubscribeMsg);
      this.pendingUnsubscriptions[$_set](unsubscribeMsg.variableHeader.messageIdentifier, topic);
    }
    confirmSubscription(msg) {
      let t20, t20$;
      let subAck = T.MqttSubscribeAckMessageL().as(msg);
      let topic = null;
      if (dart.test(this.pendingSubscriptions[$containsKey](subAck.variableHeader.messageIdentifier))) {
        topic = this.pendingSubscriptions[$_get](subAck.variableHeader.messageIdentifier).topic.rawTopic;
        this.subscriptions[$_set](topic, this.pendingSubscriptions[$_get](subAck.variableHeader.messageIdentifier));
        this.pendingSubscriptions[$remove](subAck.variableHeader.messageIdentifier);
      } else {
        return false;
      }
      if (subAck.payload.qosGrants[$_get](0) == mqtt_client.MqttQos.failure) {
        this.subscriptions[$remove](topic);
        if (this.onSubscribeFail != null) {
          t20 = topic;
          this.onSubscribeFail(t20);
          return false;
        }
      }
      if (this.onSubscribed != null) {
        t20$ = topic;
        this.onSubscribed(t20$);
      }
      return true;
    }
    confirmUnsubscribe(msg) {
      let t20;
      let unSubAck = T.MqttUnsubscribeAckMessageL().as(msg);
      let topic = this.pendingUnsubscriptions[$_get](unSubAck.variableHeader.messageIdentifier);
      this.subscriptions[$remove](topic);
      this.pendingUnsubscriptions[$remove](unSubAck.variableHeader.messageIdentifier);
      if (this.onUnsubscribed != null) {
        t20 = topic;
        this.onUnsubscribed(t20);
      }
      return true;
    }
    getSubscriptionsStatus(topic) {
      let status = mqtt_client.MqttSubscriptionStatus.doesNotExist;
      if (dart.test(this.subscriptions[$containsKey](topic))) {
        status = mqtt_client.MqttSubscriptionStatus.active;
      }
      this.pendingSubscriptions[$forEach](dart.fn((key, value) => {
        if (value.topic.rawTopic == topic) {
          status = mqtt_client.MqttSubscriptionStatus.pending;
        }
      }, T.intLAndSubscriptionLToNull()));
      return status;
    }
  };
  (mqtt_client.SubscriptionsManager.new = function(connectionHandler, publishingManager, _clientEventBus) {
    this[messageIdentifierDispenser$] = mqtt_client.MessageIdentifierDispenser.new();
    this[subscriptions] = new (T.LinkedMapOfStringL$SubscriptionL()).new();
    this[pendingSubscriptions] = new (T.LinkedMapOfintL$SubscriptionL()).new();
    this[pendingUnsubscriptions] = new (T.LinkedMapOfintL$StringL()).new();
    this[onSubscribed] = null;
    this[onUnsubscribed] = null;
    this[onSubscribeFail] = null;
    this[_subscriptionNotifier] = new (T.ChangeNotifierOfMqttReceivedMessageLOfMqttMessageL()).new();
    this[connectionHandler$0] = connectionHandler;
    this[publishingManager$] = publishingManager;
    this[_clientEventBus$] = _clientEventBus;
    this.connectionHandler.registerForMessage(mqtt_client.MqttMessageType.subscribeAck, dart.bind(this, 'confirmSubscription'));
    this.connectionHandler.registerForMessage(mqtt_client.MqttMessageType.unsubscribeAck, dart.bind(this, 'confirmUnsubscribe'));
    this[_clientEventBus$].on(T.MessageReceivedL()).listen(dart.bind(this, 'publishMessageReceived'));
  }).prototype = mqtt_client.SubscriptionsManager.prototype;
  dart.addTypeTests(mqtt_client.SubscriptionsManager);
  dart.addTypeCaches(mqtt_client.SubscriptionsManager);
  dart.setMethodSignature(mqtt_client.SubscriptionsManager, () => ({
    __proto__: dart.getMethods(mqtt_client.SubscriptionsManager.__proto__),
    registerSubscription: dart.fnType(dart.legacy(mqtt_client.Subscription), [dart.legacy(core.String), dart.legacy(mqtt_client.MqttQos)]),
    tryGetExistingSubscription: dart.fnType(dart.legacy(mqtt_client.Subscription), [dart.legacy(core.String)]),
    createNewSubscription: dart.fnType(dart.legacy(mqtt_client.Subscription), [dart.legacy(core.String), dart.legacy(mqtt_client.MqttQos)]),
    publishMessageReceived: dart.fnType(dart.void, [dart.legacy(mqtt_client.MessageReceived)]),
    unsubscribe: dart.fnType(dart.void, [dart.legacy(core.String)]),
    confirmSubscription: dart.fnType(dart.legacy(core.bool), [dart.legacy(mqtt_client.MqttMessage)]),
    confirmUnsubscribe: dart.fnType(dart.legacy(core.bool), [dart.legacy(mqtt_client.MqttMessage)]),
    getSubscriptionsStatus: dart.fnType(dart.legacy(mqtt_client.MqttSubscriptionStatus), [dart.legacy(core.String)])
  }));
  dart.setGetterSignature(mqtt_client.SubscriptionsManager, () => ({
    __proto__: dart.getGetters(mqtt_client.SubscriptionsManager.__proto__),
    subscriptionNotifier: dart.legacy(change_notifier.ChangeNotifier$(dart.legacy(mqtt_client.MqttReceivedMessage$(dart.legacy(mqtt_client.MqttMessage)))))
  }));
  dart.setLibraryUri(mqtt_client.SubscriptionsManager, I[0]);
  dart.setFieldSignature(mqtt_client.SubscriptionsManager, () => ({
    __proto__: dart.getFields(mqtt_client.SubscriptionsManager.__proto__),
    messageIdentifierDispenser: dart.fieldType(dart.legacy(mqtt_client.MessageIdentifierDispenser)),
    subscriptions: dart.fieldType(dart.legacy(core.Map$(dart.legacy(core.String), dart.legacy(mqtt_client.Subscription)))),
    pendingSubscriptions: dart.fieldType(dart.legacy(core.Map$(dart.legacy(core.int), dart.legacy(mqtt_client.Subscription)))),
    pendingUnsubscriptions: dart.fieldType(dart.legacy(core.Map$(dart.legacy(core.int), dart.legacy(core.String)))),
    connectionHandler: dart.fieldType(dart.legacy(mqtt_client.IMqttConnectionHandler)),
    publishingManager: dart.fieldType(dart.legacy(mqtt_client.PublishingManager)),
    onSubscribed: dart.fieldType(dart.legacy(dart.fnType(dart.void, [dart.legacy(core.String)]))),
    onUnsubscribed: dart.fieldType(dart.legacy(dart.fnType(dart.void, [dart.legacy(core.String)]))),
    onSubscribeFail: dart.fieldType(dart.legacy(dart.fnType(dart.void, [dart.legacy(core.String)]))),
    [_clientEventBus$]: dart.fieldType(dart.legacy(event_bus.EventBus)),
    [_subscriptionNotifier]: dart.finalFieldType(dart.legacy(change_notifier.ChangeNotifier$(dart.legacy(mqtt_client.MqttReceivedMessage$(dart.legacy(mqtt_client.MqttMessage))))))
  }));
  var _mid = dart.privateName(mqtt_client, "_mid");
  mqtt_client.MessageIdentifierDispenser = class MessageIdentifierDispenser extends core.Object {
    static new() {
      return mqtt_client.MessageIdentifierDispenser._singleton;
    }
    get mid() {
      return this[_mid];
    }
    getNextMessageIdentifier() {
      this[_mid] = dart.notNull(this[_mid]) + 1;
      if (this[_mid] === 32768) {
        this[_mid] = 1;
      }
      return this.mid;
    }
    reset() {
      this[_mid] = 0;
    }
  };
  (mqtt_client.MessageIdentifierDispenser._internal = function() {
    this[_mid] = 0;
    ;
  }).prototype = mqtt_client.MessageIdentifierDispenser.prototype;
  dart.addTypeTests(mqtt_client.MessageIdentifierDispenser);
  dart.addTypeCaches(mqtt_client.MessageIdentifierDispenser);
  dart.setMethodSignature(mqtt_client.MessageIdentifierDispenser, () => ({
    __proto__: dart.getMethods(mqtt_client.MessageIdentifierDispenser.__proto__),
    getNextMessageIdentifier: dart.fnType(dart.legacy(core.int), []),
    reset: dart.fnType(dart.void, [])
  }));
  dart.setGetterSignature(mqtt_client.MessageIdentifierDispenser, () => ({
    __proto__: dart.getGetters(mqtt_client.MessageIdentifierDispenser.__proto__),
    mid: dart.legacy(core.int)
  }));
  dart.setLibraryUri(mqtt_client.MessageIdentifierDispenser, I[0]);
  dart.setFieldSignature(mqtt_client.MessageIdentifierDispenser, () => ({
    __proto__: dart.getFields(mqtt_client.MessageIdentifierDispenser.__proto__),
    [_mid]: dart.fieldType(dart.legacy(core.int))
  }));
  dart.defineLazy(mqtt_client.MessageIdentifierDispenser, {
    /*mqtt_client.MessageIdentifierDispenser._singleton*/get _singleton() {
      return new mqtt_client.MessageIdentifierDispenser._internal();
    },
    set _singleton(_) {},
    /*mqtt_client.MessageIdentifierDispenser.maxMessageIdentifier*/get maxMessageIdentifier() {
      return 32768;
    },
    /*mqtt_client.MessageIdentifierDispenser.initialValue*/get initialValue() {
      return 0;
    },
    /*mqtt_client.MessageIdentifierDispenser.startMessageIdentifier*/get startMessageIdentifier() {
      return 1;
    }
  }, true);
  const _is_PayloadConverter_default = Symbol('_is_PayloadConverter_default');
  mqtt_client.PayloadConverter$ = dart.generic(T => {
    class PayloadConverter extends core.Object {}
    (PayloadConverter.new = function() {
      ;
    }).prototype = PayloadConverter.prototype;
    dart.addTypeTests(PayloadConverter);
    PayloadConverter.prototype[_is_PayloadConverter_default] = true;
    dart.addTypeCaches(PayloadConverter);
    dart.setLibraryUri(PayloadConverter, I[0]);
    return PayloadConverter;
  });
  mqtt_client.PayloadConverter = mqtt_client.PayloadConverter$();
  dart.addTypeTests(mqtt_client.PayloadConverter, _is_PayloadConverter_default);
  mqtt_client.PassthruPayloadConverter = class PassthruPayloadConverter extends core.Object {
    convertFromBytes(messageData) {
      return messageData;
    }
    convertToBytes(data) {
      T.Uint8BufferL().as(data);
      return data;
    }
  };
  (mqtt_client.PassthruPayloadConverter.new = function() {
    ;
  }).prototype = mqtt_client.PassthruPayloadConverter.prototype;
  dart.addTypeTests(mqtt_client.PassthruPayloadConverter);
  dart.addTypeCaches(mqtt_client.PassthruPayloadConverter);
  mqtt_client.PassthruPayloadConverter[dart.implements] = () => [mqtt_client.PayloadConverter$(dart.legacy(typed_buffer.Uint8Buffer))];
  dart.setMethodSignature(mqtt_client.PassthruPayloadConverter, () => ({
    __proto__: dart.getMethods(mqtt_client.PassthruPayloadConverter.__proto__),
    convertFromBytes: dart.fnType(dart.legacy(typed_buffer.Uint8Buffer), [dart.legacy(typed_buffer.Uint8Buffer)]),
    convertToBytes: dart.fnType(dart.legacy(typed_buffer.Uint8Buffer), [dart.legacy(core.Object)])
  }));
  dart.setLibraryUri(mqtt_client.PassthruPayloadConverter, I[0]);
  mqtt_client.MqttEncoding = class MqttEncoding extends convert.Utf8Codec {
    getBytes(s) {
      mqtt_client.MqttEncoding._validateString(s);
      let stringBytes = new typed_buffer.Uint8Buffer.new();
      stringBytes.add(s.length[$rightShift](8));
      stringBytes.add(s.length & 255);
      stringBytes.addAll(this.encoder.convert(s));
      return stringBytes;
    }
    getString(bytes) {
      return this.decoder.convert(bytes[$toList]());
    }
    getCharCount(bytes) {
      if (dart.notNull(bytes.length) < 2) {
        dart.throw(core.Exception.new("mqtt_client::MQTTEncoding: Length byte array must comprise 2 bytes"));
      }
      return (dart.notNull(bytes._get(0)) << 8 >>> 0) + dart.notNull(bytes._get(1));
    }
    getByteCount(chars) {
      mqtt_client.MqttEncoding._validateString(chars);
      return this.getBytes(chars).length;
    }
    static _validateString(s) {
      for (let i = 0; i < s.length; i = i + 1) {
        if (s[$codeUnitAt](i) > 127) {
          dart.throw(core.Exception.new("mqtt_client::MQTTEncoding: The input string has extended " + "UTF characters, which are not supported"));
        }
      }
    }
  };
  (mqtt_client.MqttEncoding.new = function() {
    mqtt_client.MqttEncoding.__proto__.new.call(this);
    ;
  }).prototype = mqtt_client.MqttEncoding.prototype;
  dart.addTypeTests(mqtt_client.MqttEncoding);
  dart.addTypeCaches(mqtt_client.MqttEncoding);
  dart.setMethodSignature(mqtt_client.MqttEncoding, () => ({
    __proto__: dart.getMethods(mqtt_client.MqttEncoding.__proto__),
    getBytes: dart.fnType(dart.legacy(typed_buffer.Uint8Buffer), [dart.legacy(core.String)]),
    getString: dart.fnType(dart.legacy(core.String), [dart.legacy(typed_buffer.Uint8Buffer)]),
    getCharCount: dart.fnType(dart.legacy(core.int), [dart.legacy(typed_buffer.Uint8Buffer)]),
    getByteCount: dart.fnType(dart.legacy(core.int), [dart.legacy(core.String)])
  }));
  dart.setLibraryUri(mqtt_client.MqttEncoding, I[0]);
  var Utf8Decoder__allowMalformed = dart.privateName(convert, "Utf8Decoder._allowMalformed");
  mqtt_client.AsciiPayloadConverter = class AsciiPayloadConverter extends core.Object {
    convertFromBytes(messageData) {
      let decoder = C[23] || CT.C23;
      return decoder.convert(messageData[$toList]());
    }
    convertToBytes(data) {
      T.StringL().as(data);
      let encoder = C[24] || CT.C24;
      let buff = new typed_buffer.Uint8Buffer.new();
      buff.addAll(encoder.convert(data));
      return buff;
    }
  };
  (mqtt_client.AsciiPayloadConverter.new = function() {
    ;
  }).prototype = mqtt_client.AsciiPayloadConverter.prototype;
  dart.addTypeTests(mqtt_client.AsciiPayloadConverter);
  dart.addTypeCaches(mqtt_client.AsciiPayloadConverter);
  mqtt_client.AsciiPayloadConverter[dart.implements] = () => [mqtt_client.PayloadConverter$(dart.legacy(core.String))];
  dart.setMethodSignature(mqtt_client.AsciiPayloadConverter, () => ({
    __proto__: dart.getMethods(mqtt_client.AsciiPayloadConverter.__proto__),
    convertFromBytes: dart.fnType(dart.legacy(core.String), [dart.legacy(typed_buffer.Uint8Buffer)]),
    convertToBytes: dart.fnType(dart.legacy(typed_buffer.Uint8Buffer), [dart.legacy(core.Object)])
  }));
  dart.setLibraryUri(mqtt_client.AsciiPayloadConverter, I[0]);
  var buffer$ = dart.privateName(mqtt_client, "MqttByteBuffer.buffer");
  var _position = dart.privateName(mqtt_client, "_position");
  mqtt_client.MqttByteBuffer = class MqttByteBuffer extends core.Object {
    get buffer() {
      return this[buffer$];
    }
    set buffer(value) {
      this[buffer$] = value;
    }
    get position() {
      return this[_position];
    }
    get length() {
      return this.buffer.length;
    }
    get availableBytes() {
      return dart.notNull(this.length) - dart.notNull(this[_position]);
    }
    reset() {
      this[_position] = 0;
    }
    set skipBytes(bytes) {
      return this[_position] = dart.notNull(this[_position]) + dart.notNull(bytes);
    }
    addAll(data) {
      this.buffer.addAll(data);
    }
    shrink() {
      this.buffer[$removeRange](0, this[_position]);
      this[_position] = 0;
    }
    isMessageAvailable() {
      if (dart.notNull(this.availableBytes) > 0) {
        return true;
      }
      return false;
    }
    readByte() {
      let tmp = this.buffer._get(this[_position]);
      if (dart.notNull(this[_position]) <= dart.notNull(this.length) - 1) {
        this[_position] = dart.notNull(this[_position]) + 1;
      } else {
        return -1;
      }
      return tmp;
    }
    readShort() {
      let high = this.readByte();
      let low = this.readByte();
      return (dart.notNull(high) << 8 >>> 0) + dart.notNull(low);
    }
    read(count) {
      if (dart.notNull(this.length) < dart.notNull(count) || dart.notNull(this[_position]) + dart.notNull(count) > dart.notNull(this.length)) {
        dart.throw(core.Exception.new("mqtt_client::ByteBuffer: The buffer did not have enough bytes for the read operation " + "length " + dart.str(this.length) + ", count " + dart.str(count) + ", position " + dart.str(this[_position])));
      }
      let tmp = new typed_buffer.Uint8Buffer.new();
      tmp.addAll(this.buffer[$getRange](this[_position], dart.notNull(this[_position]) + dart.notNull(count)));
      this[_position] = dart.notNull(this[_position]) + dart.notNull(count);
      let tmp2 = new typed_buffer.Uint8Buffer.new();
      tmp2.addAll(tmp);
      return tmp2;
    }
    writeByte(byte) {
      if (this.buffer.length == this[_position]) {
        this.buffer.add(byte);
      } else {
        this.buffer._set(this[_position], byte);
      }
      this[_position] = dart.notNull(this[_position]) + 1;
    }
    writeShort(short) {
      this.writeByte(short[$rightShift](8));
      this.writeByte(dart.notNull(short) & 255);
    }
    write(buffer) {
      if (this.buffer == null) {
        this.buffer = buffer;
      } else {
        this.buffer.addAll(buffer);
      }
      this[_position] = this.length;
    }
    seek(seek) {
      if (dart.notNull(seek) <= dart.notNull(this.length) && dart.notNull(seek) >= 0) {
        this[_position] = seek;
      } else {
        this[_position] = this.length;
      }
    }
    writeMqttStringM(stringToWrite) {
      mqtt_client.MqttByteBuffer.writeMqttString(this, stringToWrite);
    }
    static writeMqttString(stringStream, stringToWrite) {
      let enc = new mqtt_client.MqttEncoding.new();
      let stringBytes = enc.getBytes(stringToWrite);
      stringStream.write(stringBytes);
    }
    readMqttStringM() {
      return mqtt_client.MqttByteBuffer.readMqttString(this);
    }
    static readMqttString(buffer) {
      let lengthBytes = buffer.read(2);
      let enc = new mqtt_client.MqttEncoding.new();
      let stringLength = enc.getCharCount(lengthBytes);
      let stringBuff = buffer.read(stringLength);
      return enc.getString(stringBuff);
    }
  };
  (mqtt_client.MqttByteBuffer.new = function(buffer) {
    this[_position] = 0;
    this[buffer$] = buffer;
    ;
  }).prototype = mqtt_client.MqttByteBuffer.prototype;
  (mqtt_client.MqttByteBuffer.fromList = function(data) {
    this[_position] = 0;
    this[buffer$] = null;
    this.buffer = new typed_buffer.Uint8Buffer.new();
    this.buffer.addAll(data);
  }).prototype = mqtt_client.MqttByteBuffer.prototype;
  dart.addTypeTests(mqtt_client.MqttByteBuffer);
  dart.addTypeCaches(mqtt_client.MqttByteBuffer);
  dart.setMethodSignature(mqtt_client.MqttByteBuffer, () => ({
    __proto__: dart.getMethods(mqtt_client.MqttByteBuffer.__proto__),
    reset: dart.fnType(dart.void, []),
    addAll: dart.fnType(dart.void, [dart.legacy(core.List$(dart.legacy(core.int)))]),
    shrink: dart.fnType(dart.void, []),
    isMessageAvailable: dart.fnType(dart.legacy(core.bool), []),
    readByte: dart.fnType(dart.legacy(core.int), []),
    readShort: dart.fnType(dart.legacy(core.int), []),
    read: dart.fnType(dart.legacy(typed_buffer.Uint8Buffer), [dart.legacy(core.int)]),
    writeByte: dart.fnType(dart.void, [dart.legacy(core.int)]),
    writeShort: dart.fnType(dart.void, [dart.legacy(core.int)]),
    write: dart.fnType(dart.void, [dart.legacy(typed_buffer.Uint8Buffer)]),
    seek: dart.fnType(dart.void, [dart.legacy(core.int)]),
    writeMqttStringM: dart.fnType(dart.void, [dart.legacy(core.String)]),
    readMqttStringM: dart.fnType(dart.legacy(core.String), [])
  }));
  dart.setGetterSignature(mqtt_client.MqttByteBuffer, () => ({
    __proto__: dart.getGetters(mqtt_client.MqttByteBuffer.__proto__),
    position: dart.legacy(core.int),
    length: dart.legacy(core.int),
    availableBytes: dart.legacy(core.int)
  }));
  dart.setSetterSignature(mqtt_client.MqttByteBuffer, () => ({
    __proto__: dart.getSetters(mqtt_client.MqttByteBuffer.__proto__),
    skipBytes: dart.legacy(core.int)
  }));
  dart.setLibraryUri(mqtt_client.MqttByteBuffer, I[0]);
  dart.setFieldSignature(mqtt_client.MqttByteBuffer, () => ({
    __proto__: dart.getFields(mqtt_client.MqttByteBuffer.__proto__),
    [_position]: dart.fieldType(dart.legacy(core.int)),
    buffer: dart.fieldType(dart.legacy(typed_buffer.Uint8Buffer))
  }));
  mqtt_client.MqttUtilities = class MqttUtilities extends core.Object {
    static asyncSleep(seconds) {
      return T.FutureOfvoid().delayed(new core.Duration.new({seconds: seconds}));
    }
    static syncSleep(seconds) {
      io.sleep(new core.Duration.new({seconds: seconds}));
    }
    static getQosLevel(value) {
      switch (value) {
        case 0:
        {
          return mqtt_client.MqttQos.atMostOnce;
        }
        case 1:
        {
          return mqtt_client.MqttQos.atLeastOnce;
        }
        case 2:
        {
          return mqtt_client.MqttQos.exactlyOnce;
        }
        case 128:
        {
          return mqtt_client.MqttQos.failure;
        }
        default:
        {
          return mqtt_client.MqttQos.reserved1;
        }
      }
    }
  };
  (mqtt_client.MqttUtilities.new = function() {
    ;
  }).prototype = mqtt_client.MqttUtilities.prototype;
  dart.addTypeTests(mqtt_client.MqttUtilities);
  dart.addTypeCaches(mqtt_client.MqttUtilities);
  dart.setLibraryUri(mqtt_client.MqttUtilities, I[0]);
  var _completer = dart.privateName(mqtt_client, "_completer");
  var _timer = dart.privateName(mqtt_client, "_timer");
  var _running = dart.privateName(mqtt_client, "_running");
  var _timeout$ = dart.privateName(mqtt_client, "_timeout");
  var _timerCallback = dart.privateName(mqtt_client, "_timerCallback");
  mqtt_client.MqttCancellableAsyncSleep = class MqttCancellableAsyncSleep extends core.Object {
    get timeout() {
      return this[_timeout$];
    }
    get isRunning() {
      return this[_running];
    }
    sleep() {
      if (!dart.test(this[_running])) {
        this[_timer] = async.Timer.new(new core.Duration.new({milliseconds: this[_timeout$]}), dart.bind(this, _timerCallback));
        this[_running] = true;
      }
      return this[_completer].future;
    }
    cancel() {
      if (dart.test(this[_running])) {
        this[_timer].cancel();
        this[_running] = false;
        this[_completer].complete();
      }
    }
    [_timerCallback]() {
      this[_running] = false;
      this[_completer].complete();
    }
  };
  (mqtt_client.MqttCancellableAsyncSleep.new = function(_timeout) {
    this[_completer] = T.CompleterOfvoid().new();
    this[_timer] = null;
    this[_running] = false;
    this[_timeout$] = _timeout;
    ;
  }).prototype = mqtt_client.MqttCancellableAsyncSleep.prototype;
  dart.addTypeTests(mqtt_client.MqttCancellableAsyncSleep);
  dart.addTypeCaches(mqtt_client.MqttCancellableAsyncSleep);
  dart.setMethodSignature(mqtt_client.MqttCancellableAsyncSleep, () => ({
    __proto__: dart.getMethods(mqtt_client.MqttCancellableAsyncSleep.__proto__),
    sleep: dart.fnType(dart.legacy(async.Future$(dart.void)), []),
    cancel: dart.fnType(dart.void, []),
    [_timerCallback]: dart.fnType(dart.void, [])
  }));
  dart.setGetterSignature(mqtt_client.MqttCancellableAsyncSleep, () => ({
    __proto__: dart.getGetters(mqtt_client.MqttCancellableAsyncSleep.__proto__),
    timeout: dart.legacy(core.int),
    isRunning: dart.legacy(core.bool)
  }));
  dart.setLibraryUri(mqtt_client.MqttCancellableAsyncSleep, I[0]);
  dart.setFieldSignature(mqtt_client.MqttCancellableAsyncSleep, () => ({
    __proto__: dart.getFields(mqtt_client.MqttCancellableAsyncSleep.__proto__),
    [_timeout$]: dart.fieldType(dart.legacy(core.int)),
    [_completer]: dart.fieldType(dart.legacy(async.Completer$(dart.void))),
    [_timer]: dart.fieldType(dart.legacy(async.Timer)),
    [_running]: dart.fieldType(dart.legacy(core.bool))
  }));
  mqtt_client.MqttLogger = class MqttLogger extends core.Object {
    static log(message) {
      if (dart.test(mqtt_client.MqttLogger.loggingOn)) {
        let now = new core.DateTime.now();
        core.print(dart.str(now) + " -- " + dart.str(message));
      }
    }
  };
  (mqtt_client.MqttLogger.new = function() {
    ;
  }).prototype = mqtt_client.MqttLogger.prototype;
  dart.addTypeTests(mqtt_client.MqttLogger);
  dart.addTypeCaches(mqtt_client.MqttLogger);
  dart.setLibraryUri(mqtt_client.MqttLogger, I[0]);
  dart.defineLazy(mqtt_client.MqttLogger, {
    /*mqtt_client.MqttLogger.loggingOn*/get loggingOn() {
      return false;
    },
    set loggingOn(_) {}
  }, true);
  var _payload = dart.privateName(mqtt_client, "_payload");
  mqtt_client.MqttClientPayloadBuilder = class MqttClientPayloadBuilder extends core.Object {
    get payload() {
      return this[_payload];
    }
    get length() {
      return this[_payload].length;
    }
    addBuffer(buffer) {
      this[_payload].addAll(buffer);
    }
    addByte(val) {
      this[_payload].add(val);
    }
    addBool(opts) {
      let val = opts && 'val' in opts ? opts.val : null;
      dart.test(val) ? this.addByte(1) : this.addByte(0);
    }
    addHalf(val) {
      let tmp = _native_typed_data.NativeUint16List.fromList(T.JSArrayOfintL().of([val]));
      this[_payload].addAll(tmp[$buffer][$asInt8List]());
    }
    addWord(val) {
      let tmp = _native_typed_data.NativeUint32List.fromList(T.JSArrayOfintL().of([val]));
      this[_payload].addAll(tmp[$buffer][$asInt8List]());
    }
    addInt(val) {
      let tmp = typed_data.Uint64List.fromList(T.JSArrayOfintL().of([val]));
      this[_payload].addAll(tmp[$buffer][$asInt8List]());
    }
    addString(val) {
      this.addUTF16String(val);
    }
    addUTF16String(val) {
      for (let codeunit of val[$codeUnits]) {
        if (dart.notNull(codeunit) <= 255 && dart.notNull(codeunit) >= 0) {
          this[_payload].add(codeunit);
        } else {
          this.addHalf(codeunit);
        }
      }
    }
    addUTF8String(val) {
      let encoder = C[24] || CT.C24;
      this[_payload].addAll(encoder.convert(val));
    }
    addHalfDouble(val) {
      let tmp = _native_typed_data.NativeFloat32List.fromList(T.JSArrayOfdoubleL().of([val]));
      this[_payload].addAll(tmp[$buffer][$asInt8List]());
    }
    addDouble(val) {
      let tmp = _native_typed_data.NativeFloat64List.fromList(T.JSArrayOfdoubleL().of([val]));
      this[_payload].addAll(tmp[$buffer][$asInt8List]());
    }
  };
  (mqtt_client.MqttClientPayloadBuilder.new = function() {
    this[_payload] = null;
    this[_payload] = new typed_buffer.Uint8Buffer.new();
  }).prototype = mqtt_client.MqttClientPayloadBuilder.prototype;
  dart.addTypeTests(mqtt_client.MqttClientPayloadBuilder);
  dart.addTypeCaches(mqtt_client.MqttClientPayloadBuilder);
  dart.setMethodSignature(mqtt_client.MqttClientPayloadBuilder, () => ({
    __proto__: dart.getMethods(mqtt_client.MqttClientPayloadBuilder.__proto__),
    addBuffer: dart.fnType(dart.void, [dart.legacy(typed_buffer.Uint8Buffer)]),
    addByte: dart.fnType(dart.void, [dart.legacy(core.int)]),
    addBool: dart.fnType(dart.void, [], {val: dart.legacy(core.bool)}, {}),
    addHalf: dart.fnType(dart.void, [dart.legacy(core.int)]),
    addWord: dart.fnType(dart.void, [dart.legacy(core.int)]),
    addInt: dart.fnType(dart.void, [dart.legacy(core.int)]),
    addString: dart.fnType(dart.void, [dart.legacy(core.String)]),
    addUTF16String: dart.fnType(dart.void, [dart.legacy(core.String)]),
    addUTF8String: dart.fnType(dart.void, [dart.legacy(core.String)]),
    addHalfDouble: dart.fnType(dart.void, [dart.legacy(core.double)]),
    addDouble: dart.fnType(dart.void, [dart.legacy(core.double)])
  }));
  dart.setGetterSignature(mqtt_client.MqttClientPayloadBuilder, () => ({
    __proto__: dart.getGetters(mqtt_client.MqttClientPayloadBuilder.__proto__),
    payload: dart.legacy(typed_buffer.Uint8Buffer),
    length: dart.legacy(core.int)
  }));
  dart.setLibraryUri(mqtt_client.MqttClientPayloadBuilder, I[0]);
  dart.setFieldSignature(mqtt_client.MqttClientPayloadBuilder, () => ({
    __proto__: dart.getFields(mqtt_client.MqttClientPayloadBuilder.__proto__),
    [_payload]: dart.fieldType(dart.legacy(typed_buffer.Uint8Buffer))
  }));
  var messageType = dart.privateName(mqtt_client, "MqttHeader.messageType");
  var duplicate = dart.privateName(mqtt_client, "MqttHeader.duplicate");
  var qos$ = dart.privateName(mqtt_client, "MqttHeader.qos");
  var retain = dart.privateName(mqtt_client, "MqttHeader.retain");
  var _messageSize = dart.privateName(mqtt_client, "_messageSize");
  mqtt_client.MqttHeader = class MqttHeader extends core.Object {
    get messageType() {
      return this[messageType];
    }
    set messageType(value) {
      this[messageType] = value;
    }
    get duplicate() {
      return this[duplicate];
    }
    set duplicate(value) {
      this[duplicate] = value;
    }
    get qos() {
      return this[qos$];
    }
    set qos(value) {
      this[qos$] = value;
    }
    get retain() {
      return this[retain];
    }
    set retain(value) {
      this[retain] = value;
    }
    get messageSize() {
      return this[_messageSize];
    }
    set messageSize(value) {
      if (dart.notNull(value) < 0 || dart.notNull(value) > 268435455) {
        dart.throw(new mqtt_client.InvalidPayloadSizeException.new(value, 268435455));
      }
      this[_messageSize] = value;
    }
    writeTo(messageSize, messageStream) {
      this[_messageSize] = messageSize;
      let headerBuff = this.headerBytes();
      messageStream.write(headerBuff);
    }
    readFrom(headerStream) {
      if (dart.notNull(headerStream.length) < 2) {
        headerStream.reset();
        dart.throw(new mqtt_client.InvalidHeaderException.new("The supplied header is invalid. Header must be at least 2 bytes long."));
      }
      let firstHeaderByte = headerStream.readByte();
      this.retain = (dart.notNull(firstHeaderByte) & 1) === 1;
      this.qos = mqtt_client.MqttUtilities.getQosLevel((dart.notNull(firstHeaderByte) & 6) >> 1);
      this.duplicate = (dart.notNull(firstHeaderByte) & 8) >> 3 === 1;
      this.messageType = mqtt_client.MqttMessageType.values[$_get]((dart.notNull(firstHeaderByte) & 240) >> 4);
      try {
        this[_messageSize] = mqtt_client.MqttHeader.readRemainingLength(headerStream);
      } catch (e) {
        let ex = dart.getThrown(e);
        if (T.ExceptionL().is(ex)) {
          dart.throw(new mqtt_client.InvalidHeaderException.new("The header being processed contained an invalid size byte pattern. Message size must take a most 4 bytes, and the last byte must have bit 8 set to 0."));
        } else if (T.ErrorL().is(ex)) {
          dart.throw(new mqtt_client.InvalidHeaderException.new("The header being processed contained an invalid size byte pattern. Message size must take a most 4 bytes, and the last byte must have bit 8 set to 0."));
        } else
          throw e;
      }
    }
    headerBytes() {
      let headerBytes = new typed_buffer.Uint8Buffer.new();
      let messageTypeLength = dart.notNull(this.messageType.index) << 4 >>> 0;
      let duplicateLength = (dart.test(this.duplicate) ? 1 : 0) << 3 >>> 0;
      let qosLength = dart.notNull(this.qos.index) << 1 >>> 0;
      let retainLength = dart.test(this.retain) ? 1 : 0;
      let firstByte = messageTypeLength + duplicateLength + qosLength + retainLength;
      headerBytes.add(firstByte);
      headerBytes.addAll(this.getRemainingLengthBytes());
      return headerBytes;
    }
    static readRemainingLength(headerStream) {
      let lengthBytes = mqtt_client.MqttHeader.readLengthBytes(headerStream);
      return mqtt_client.MqttHeader.calculateLength(lengthBytes);
    }
    static readLengthBytes(headerStream) {
      let lengthBytes = new typed_buffer.Uint8Buffer.new();
      let sizeByte = null;
      let byteCount = 0;
      do {
        sizeByte = headerStream.readByte();
        lengthBytes.add(sizeByte);
      } while ((byteCount = byteCount + 1) <= 4 && (dart.notNull(sizeByte) & 128) === 128);
      return lengthBytes;
    }
    getRemainingLengthBytes() {
      let lengthBytes = new typed_buffer.Uint8Buffer.new();
      let payloadCalc = this[_messageSize];
      do {
        let nextByteValue = payloadCalc[$modulo](128);
        payloadCalc = (dart.notNull(payloadCalc) / 128)[$truncate]();
        if (dart.notNull(payloadCalc) > 0) {
          nextByteValue = (nextByteValue | 128) >>> 0;
        }
        lengthBytes.add(nextByteValue);
      } while (dart.notNull(payloadCalc) > 0);
      return lengthBytes;
    }
    static calculateLength(lengthBytes) {
      let remainingLength = 0;
      let multiplier = 1;
      for (let currentByte of lengthBytes) {
        remainingLength = remainingLength + (dart.notNull(currentByte) & 127) * multiplier;
        multiplier = multiplier * 128;
      }
      return remainingLength;
    }
    isDuplicate() {
      this.duplicate = true;
      return this;
    }
    withQos(qos) {
      this.qos = qos;
      return this;
    }
    asType(messageType) {
      this.messageType = messageType;
      return this;
    }
    shouldBeRetained() {
      this.retain = true;
      return this;
    }
    toString() {
      return "Header: MessageType = " + dart.str(this.messageType) + ", Duplicate = " + dart.str(this.duplicate) + ", Retain = " + dart.str(this.retain) + ", Qos = " + dart.str(this.qos) + ", Size = " + dart.str(this[_messageSize]);
    }
  };
  (mqtt_client.MqttHeader.new = function() {
    this[_messageSize] = 0;
    this[messageType] = null;
    this[duplicate] = false;
    this[qos$] = mqtt_client.MqttQos.atMostOnce;
    this[retain] = false;
    ;
  }).prototype = mqtt_client.MqttHeader.prototype;
  (mqtt_client.MqttHeader.fromByteBuffer = function(headerStream) {
    this[_messageSize] = 0;
    this[messageType] = null;
    this[duplicate] = false;
    this[qos$] = mqtt_client.MqttQos.atMostOnce;
    this[retain] = false;
    this.readFrom(headerStream);
  }).prototype = mqtt_client.MqttHeader.prototype;
  dart.addTypeTests(mqtt_client.MqttHeader);
  dart.addTypeCaches(mqtt_client.MqttHeader);
  dart.setMethodSignature(mqtt_client.MqttHeader, () => ({
    __proto__: dart.getMethods(mqtt_client.MqttHeader.__proto__),
    writeTo: dart.fnType(dart.void, [dart.legacy(core.int), dart.legacy(mqtt_client.MqttByteBuffer)]),
    readFrom: dart.fnType(dart.void, [dart.legacy(mqtt_client.MqttByteBuffer)]),
    headerBytes: dart.fnType(dart.legacy(typed_buffer.Uint8Buffer), []),
    getRemainingLengthBytes: dart.fnType(dart.legacy(typed_buffer.Uint8Buffer), []),
    isDuplicate: dart.fnType(dart.legacy(mqtt_client.MqttHeader), []),
    withQos: dart.fnType(dart.legacy(mqtt_client.MqttHeader), [dart.legacy(mqtt_client.MqttQos)]),
    asType: dart.fnType(dart.legacy(mqtt_client.MqttHeader), [dart.legacy(mqtt_client.MqttMessageType)]),
    shouldBeRetained: dart.fnType(dart.legacy(mqtt_client.MqttHeader), []),
    toString: dart.fnType(dart.legacy(core.String), []),
    [$toString]: dart.fnType(dart.legacy(core.String), [])
  }));
  dart.setGetterSignature(mqtt_client.MqttHeader, () => ({
    __proto__: dart.getGetters(mqtt_client.MqttHeader.__proto__),
    messageSize: dart.legacy(core.int)
  }));
  dart.setSetterSignature(mqtt_client.MqttHeader, () => ({
    __proto__: dart.getSetters(mqtt_client.MqttHeader.__proto__),
    messageSize: dart.legacy(core.int)
  }));
  dart.setLibraryUri(mqtt_client.MqttHeader, I[0]);
  dart.setFieldSignature(mqtt_client.MqttHeader, () => ({
    __proto__: dart.getFields(mqtt_client.MqttHeader.__proto__),
    [_messageSize]: dart.fieldType(dart.legacy(core.int)),
    messageType: dart.fieldType(dart.legacy(mqtt_client.MqttMessageType)),
    duplicate: dart.fieldType(dart.legacy(core.bool)),
    qos: dart.fieldType(dart.legacy(mqtt_client.MqttQos)),
    retain: dart.fieldType(dart.legacy(core.bool))
  }));
  dart.defineExtensionMethods(mqtt_client.MqttHeader, ['toString']);
  mqtt_client.MqttReadWriteFlags = class MqttReadWriteFlags extends core.Object {
    toString() {
      return this[_name$];
    }
  };
  (mqtt_client.MqttReadWriteFlags.new = function(index, _name) {
    this.index = index;
    this[_name$] = _name;
    ;
  }).prototype = mqtt_client.MqttReadWriteFlags.prototype;
  dart.addTypeTests(mqtt_client.MqttReadWriteFlags);
  dart.addTypeCaches(mqtt_client.MqttReadWriteFlags);
  dart.setMethodSignature(mqtt_client.MqttReadWriteFlags, () => ({
    __proto__: dart.getMethods(mqtt_client.MqttReadWriteFlags.__proto__),
    toString: dart.fnType(dart.legacy(core.String), []),
    [$toString]: dart.fnType(dart.legacy(core.String), [])
  }));
  dart.setLibraryUri(mqtt_client.MqttReadWriteFlags, I[0]);
  dart.setFieldSignature(mqtt_client.MqttReadWriteFlags, () => ({
    __proto__: dart.getFields(mqtt_client.MqttReadWriteFlags.__proto__),
    index: dart.finalFieldType(dart.legacy(core.int)),
    [_name$]: dart.finalFieldType(dart.legacy(core.String))
  }));
  dart.defineExtensionMethods(mqtt_client.MqttReadWriteFlags, ['toString']);
  mqtt_client.MqttReadWriteFlags.none = C[25] || CT.C25;
  mqtt_client.MqttReadWriteFlags.protocolName = C[26] || CT.C26;
  mqtt_client.MqttReadWriteFlags.protocolVersion = C[27] || CT.C27;
  mqtt_client.MqttReadWriteFlags.connectFlags = C[28] || CT.C28;
  mqtt_client.MqttReadWriteFlags.keepAlive = C[29] || CT.C29;
  mqtt_client.MqttReadWriteFlags.returnCode = C[30] || CT.C30;
  mqtt_client.MqttReadWriteFlags.topicName = C[31] || CT.C31;
  mqtt_client.MqttReadWriteFlags.messageIdentifier = C[32] || CT.C32;
  mqtt_client.MqttReadWriteFlags.values = C[33] || CT.C33;
  var length = dart.privateName(mqtt_client, "MqttVariableHeader.length");
  var protocolName = dart.privateName(mqtt_client, "MqttVariableHeader.protocolName");
  var protocolVersion = dart.privateName(mqtt_client, "MqttVariableHeader.protocolVersion");
  var connectFlags = dart.privateName(mqtt_client, "MqttVariableHeader.connectFlags");
  var keepAlive = dart.privateName(mqtt_client, "MqttVariableHeader.keepAlive");
  var returnCode$ = dart.privateName(mqtt_client, "MqttVariableHeader.returnCode");
  var topicName = dart.privateName(mqtt_client, "MqttVariableHeader.topicName");
  var messageIdentifier$ = dart.privateName(mqtt_client, "MqttVariableHeader.messageIdentifier");
  mqtt_client.MqttVariableHeader = class MqttVariableHeader extends core.Object {
    get length() {
      return this[length];
    }
    set length(value) {
      this[length] = value;
    }
    get protocolName() {
      return this[protocolName];
    }
    set protocolName(value) {
      this[protocolName] = value;
    }
    get protocolVersion() {
      return this[protocolVersion];
    }
    set protocolVersion(value) {
      this[protocolVersion] = value;
    }
    get connectFlags() {
      return this[connectFlags];
    }
    set connectFlags(value) {
      this[connectFlags] = value;
    }
    get keepAlive() {
      return this[keepAlive];
    }
    set keepAlive(value) {
      this[keepAlive] = value;
    }
    get returnCode() {
      return this[returnCode$];
    }
    set returnCode(value) {
      this[returnCode$] = value;
    }
    get topicName() {
      return this[topicName];
    }
    set topicName(value) {
      this[topicName] = value;
    }
    get messageIdentifier() {
      return this[messageIdentifier$];
    }
    set messageIdentifier(value) {
      this[messageIdentifier$] = value;
    }
    readFrom(variableHeaderStream) {
      this.readProtocolName(variableHeaderStream);
      this.readProtocolVersion(variableHeaderStream);
      this.readConnectFlags(variableHeaderStream);
      this.readKeepAlive(variableHeaderStream);
      this.readReturnCode(variableHeaderStream);
      this.readTopicName(variableHeaderStream);
      this.readMessageIdentifier(variableHeaderStream);
    }
    writeTo(variableHeaderStream) {
      this.writeProtocolName(variableHeaderStream);
      this.writeProtocolVersion(variableHeaderStream);
      this.writeConnectFlags(variableHeaderStream);
      this.writeKeepAlive(variableHeaderStream);
      this.writeReturnCode(variableHeaderStream);
      this.writeTopicName(variableHeaderStream);
      this.writeMessageIdentifier(variableHeaderStream);
    }
    getWriteLength() {
      let headerLength = 0;
      let enc = new mqtt_client.MqttEncoding.new();
      headerLength = headerLength + dart.notNull(enc.getByteCount(this.protocolName));
      headerLength = headerLength + 1;
      headerLength = headerLength + dart.notNull(mqtt_client.MqttConnectFlags.getWriteLength());
      headerLength = headerLength + 2;
      headerLength = headerLength + 1;
      headerLength = headerLength + dart.notNull(enc.getByteCount(dart.toString(this.topicName)));
      headerLength = headerLength + 2;
      return headerLength;
    }
    writeProtocolName(stream) {
      mqtt_client.MqttByteBuffer.writeMqttString(stream, this.protocolName);
    }
    writeProtocolVersion(stream) {
      stream.writeByte(this.protocolVersion);
    }
    writeKeepAlive(stream) {
      stream.writeShort(this.keepAlive);
    }
    writeReturnCode(stream) {
      stream.writeByte(this.returnCode.index);
    }
    writeTopicName(stream) {
      mqtt_client.MqttByteBuffer.writeMqttString(stream, dart.toString(this.topicName));
    }
    writeMessageIdentifier(stream) {
      stream.writeShort(this.messageIdentifier);
    }
    writeConnectFlags(stream) {
      this.connectFlags.writeTo(stream);
    }
    readProtocolName(stream) {
      this.protocolName = mqtt_client.MqttByteBuffer.readMqttString(stream);
      this.length = dart.notNull(this.length) + (this.protocolName.length + 2);
    }
    readProtocolVersion(stream) {
      this.protocolVersion = stream.readByte();
      this.length = dart.notNull(this.length) + 1;
    }
    readKeepAlive(stream) {
      this.keepAlive = stream.readShort();
      this.length = dart.notNull(this.length) + 2;
    }
    readReturnCode(stream) {
      this.returnCode = mqtt_client.MqttConnectReturnCode.values[$_get](stream.readByte());
      this.length = dart.notNull(this.length) + 1;
    }
    readTopicName(stream) {
      this.topicName = mqtt_client.MqttByteBuffer.readMqttString(stream);
      this.length = dart.notNull(this.length) + (this.topicName.length + 2);
    }
    readMessageIdentifier(stream) {
      this.messageIdentifier = stream.readShort();
      this.length = dart.notNull(this.length) + 2;
    }
    readConnectFlags(stream) {
      this.connectFlags = new mqtt_client.MqttConnectFlags.fromByteBuffer(stream);
      this.length = dart.notNull(this.length) + 1;
    }
  };
  (mqtt_client.MqttVariableHeader.new = function() {
    this[length] = 0;
    this[protocolName] = "";
    this[protocolVersion] = 0;
    this[connectFlags] = null;
    this[keepAlive] = 0;
    this[returnCode$] = mqtt_client.MqttConnectReturnCode.brokerUnavailable;
    this[topicName] = "";
    this[messageIdentifier$] = 0;
    this.protocolName = mqtt_client.Protocol.name_;
    this.protocolVersion = mqtt_client.Protocol.version;
    this.connectFlags = new mqtt_client.MqttConnectFlags.new();
  }).prototype = mqtt_client.MqttVariableHeader.prototype;
  (mqtt_client.MqttVariableHeader.fromByteBuffer = function(headerStream) {
    this[length] = 0;
    this[protocolName] = "";
    this[protocolVersion] = 0;
    this[connectFlags] = null;
    this[keepAlive] = 0;
    this[returnCode$] = mqtt_client.MqttConnectReturnCode.brokerUnavailable;
    this[topicName] = "";
    this[messageIdentifier$] = 0;
    this.readFrom(headerStream);
  }).prototype = mqtt_client.MqttVariableHeader.prototype;
  dart.addTypeTests(mqtt_client.MqttVariableHeader);
  dart.addTypeCaches(mqtt_client.MqttVariableHeader);
  dart.setMethodSignature(mqtt_client.MqttVariableHeader, () => ({
    __proto__: dart.getMethods(mqtt_client.MqttVariableHeader.__proto__),
    readFrom: dart.fnType(dart.void, [dart.legacy(mqtt_client.MqttByteBuffer)]),
    writeTo: dart.fnType(dart.void, [dart.legacy(mqtt_client.MqttByteBuffer)]),
    getWriteLength: dart.fnType(dart.legacy(core.int), []),
    writeProtocolName: dart.fnType(dart.void, [dart.legacy(mqtt_client.MqttByteBuffer)]),
    writeProtocolVersion: dart.fnType(dart.void, [dart.legacy(mqtt_client.MqttByteBuffer)]),
    writeKeepAlive: dart.fnType(dart.void, [dart.legacy(mqtt_client.MqttByteBuffer)]),
    writeReturnCode: dart.fnType(dart.void, [dart.legacy(mqtt_client.MqttByteBuffer)]),
    writeTopicName: dart.fnType(dart.void, [dart.legacy(mqtt_client.MqttByteBuffer)]),
    writeMessageIdentifier: dart.fnType(dart.void, [dart.legacy(mqtt_client.MqttByteBuffer)]),
    writeConnectFlags: dart.fnType(dart.void, [dart.legacy(mqtt_client.MqttByteBuffer)]),
    readProtocolName: dart.fnType(dart.void, [dart.legacy(mqtt_client.MqttByteBuffer)]),
    readProtocolVersion: dart.fnType(dart.void, [dart.legacy(mqtt_client.MqttByteBuffer)]),
    readKeepAlive: dart.fnType(dart.void, [dart.legacy(mqtt_client.MqttByteBuffer)]),
    readReturnCode: dart.fnType(dart.void, [dart.legacy(mqtt_client.MqttByteBuffer)]),
    readTopicName: dart.fnType(dart.void, [dart.legacy(mqtt_client.MqttByteBuffer)]),
    readMessageIdentifier: dart.fnType(dart.void, [dart.legacy(mqtt_client.MqttByteBuffer)]),
    readConnectFlags: dart.fnType(dart.void, [dart.legacy(mqtt_client.MqttByteBuffer)])
  }));
  dart.setLibraryUri(mqtt_client.MqttVariableHeader, I[0]);
  dart.setFieldSignature(mqtt_client.MqttVariableHeader, () => ({
    __proto__: dart.getFields(mqtt_client.MqttVariableHeader.__proto__),
    length: dart.fieldType(dart.legacy(core.int)),
    protocolName: dart.fieldType(dart.legacy(core.String)),
    protocolVersion: dart.fieldType(dart.legacy(core.int)),
    connectFlags: dart.fieldType(dart.legacy(mqtt_client.MqttConnectFlags)),
    keepAlive: dart.fieldType(dart.legacy(core.int)),
    returnCode: dart.fieldType(dart.legacy(mqtt_client.MqttConnectReturnCode)),
    topicName: dart.fieldType(dart.legacy(core.String)),
    messageIdentifier: dart.fieldType(dart.legacy(core.int))
  }));
  var header$ = dart.privateName(mqtt_client, "MqttMessage.header");
  mqtt_client.MqttMessage = class MqttMessage extends core.Object {
    get header() {
      return this[header$];
    }
    set header(value) {
      this[header$] = value;
    }
    static createFrom(messageStream) {
      try {
        let header = new mqtt_client.MqttHeader.new();
        header = new mqtt_client.MqttHeader.fromByteBuffer(messageStream);
        let expectedPos = dart.notNull(messageStream.position) + dart.notNull(header.messageSize);
        if (dart.notNull(messageStream.availableBytes) < dart.notNull(header.messageSize)) {
          messageStream.reset();
          dart.throw(new mqtt_client.InvalidMessageException.new("Available bytes is less than the message size"));
        }
        let message = mqtt_client.MqttMessageFactory.getMessage(header, messageStream);
        if (dart.notNull(messageStream.position) < expectedPos) {
          messageStream.skipBytes = expectedPos - dart.notNull(messageStream.position);
        }
        return message;
      } catch (e) {
        let ex = dart.getThrown(e);
        if (T.ExceptionL().is(ex)) {
          dart.throw(new mqtt_client.InvalidMessageException.new("The data provided in the message stream was not a valid MQTT Message"));
        } else
          throw e;
      }
    }
    writeTo(messageStream) {
      this.header.writeTo(0, messageStream);
    }
    readFrom(messageStream) {
    }
    toString() {
      let sb = new core.StringBuffer.new();
      sb.write("MQTTMessage of type ");
      sb.writeln(dart.toString(this.header.messageType));
      sb.writeln(dart.toString(this.header));
      return sb.toString();
    }
  };
  (mqtt_client.MqttMessage.new = function() {
    this[header$] = null;
    ;
  }).prototype = mqtt_client.MqttMessage.prototype;
  (mqtt_client.MqttMessage.fromHeader = function(header) {
    this[header$] = null;
    header = header;
  }).prototype = mqtt_client.MqttMessage.prototype;
  dart.addTypeTests(mqtt_client.MqttMessage);
  dart.addTypeCaches(mqtt_client.MqttMessage);
  dart.setMethodSignature(mqtt_client.MqttMessage, () => ({
    __proto__: dart.getMethods(mqtt_client.MqttMessage.__proto__),
    writeTo: dart.fnType(dart.void, [dart.legacy(mqtt_client.MqttByteBuffer)]),
    readFrom: dart.fnType(dart.void, [dart.legacy(mqtt_client.MqttByteBuffer)]),
    toString: dart.fnType(dart.legacy(core.String), []),
    [$toString]: dart.fnType(dart.legacy(core.String), [])
  }));
  dart.setLibraryUri(mqtt_client.MqttMessage, I[0]);
  dart.setFieldSignature(mqtt_client.MqttMessage, () => ({
    __proto__: dart.getFields(mqtt_client.MqttMessage.__proto__),
    header: dart.fieldType(dart.legacy(mqtt_client.MqttHeader))
  }));
  dart.defineExtensionMethods(mqtt_client.MqttMessage, ['toString']);
  mqtt_client.MqttConnectReturnCode = class MqttConnectReturnCode extends core.Object {
    toString() {
      return this[_name$];
    }
  };
  (mqtt_client.MqttConnectReturnCode.new = function(index, _name) {
    this.index = index;
    this[_name$] = _name;
    ;
  }).prototype = mqtt_client.MqttConnectReturnCode.prototype;
  dart.addTypeTests(mqtt_client.MqttConnectReturnCode);
  dart.addTypeCaches(mqtt_client.MqttConnectReturnCode);
  dart.setMethodSignature(mqtt_client.MqttConnectReturnCode, () => ({
    __proto__: dart.getMethods(mqtt_client.MqttConnectReturnCode.__proto__),
    toString: dart.fnType(dart.legacy(core.String), []),
    [$toString]: dart.fnType(dart.legacy(core.String), [])
  }));
  dart.setLibraryUri(mqtt_client.MqttConnectReturnCode, I[0]);
  dart.setFieldSignature(mqtt_client.MqttConnectReturnCode, () => ({
    __proto__: dart.getFields(mqtt_client.MqttConnectReturnCode.__proto__),
    index: dart.finalFieldType(dart.legacy(core.int)),
    [_name$]: dart.finalFieldType(dart.legacy(core.String))
  }));
  dart.defineExtensionMethods(mqtt_client.MqttConnectReturnCode, ['toString']);
  mqtt_client.MqttConnectReturnCode.connectionAccepted = C[34] || CT.C34;
  mqtt_client.MqttConnectReturnCode.unacceptedProtocolVersion = C[35] || CT.C35;
  mqtt_client.MqttConnectReturnCode.identifierRejected = C[36] || CT.C36;
  mqtt_client.MqttConnectReturnCode.brokerUnavailable = C[37] || CT.C37;
  mqtt_client.MqttConnectReturnCode.badUsernameOrPassword = C[38] || CT.C38;
  mqtt_client.MqttConnectReturnCode.notAuthorized = C[39] || CT.C39;
  mqtt_client.MqttConnectReturnCode.unsolicited = C[40] || CT.C40;
  mqtt_client.MqttConnectReturnCode.solicited = C[41] || CT.C41;
  mqtt_client.MqttConnectReturnCode.noneSpecified = C[42] || CT.C42;
  mqtt_client.MqttConnectReturnCode.values = C[43] || CT.C43;
  var reserved1 = dart.privateName(mqtt_client, "MqttConnectFlags.reserved1");
  var cleanStart = dart.privateName(mqtt_client, "MqttConnectFlags.cleanStart");
  var willFlag = dart.privateName(mqtt_client, "MqttConnectFlags.willFlag");
  var willQos = dart.privateName(mqtt_client, "MqttConnectFlags.willQos");
  var willRetain = dart.privateName(mqtt_client, "MqttConnectFlags.willRetain");
  var passwordFlag = dart.privateName(mqtt_client, "MqttConnectFlags.passwordFlag");
  var usernameFlag = dart.privateName(mqtt_client, "MqttConnectFlags.usernameFlag");
  mqtt_client.MqttConnectFlags = class MqttConnectFlags extends core.Object {
    get reserved1() {
      return this[reserved1];
    }
    set reserved1(value) {
      this[reserved1] = value;
    }
    get cleanStart() {
      return this[cleanStart];
    }
    set cleanStart(value) {
      this[cleanStart] = value;
    }
    get willFlag() {
      return this[willFlag];
    }
    set willFlag(value) {
      this[willFlag] = value;
    }
    get willQos() {
      return this[willQos];
    }
    set willQos(value) {
      this[willQos] = value;
    }
    get willRetain() {
      return this[willRetain];
    }
    set willRetain(value) {
      this[willRetain] = value;
    }
    get passwordFlag() {
      return this[passwordFlag];
    }
    set passwordFlag(value) {
      this[passwordFlag] = value;
    }
    get usernameFlag() {
      return this[usernameFlag];
    }
    set usernameFlag(value) {
      this[usernameFlag] = value;
    }
    connectFlagByte() {
      return ((dart.test(this.reserved1) ? 1 : 0) | (dart.test(this.cleanStart) ? 1 : 0) << 1 >>> 0 | (dart.test(this.willFlag) ? 1 : 0) << 2 >>> 0 | dart.notNull(this.willQos.index) << 3 >>> 0 | (dart.test(this.willRetain) ? 1 : 0) << 5 >>> 0 | (dart.test(this.passwordFlag) ? 1 : 0) << 6 >>> 0 | (dart.test(this.usernameFlag) ? 1 : 0) << 7 >>> 0) >>> 0;
    }
    writeTo(connectFlagsStream) {
      connectFlagsStream.writeByte(this.connectFlagByte());
    }
    readFrom(stream) {
      let connectFlagsByte = stream.readByte();
      this.reserved1 = (dart.notNull(connectFlagsByte) & 1) === 1;
      this.cleanStart = (dart.notNull(connectFlagsByte) & 2) === 2;
      this.willFlag = (dart.notNull(connectFlagsByte) & 4) === 4;
      this.willQos = mqtt_client.MqttUtilities.getQosLevel(dart.notNull(connectFlagsByte) >> 3 & 3);
      this.willRetain = (dart.notNull(connectFlagsByte) & 32) === 32;
      this.passwordFlag = (dart.notNull(connectFlagsByte) & 64) === 64;
      this.usernameFlag = (dart.notNull(connectFlagsByte) & 128) === 128;
    }
    static getWriteLength() {
      return 1;
    }
    toString() {
      return "Connect Flags: Reserved1=" + dart.str(this.reserved1) + ", CleanStart=" + dart.str(this.cleanStart) + ", WillFlag=" + dart.str(this.willFlag) + ", WillQos=" + dart.str(this.willQos) + ", WillRetain=" + dart.str(this.willRetain) + ", PasswordFlag=" + dart.str(this.passwordFlag) + ", UserNameFlag=" + dart.str(this.usernameFlag);
    }
  };
  (mqtt_client.MqttConnectFlags.new = function() {
    this[reserved1] = false;
    this[cleanStart] = false;
    this[willFlag] = false;
    this[willQos] = mqtt_client.MqttQos.atMostOnce;
    this[willRetain] = false;
    this[passwordFlag] = false;
    this[usernameFlag] = false;
    ;
  }).prototype = mqtt_client.MqttConnectFlags.prototype;
  (mqtt_client.MqttConnectFlags.fromByteBuffer = function(connectFlagsStream) {
    this[reserved1] = false;
    this[cleanStart] = false;
    this[willFlag] = false;
    this[willQos] = mqtt_client.MqttQos.atMostOnce;
    this[willRetain] = false;
    this[passwordFlag] = false;
    this[usernameFlag] = false;
    this.readFrom(connectFlagsStream);
  }).prototype = mqtt_client.MqttConnectFlags.prototype;
  dart.addTypeTests(mqtt_client.MqttConnectFlags);
  dart.addTypeCaches(mqtt_client.MqttConnectFlags);
  dart.setMethodSignature(mqtt_client.MqttConnectFlags, () => ({
    __proto__: dart.getMethods(mqtt_client.MqttConnectFlags.__proto__),
    connectFlagByte: dart.fnType(dart.legacy(core.int), []),
    writeTo: dart.fnType(dart.void, [dart.legacy(mqtt_client.MqttByteBuffer)]),
    readFrom: dart.fnType(dart.void, [dart.legacy(mqtt_client.MqttByteBuffer)]),
    toString: dart.fnType(dart.legacy(core.String), []),
    [$toString]: dart.fnType(dart.legacy(core.String), [])
  }));
  dart.setLibraryUri(mqtt_client.MqttConnectFlags, I[0]);
  dart.setFieldSignature(mqtt_client.MqttConnectFlags, () => ({
    __proto__: dart.getFields(mqtt_client.MqttConnectFlags.__proto__),
    reserved1: dart.fieldType(dart.legacy(core.bool)),
    cleanStart: dart.fieldType(dart.legacy(core.bool)),
    willFlag: dart.fieldType(dart.legacy(core.bool)),
    willQos: dart.fieldType(dart.legacy(mqtt_client.MqttQos)),
    willRetain: dart.fieldType(dart.legacy(core.bool)),
    passwordFlag: dart.fieldType(dart.legacy(core.bool)),
    usernameFlag: dart.fieldType(dart.legacy(core.bool))
  }));
  dart.defineExtensionMethods(mqtt_client.MqttConnectFlags, ['toString']);
  var variableHeader$ = dart.privateName(mqtt_client, "MqttConnectPayload.variableHeader");
  var willTopic = dart.privateName(mqtt_client, "MqttConnectPayload.willTopic");
  var willMessage = dart.privateName(mqtt_client, "MqttConnectPayload.willMessage");
  var _clientIdentifier = dart.privateName(mqtt_client, "_clientIdentifier");
  var _username = dart.privateName(mqtt_client, "_username");
  var _password = dart.privateName(mqtt_client, "_password");
  mqtt_client.MqttPayload = class MqttPayload extends core.Object {};
  (mqtt_client.MqttPayload.new = function() {
    ;
  }).prototype = mqtt_client.MqttPayload.prototype;
  (mqtt_client.MqttPayload.fromMqttByteBuffer = function(payloadStream) {
    this.readFrom(payloadStream);
  }).prototype = mqtt_client.MqttPayload.prototype;
  dart.addTypeTests(mqtt_client.MqttPayload);
  dart.addTypeCaches(mqtt_client.MqttPayload);
  dart.setLibraryUri(mqtt_client.MqttPayload, I[0]);
  mqtt_client.MqttConnectPayload = class MqttConnectPayload extends mqtt_client.MqttPayload {
    get variableHeader() {
      return this[variableHeader$];
    }
    set variableHeader(value) {
      this[variableHeader$] = value;
    }
    get willTopic() {
      return this[willTopic];
    }
    set willTopic(value) {
      this[willTopic] = value;
    }
    get willMessage() {
      return this[willMessage];
    }
    set willMessage(value) {
      this[willMessage] = value;
    }
    get clientIdentifier() {
      return this[_clientIdentifier];
    }
    set clientIdentifier(id) {
      if (id.length > 1024) {
        dart.throw(new mqtt_client.ClientIdentifierException.new(id));
      }
      if (id.length > 23) {
        mqtt_client.MqttLogger.log("MqttConnectPayload::Client id exceeds spec value of " + dart.str(23));
      }
      this[_clientIdentifier] = id;
    }
    get username() {
      return this[_username];
    }
    set username(name) {
      return this[_username] = name != null ? name[$trim]() : name;
    }
    get password() {
      return this[_password];
    }
    set password(pwd) {
      return this[_password] = pwd != null ? pwd[$trim]() : pwd;
    }
    readFrom(payloadStream) {
      this.clientIdentifier = payloadStream.readMqttStringM();
      if (dart.test(this.variableHeader.connectFlags.willFlag)) {
        this.willTopic = payloadStream.readMqttStringM();
        this.willMessage = payloadStream.readMqttStringM();
      }
      if (dart.test(this.variableHeader.connectFlags.usernameFlag)) {
        this.username = payloadStream.readMqttStringM();
      }
      if (dart.test(this.variableHeader.connectFlags.passwordFlag)) {
        this.password = payloadStream.readMqttStringM();
      }
    }
    writeTo(payloadStream) {
      payloadStream.writeMqttStringM(this.clientIdentifier);
      if (dart.test(this.variableHeader.connectFlags.willFlag)) {
        payloadStream.writeMqttStringM(this.willTopic);
        payloadStream.writeMqttStringM(this.willMessage);
      }
      if (dart.test(this.variableHeader.connectFlags.usernameFlag)) {
        payloadStream.writeMqttStringM(this.username);
      }
      if (dart.test(this.variableHeader.connectFlags.passwordFlag)) {
        payloadStream.writeMqttStringM(this.password);
      }
    }
    getWriteLength() {
      let length = 0;
      let enc = new mqtt_client.MqttEncoding.new();
      length = length + dart.notNull(enc.getByteCount(this.clientIdentifier));
      if (dart.test(this.variableHeader.connectFlags.willFlag)) {
        length = length + dart.notNull(enc.getByteCount(this.willTopic));
        length = length + dart.notNull(enc.getByteCount(this.willMessage));
      }
      if (dart.test(this.variableHeader.connectFlags.usernameFlag)) {
        length = length + dart.notNull(enc.getByteCount(this.username));
      }
      if (dart.test(this.variableHeader.connectFlags.passwordFlag)) {
        length = length + dart.notNull(enc.getByteCount(this.password));
      }
      return length;
    }
  };
  (mqtt_client.MqttConnectPayload.new = function(variableHeader) {
    this[_clientIdentifier] = "";
    this[variableHeader$] = new mqtt_client.MqttConnectVariableHeader.new();
    this[_username] = null;
    this[_password] = null;
    this[willTopic] = null;
    this[willMessage] = null;
    this[variableHeader$] = variableHeader;
    mqtt_client.MqttConnectPayload.__proto__.new.call(this);
    ;
  }).prototype = mqtt_client.MqttConnectPayload.prototype;
  (mqtt_client.MqttConnectPayload.fromByteBuffer = function(variableHeader, payloadStream) {
    this[_clientIdentifier] = "";
    this[variableHeader$] = new mqtt_client.MqttConnectVariableHeader.new();
    this[_username] = null;
    this[_password] = null;
    this[willTopic] = null;
    this[willMessage] = null;
    this[variableHeader$] = variableHeader;
    mqtt_client.MqttConnectPayload.__proto__.new.call(this);
    this.readFrom(payloadStream);
  }).prototype = mqtt_client.MqttConnectPayload.prototype;
  dart.addTypeTests(mqtt_client.MqttConnectPayload);
  dart.addTypeCaches(mqtt_client.MqttConnectPayload);
  dart.setMethodSignature(mqtt_client.MqttConnectPayload, () => ({
    __proto__: dart.getMethods(mqtt_client.MqttConnectPayload.__proto__),
    readFrom: dart.fnType(dart.void, [dart.legacy(mqtt_client.MqttByteBuffer)]),
    writeTo: dart.fnType(dart.void, [dart.legacy(mqtt_client.MqttByteBuffer)]),
    getWriteLength: dart.fnType(dart.legacy(core.int), [])
  }));
  dart.setGetterSignature(mqtt_client.MqttConnectPayload, () => ({
    __proto__: dart.getGetters(mqtt_client.MqttConnectPayload.__proto__),
    clientIdentifier: dart.legacy(core.String),
    username: dart.legacy(core.String),
    password: dart.legacy(core.String)
  }));
  dart.setSetterSignature(mqtt_client.MqttConnectPayload, () => ({
    __proto__: dart.getSetters(mqtt_client.MqttConnectPayload.__proto__),
    clientIdentifier: dart.legacy(core.String),
    username: dart.legacy(core.String),
    password: dart.legacy(core.String)
  }));
  dart.setLibraryUri(mqtt_client.MqttConnectPayload, I[0]);
  dart.setFieldSignature(mqtt_client.MqttConnectPayload, () => ({
    __proto__: dart.getFields(mqtt_client.MqttConnectPayload.__proto__),
    [_clientIdentifier]: dart.fieldType(dart.legacy(core.String)),
    variableHeader: dart.fieldType(dart.legacy(mqtt_client.MqttConnectVariableHeader)),
    [_username]: dart.fieldType(dart.legacy(core.String)),
    [_password]: dart.fieldType(dart.legacy(core.String)),
    willTopic: dart.fieldType(dart.legacy(core.String)),
    willMessage: dart.fieldType(dart.legacy(core.String))
  }));
  mqtt_client.MqttConnectVariableHeader = class MqttConnectVariableHeader extends mqtt_client.MqttVariableHeader {
    readFrom(variableHeaderStream) {
      this.readProtocolName(variableHeaderStream);
      this.readProtocolVersion(variableHeaderStream);
      this.readConnectFlags(variableHeaderStream);
      this.readKeepAlive(variableHeaderStream);
    }
    writeTo(variableHeaderStream) {
      this.writeProtocolName(variableHeaderStream);
      this.writeProtocolVersion(variableHeaderStream);
      this.writeConnectFlags(variableHeaderStream);
      this.writeKeepAlive(variableHeaderStream);
    }
    getWriteLength() {
      let headerLength = 0;
      let enc = new mqtt_client.MqttEncoding.new();
      headerLength = headerLength + dart.notNull(enc.getByteCount(this.protocolName));
      headerLength = headerLength + 1;
      headerLength = headerLength + dart.notNull(mqtt_client.MqttConnectFlags.getWriteLength());
      headerLength = headerLength + 2;
      return headerLength;
    }
    toString() {
      return "Connect Variable Header: ProtocolName=" + dart.str(this.protocolName) + ", ProtocolVersion=" + dart.str(this.protocolVersion) + ", " + "ConnectFlags=" + dart.str(dart.toString(this.connectFlags)) + ", KeepAlive=" + dart.str(this.keepAlive);
    }
  };
  (mqtt_client.MqttConnectVariableHeader.new = function() {
    mqtt_client.MqttConnectVariableHeader.__proto__.new.call(this);
    ;
  }).prototype = mqtt_client.MqttConnectVariableHeader.prototype;
  (mqtt_client.MqttConnectVariableHeader.fromByteBuffer = function(headerStream) {
    mqtt_client.MqttConnectVariableHeader.__proto__.fromByteBuffer.call(this, headerStream);
    ;
  }).prototype = mqtt_client.MqttConnectVariableHeader.prototype;
  dart.addTypeTests(mqtt_client.MqttConnectVariableHeader);
  dart.addTypeCaches(mqtt_client.MqttConnectVariableHeader);
  dart.setMethodSignature(mqtt_client.MqttConnectVariableHeader, () => ({
    __proto__: dart.getMethods(mqtt_client.MqttConnectVariableHeader.__proto__),
    toString: dart.fnType(dart.legacy(core.String), []),
    [$toString]: dart.fnType(dart.legacy(core.String), [])
  }));
  dart.setLibraryUri(mqtt_client.MqttConnectVariableHeader, I[0]);
  dart.defineExtensionMethods(mqtt_client.MqttConnectVariableHeader, ['toString']);
  var variableHeader = dart.privateName(mqtt_client, "MqttConnectMessage.variableHeader");
  var payload = dart.privateName(mqtt_client, "MqttConnectMessage.payload");
  mqtt_client.MqttConnectMessage = class MqttConnectMessage extends mqtt_client.MqttMessage {
    get variableHeader() {
      return this[variableHeader];
    }
    set variableHeader(value) {
      this[variableHeader] = value;
    }
    get payload() {
      return this[payload];
    }
    set payload(value) {
      this[payload] = value;
    }
    withProtocolName(protocolName) {
      this.variableHeader.protocolName = protocolName;
      return this;
    }
    withProtocolVersion(protocolVersion) {
      this.variableHeader.protocolVersion = protocolVersion;
      return this;
    }
    startClean() {
      this.variableHeader.connectFlags.cleanStart = true;
      return this;
    }
    keepAliveFor(keepAliveSeconds) {
      this.variableHeader.keepAlive = keepAliveSeconds;
      return this;
    }
    will() {
      this.variableHeader.connectFlags.willFlag = true;
      return this;
    }
    withWillQos(qos) {
      this.variableHeader.connectFlags.willQos = qos;
      return this;
    }
    withWillRetain() {
      this.variableHeader.connectFlags.willRetain = true;
      return this;
    }
    withClientIdentifier(clientIdentifier) {
      this.payload.clientIdentifier = clientIdentifier;
      return this;
    }
    withWillMessage(willMessage) {
      this.will();
      this.payload.willMessage = willMessage;
      return this;
    }
    withWillTopic(willTopic) {
      this.will();
      this.payload.willTopic = willTopic;
      return this;
    }
    authenticateAs(username, password) {
      if (username != null) {
        this.variableHeader.connectFlags.usernameFlag = username[$isNotEmpty];
        this.payload.username = username;
      }
      if (password != null) {
        this.variableHeader.connectFlags.passwordFlag = password[$isNotEmpty];
        this.payload.password = password;
      }
      return this;
    }
    writeTo(messageStream) {
      this.header.writeTo(dart.notNull(this.variableHeader.getWriteLength()) + dart.notNull(this.payload.getWriteLength()), messageStream);
      this.variableHeader.writeTo(messageStream);
      this.payload.writeTo(messageStream);
    }
    readFrom(messageStream) {
      this.variableHeader = new mqtt_client.MqttConnectVariableHeader.fromByteBuffer(messageStream);
      this.payload = new mqtt_client.MqttConnectPayload.fromByteBuffer(this.variableHeader, messageStream);
    }
    toString() {
      let sb = new core.StringBuffer.new();
      sb.write(super.toString());
      sb.writeln(dart.toString(this.variableHeader));
      sb.writeln(dart.toString(this.payload));
      return sb.toString();
    }
  };
  (mqtt_client.MqttConnectMessage.new = function() {
    this[variableHeader] = null;
    this[payload] = null;
    mqtt_client.MqttConnectMessage.__proto__.new.call(this);
    this.header = new mqtt_client.MqttHeader.new().asType(mqtt_client.MqttMessageType.connect);
    this.variableHeader = new mqtt_client.MqttConnectVariableHeader.new();
    this.payload = new mqtt_client.MqttConnectPayload.new(this.variableHeader);
  }).prototype = mqtt_client.MqttConnectMessage.prototype;
  (mqtt_client.MqttConnectMessage.fromByteBuffer = function(header, messageStream) {
    this[variableHeader] = null;
    this[payload] = null;
    mqtt_client.MqttConnectMessage.__proto__.new.call(this);
    this.header = header;
    this.readFrom(messageStream);
  }).prototype = mqtt_client.MqttConnectMessage.prototype;
  dart.addTypeTests(mqtt_client.MqttConnectMessage);
  dart.addTypeCaches(mqtt_client.MqttConnectMessage);
  dart.setMethodSignature(mqtt_client.MqttConnectMessage, () => ({
    __proto__: dart.getMethods(mqtt_client.MqttConnectMessage.__proto__),
    withProtocolName: dart.fnType(dart.legacy(mqtt_client.MqttConnectMessage), [dart.legacy(core.String)]),
    withProtocolVersion: dart.fnType(dart.legacy(mqtt_client.MqttConnectMessage), [dart.legacy(core.int)]),
    startClean: dart.fnType(dart.legacy(mqtt_client.MqttConnectMessage), []),
    keepAliveFor: dart.fnType(dart.legacy(mqtt_client.MqttConnectMessage), [dart.legacy(core.int)]),
    will: dart.fnType(dart.legacy(mqtt_client.MqttConnectMessage), []),
    withWillQos: dart.fnType(dart.legacy(mqtt_client.MqttConnectMessage), [dart.legacy(mqtt_client.MqttQos)]),
    withWillRetain: dart.fnType(dart.legacy(mqtt_client.MqttConnectMessage), []),
    withClientIdentifier: dart.fnType(dart.legacy(mqtt_client.MqttConnectMessage), [dart.legacy(core.String)]),
    withWillMessage: dart.fnType(dart.legacy(mqtt_client.MqttConnectMessage), [dart.legacy(core.String)]),
    withWillTopic: dart.fnType(dart.legacy(mqtt_client.MqttConnectMessage), [dart.legacy(core.String)]),
    authenticateAs: dart.fnType(dart.legacy(mqtt_client.MqttConnectMessage), [dart.legacy(core.String), dart.legacy(core.String)])
  }));
  dart.setLibraryUri(mqtt_client.MqttConnectMessage, I[0]);
  dart.setFieldSignature(mqtt_client.MqttConnectMessage, () => ({
    __proto__: dart.getFields(mqtt_client.MqttConnectMessage.__proto__),
    variableHeader: dart.fieldType(dart.legacy(mqtt_client.MqttConnectVariableHeader)),
    payload: dart.fieldType(dart.legacy(mqtt_client.MqttConnectPayload))
  }));
  dart.defineExtensionMethods(mqtt_client.MqttConnectMessage, ['toString']);
  mqtt_client.MqttConnectAckVariableHeader = class MqttConnectAckVariableHeader extends mqtt_client.MqttVariableHeader {
    writeTo(variableHeaderStream) {
      variableHeaderStream.writeByte(0);
      this.writeReturnCode(variableHeaderStream);
    }
    readFrom(variableHeaderStream) {
      variableHeaderStream.readByte();
      this.readReturnCode(variableHeaderStream);
    }
    getWriteLength() {
      return 2;
    }
    toString() {
      return "Connect Variable Header: TopicNameCompressionResponse={0}, ReturnCode={" + dart.str(this.returnCode) + "}";
    }
  };
  (mqtt_client.MqttConnectAckVariableHeader.new = function() {
    mqtt_client.MqttConnectAckVariableHeader.__proto__.new.call(this);
    ;
  }).prototype = mqtt_client.MqttConnectAckVariableHeader.prototype;
  (mqtt_client.MqttConnectAckVariableHeader.fromByteBuffer = function(headerStream) {
    mqtt_client.MqttConnectAckVariableHeader.__proto__.fromByteBuffer.call(this, headerStream);
    ;
  }).prototype = mqtt_client.MqttConnectAckVariableHeader.prototype;
  dart.addTypeTests(mqtt_client.MqttConnectAckVariableHeader);
  dart.addTypeCaches(mqtt_client.MqttConnectAckVariableHeader);
  dart.setMethodSignature(mqtt_client.MqttConnectAckVariableHeader, () => ({
    __proto__: dart.getMethods(mqtt_client.MqttConnectAckVariableHeader.__proto__),
    toString: dart.fnType(dart.legacy(core.String), []),
    [$toString]: dart.fnType(dart.legacy(core.String), [])
  }));
  dart.setLibraryUri(mqtt_client.MqttConnectAckVariableHeader, I[0]);
  dart.defineExtensionMethods(mqtt_client.MqttConnectAckVariableHeader, ['toString']);
  var variableHeader$0 = dart.privateName(mqtt_client, "MqttConnectAckMessage.variableHeader");
  mqtt_client.MqttConnectAckMessage = class MqttConnectAckMessage extends mqtt_client.MqttMessage {
    get variableHeader() {
      return this[variableHeader$0];
    }
    set variableHeader(value) {
      this[variableHeader$0] = value;
    }
    readFrom(messageStream) {
      super.readFrom(messageStream);
      this.variableHeader = new mqtt_client.MqttConnectAckVariableHeader.fromByteBuffer(messageStream);
    }
    writeTo(messageStream) {
      this.header.writeTo(this.variableHeader.getWriteLength(), messageStream);
      this.variableHeader.writeTo(messageStream);
    }
    withReturnCode(returnCode) {
      this.variableHeader.returnCode = returnCode;
      return this;
    }
    toString() {
      let sb = new core.StringBuffer.new();
      sb.write(super.toString());
      sb.writeln(dart.toString(this.variableHeader));
      return sb.toString();
    }
  };
  (mqtt_client.MqttConnectAckMessage.new = function() {
    this[variableHeader$0] = null;
    mqtt_client.MqttConnectAckMessage.__proto__.new.call(this);
    this.header = new mqtt_client.MqttHeader.new().asType(mqtt_client.MqttMessageType.connectAck);
    this.variableHeader = new mqtt_client.MqttConnectAckVariableHeader.new();
    this.variableHeader.returnCode = mqtt_client.MqttConnectReturnCode.connectionAccepted;
  }).prototype = mqtt_client.MqttConnectAckMessage.prototype;
  (mqtt_client.MqttConnectAckMessage.fromByteBuffer = function(header, messageStream) {
    this[variableHeader$0] = null;
    mqtt_client.MqttConnectAckMessage.__proto__.new.call(this);
    this.header = header;
    this.readFrom(messageStream);
  }).prototype = mqtt_client.MqttConnectAckMessage.prototype;
  dart.addTypeTests(mqtt_client.MqttConnectAckMessage);
  dart.addTypeCaches(mqtt_client.MqttConnectAckMessage);
  dart.setMethodSignature(mqtt_client.MqttConnectAckMessage, () => ({
    __proto__: dart.getMethods(mqtt_client.MqttConnectAckMessage.__proto__),
    withReturnCode: dart.fnType(dart.legacy(mqtt_client.MqttConnectAckMessage), [dart.legacy(mqtt_client.MqttConnectReturnCode)])
  }));
  dart.setLibraryUri(mqtt_client.MqttConnectAckMessage, I[0]);
  dart.setFieldSignature(mqtt_client.MqttConnectAckMessage, () => ({
    __proto__: dart.getFields(mqtt_client.MqttConnectAckMessage.__proto__),
    variableHeader: dart.fieldType(dart.legacy(mqtt_client.MqttConnectAckVariableHeader))
  }));
  dart.defineExtensionMethods(mqtt_client.MqttConnectAckMessage, ['toString']);
  mqtt_client.MqttDisconnectMessage = class MqttDisconnectMessage extends mqtt_client.MqttMessage {
    toString() {
      let sb = new core.StringBuffer.new();
      sb.write(super.toString());
      return sb.toString();
    }
  };
  (mqtt_client.MqttDisconnectMessage.new = function() {
    mqtt_client.MqttDisconnectMessage.__proto__.new.call(this);
    this.header = new mqtt_client.MqttHeader.new().asType(mqtt_client.MqttMessageType.disconnect);
  }).prototype = mqtt_client.MqttDisconnectMessage.prototype;
  (mqtt_client.MqttDisconnectMessage.fromHeader = function(header) {
    mqtt_client.MqttDisconnectMessage.__proto__.new.call(this);
    this.header = header;
  }).prototype = mqtt_client.MqttDisconnectMessage.prototype;
  dart.addTypeTests(mqtt_client.MqttDisconnectMessage);
  dart.addTypeCaches(mqtt_client.MqttDisconnectMessage);
  dart.setLibraryUri(mqtt_client.MqttDisconnectMessage, I[0]);
  dart.defineExtensionMethods(mqtt_client.MqttDisconnectMessage, ['toString']);
  mqtt_client.MqttPingRequestMessage = class MqttPingRequestMessage extends mqtt_client.MqttMessage {
    toString() {
      let sb = new core.StringBuffer.new();
      sb.write(super.toString());
      return sb.toString();
    }
  };
  (mqtt_client.MqttPingRequestMessage.new = function() {
    mqtt_client.MqttPingRequestMessage.__proto__.new.call(this);
    this.header = new mqtt_client.MqttHeader.new().asType(mqtt_client.MqttMessageType.pingRequest);
  }).prototype = mqtt_client.MqttPingRequestMessage.prototype;
  (mqtt_client.MqttPingRequestMessage.fromHeader = function(header) {
    mqtt_client.MqttPingRequestMessage.__proto__.new.call(this);
    this.header = header;
  }).prototype = mqtt_client.MqttPingRequestMessage.prototype;
  dart.addTypeTests(mqtt_client.MqttPingRequestMessage);
  dart.addTypeCaches(mqtt_client.MqttPingRequestMessage);
  dart.setLibraryUri(mqtt_client.MqttPingRequestMessage, I[0]);
  dart.defineExtensionMethods(mqtt_client.MqttPingRequestMessage, ['toString']);
  mqtt_client.MqttPingResponseMessage = class MqttPingResponseMessage extends mqtt_client.MqttMessage {
    toString() {
      let sb = new core.StringBuffer.new();
      sb.write(super.toString());
      return sb.toString();
    }
  };
  (mqtt_client.MqttPingResponseMessage.new = function() {
    mqtt_client.MqttPingResponseMessage.__proto__.new.call(this);
    this.header = new mqtt_client.MqttHeader.new().asType(mqtt_client.MqttMessageType.pingResponse);
  }).prototype = mqtt_client.MqttPingResponseMessage.prototype;
  (mqtt_client.MqttPingResponseMessage.fromHeader = function(header) {
    mqtt_client.MqttPingResponseMessage.__proto__.new.call(this);
    this.header = header;
  }).prototype = mqtt_client.MqttPingResponseMessage.prototype;
  dart.addTypeTests(mqtt_client.MqttPingResponseMessage);
  dart.addTypeCaches(mqtt_client.MqttPingResponseMessage);
  dart.setLibraryUri(mqtt_client.MqttPingResponseMessage, I[0]);
  dart.defineExtensionMethods(mqtt_client.MqttPingResponseMessage, ['toString']);
  var variableHeader$1 = dart.privateName(mqtt_client, "MqttPublishMessage.variableHeader");
  var payload$0 = dart.privateName(mqtt_client, "MqttPublishMessage.payload");
  mqtt_client.MqttPublishMessage = class MqttPublishMessage extends mqtt_client.MqttMessage {
    get variableHeader() {
      return this[variableHeader$1];
    }
    set variableHeader(value) {
      this[variableHeader$1] = value;
    }
    get payload() {
      return this[payload$0];
    }
    set payload(value) {
      this[payload$0] = value;
    }
    readFrom(messageStream) {
      super.readFrom(messageStream);
      this.variableHeader = new mqtt_client.MqttPublishVariableHeader.fromByteBuffer(this.header, messageStream);
      this.payload = new mqtt_client.MqttPublishPayload.fromByteBuffer(this.header, this.variableHeader, messageStream);
    }
    writeTo(messageStream) {
      let variableHeaderLength = this.variableHeader.getWriteLength();
      let payloadLength = this.payload.getWriteLength();
      this.header.writeTo(dart.notNull(variableHeaderLength) + dart.notNull(payloadLength), messageStream);
      this.variableHeader.writeTo(messageStream);
      this.payload.writeTo(messageStream);
    }
    toTopic(topicName) {
      this.variableHeader.topicName = topicName;
      return this;
    }
    publishData(data) {
      this.payload.message.addAll(data);
      return this;
    }
    withMessageIdentifier(messageIdentifier) {
      this.variableHeader.messageIdentifier = messageIdentifier;
      return this;
    }
    withQos(qos) {
      this.header.withQos(qos);
      return this;
    }
    clearPublishData() {
      this.payload.message[$clear]();
      return this;
    }
    setRetain(opts) {
      let state = opts && 'state' in opts ? opts.state : null;
      if (state != null && dart.test(state)) {
        this.header.shouldBeRetained();
      }
    }
    toString() {
      let sb = new core.StringBuffer.new();
      sb.write(super.toString());
      sb.writeln(dart.toString(this.variableHeader));
      sb.writeln(dart.toString(this.payload));
      return sb.toString();
    }
  };
  (mqtt_client.MqttPublishMessage.new = function() {
    this[variableHeader$1] = null;
    this[payload$0] = null;
    mqtt_client.MqttPublishMessage.__proto__.new.call(this);
    this.header = new mqtt_client.MqttHeader.new().asType(mqtt_client.MqttMessageType.publish);
    this.variableHeader = new mqtt_client.MqttPublishVariableHeader.new(this.header);
    this.payload = new mqtt_client.MqttPublishPayload.new();
  }).prototype = mqtt_client.MqttPublishMessage.prototype;
  (mqtt_client.MqttPublishMessage.fromByteBuffer = function(header, messageStream) {
    this[variableHeader$1] = null;
    this[payload$0] = null;
    mqtt_client.MqttPublishMessage.__proto__.new.call(this);
    this.header = header;
    this.readFrom(messageStream);
  }).prototype = mqtt_client.MqttPublishMessage.prototype;
  dart.addTypeTests(mqtt_client.MqttPublishMessage);
  dart.addTypeCaches(mqtt_client.MqttPublishMessage);
  dart.setMethodSignature(mqtt_client.MqttPublishMessage, () => ({
    __proto__: dart.getMethods(mqtt_client.MqttPublishMessage.__proto__),
    toTopic: dart.fnType(dart.legacy(mqtt_client.MqttPublishMessage), [dart.legacy(core.String)]),
    publishData: dart.fnType(dart.legacy(mqtt_client.MqttPublishMessage), [dart.legacy(typed_buffer.Uint8Buffer)]),
    withMessageIdentifier: dart.fnType(dart.legacy(mqtt_client.MqttPublishMessage), [dart.legacy(core.int)]),
    withQos: dart.fnType(dart.legacy(mqtt_client.MqttPublishMessage), [dart.legacy(mqtt_client.MqttQos)]),
    clearPublishData: dart.fnType(dart.legacy(mqtt_client.MqttPublishMessage), []),
    setRetain: dart.fnType(dart.void, [], {state: dart.legacy(core.bool)}, {})
  }));
  dart.setLibraryUri(mqtt_client.MqttPublishMessage, I[0]);
  dart.setFieldSignature(mqtt_client.MqttPublishMessage, () => ({
    __proto__: dart.getFields(mqtt_client.MqttPublishMessage.__proto__),
    variableHeader: dart.fieldType(dart.legacy(mqtt_client.MqttPublishVariableHeader)),
    payload: dart.fieldType(dart.legacy(mqtt_client.MqttPublishPayload))
  }));
  dart.defineExtensionMethods(mqtt_client.MqttPublishMessage, ['toString']);
  var header$0 = dart.privateName(mqtt_client, "MqttPublishVariableHeader.header");
  mqtt_client.MqttPublishVariableHeader = class MqttPublishVariableHeader extends mqtt_client.MqttVariableHeader {
    get header() {
      return this[header$0];
    }
    set header(value) {
      this[header$0] = value;
    }
    readFrom(variableHeaderStream) {
      this.readTopicName(variableHeaderStream);
      if (this.header.qos == mqtt_client.MqttQos.atLeastOnce || this.header.qos == mqtt_client.MqttQos.exactlyOnce) {
        this.readMessageIdentifier(variableHeaderStream);
      }
    }
    writeTo(variableHeaderStream) {
      this.writeTopicName(variableHeaderStream);
      if (this.header.qos == mqtt_client.MqttQos.atLeastOnce || this.header.qos == mqtt_client.MqttQos.exactlyOnce) {
        this.writeMessageIdentifier(variableHeaderStream);
      }
    }
    getWriteLength() {
      let headerLength = 0;
      let enc = new mqtt_client.MqttEncoding.new();
      headerLength = headerLength + dart.notNull(enc.getByteCount(this.topicName));
      if (this.header.qos == mqtt_client.MqttQos.atLeastOnce || this.header.qos == mqtt_client.MqttQos.exactlyOnce) {
        headerLength = headerLength + 2;
      }
      return headerLength;
    }
    toString() {
      return "Publish Variable Header: TopicName={" + dart.str(this.topicName) + "}, MessageIdentifier={" + dart.str(this.messageIdentifier) + "}, VH Length={" + dart.str(this.length) + "}";
    }
  };
  (mqtt_client.MqttPublishVariableHeader.new = function(header) {
    this[header$0] = header;
    mqtt_client.MqttPublishVariableHeader.__proto__.new.call(this);
    ;
  }).prototype = mqtt_client.MqttPublishVariableHeader.prototype;
  (mqtt_client.MqttPublishVariableHeader.fromByteBuffer = function(header, variableHeaderStream) {
    this[header$0] = header;
    mqtt_client.MqttPublishVariableHeader.__proto__.new.call(this);
    this.readFrom(variableHeaderStream);
  }).prototype = mqtt_client.MqttPublishVariableHeader.prototype;
  dart.addTypeTests(mqtt_client.MqttPublishVariableHeader);
  dart.addTypeCaches(mqtt_client.MqttPublishVariableHeader);
  dart.setMethodSignature(mqtt_client.MqttPublishVariableHeader, () => ({
    __proto__: dart.getMethods(mqtt_client.MqttPublishVariableHeader.__proto__),
    toString: dart.fnType(dart.legacy(core.String), []),
    [$toString]: dart.fnType(dart.legacy(core.String), [])
  }));
  dart.setLibraryUri(mqtt_client.MqttPublishVariableHeader, I[0]);
  dart.setFieldSignature(mqtt_client.MqttPublishVariableHeader, () => ({
    __proto__: dart.getFields(mqtt_client.MqttPublishVariableHeader.__proto__),
    header: dart.fieldType(dart.legacy(mqtt_client.MqttHeader))
  }));
  dart.defineExtensionMethods(mqtt_client.MqttPublishVariableHeader, ['toString']);
  var variableHeader$2 = dart.privateName(mqtt_client, "MqttPublishAckMessage.variableHeader");
  mqtt_client.MqttPublishAckMessage = class MqttPublishAckMessage extends mqtt_client.MqttMessage {
    get variableHeader() {
      return this[variableHeader$2];
    }
    set variableHeader(value) {
      this[variableHeader$2] = value;
    }
    writeTo(messageStream) {
      this.header.writeTo(this.variableHeader.getWriteLength(), messageStream);
      this.variableHeader.writeTo(messageStream);
    }
    withMessageIdentifier(messageIdentifier) {
      this.variableHeader.messageIdentifier = messageIdentifier;
      return this;
    }
    toString() {
      let sb = new core.StringBuffer.new();
      sb.write(super.toString());
      sb.writeln(dart.toString(this.variableHeader));
      return sb.toString();
    }
  };
  (mqtt_client.MqttPublishAckMessage.new = function() {
    this[variableHeader$2] = null;
    mqtt_client.MqttPublishAckMessage.__proto__.new.call(this);
    this.header = new mqtt_client.MqttHeader.new().asType(mqtt_client.MqttMessageType.publishAck);
    this.variableHeader = new mqtt_client.MqttPublishAckVariableHeader.new();
  }).prototype = mqtt_client.MqttPublishAckMessage.prototype;
  (mqtt_client.MqttPublishAckMessage.fromByteBuffer = function(header, messageStream) {
    this[variableHeader$2] = null;
    mqtt_client.MqttPublishAckMessage.__proto__.new.call(this);
    this.header = header;
    this.variableHeader = new mqtt_client.MqttPublishAckVariableHeader.fromByteBuffer(messageStream);
  }).prototype = mqtt_client.MqttPublishAckMessage.prototype;
  dart.addTypeTests(mqtt_client.MqttPublishAckMessage);
  dart.addTypeCaches(mqtt_client.MqttPublishAckMessage);
  dart.setMethodSignature(mqtt_client.MqttPublishAckMessage, () => ({
    __proto__: dart.getMethods(mqtt_client.MqttPublishAckMessage.__proto__),
    withMessageIdentifier: dart.fnType(dart.legacy(mqtt_client.MqttPublishAckMessage), [dart.legacy(core.int)])
  }));
  dart.setLibraryUri(mqtt_client.MqttPublishAckMessage, I[0]);
  dart.setFieldSignature(mqtt_client.MqttPublishAckMessage, () => ({
    __proto__: dart.getFields(mqtt_client.MqttPublishAckMessage.__proto__),
    variableHeader: dart.fieldType(dart.legacy(mqtt_client.MqttPublishAckVariableHeader))
  }));
  dart.defineExtensionMethods(mqtt_client.MqttPublishAckMessage, ['toString']);
  mqtt_client.MqttPublishAckVariableHeader = class MqttPublishAckVariableHeader extends mqtt_client.MqttVariableHeader {
    readFrom(variableHeaderStream) {
      this.readMessageIdentifier(variableHeaderStream);
    }
    writeTo(variableHeaderStream) {
      this.writeMessageIdentifier(variableHeaderStream);
    }
    getWriteLength() {
      return 2;
    }
    toString() {
      return "PublishAck Variable Header: MessageIdentifier={" + dart.str(this.messageIdentifier) + "}";
    }
  };
  (mqtt_client.MqttPublishAckVariableHeader.new = function() {
    mqtt_client.MqttPublishAckVariableHeader.__proto__.new.call(this);
    ;
  }).prototype = mqtt_client.MqttPublishAckVariableHeader.prototype;
  (mqtt_client.MqttPublishAckVariableHeader.fromByteBuffer = function(headerStream) {
    mqtt_client.MqttPublishAckVariableHeader.__proto__.new.call(this);
    this.readFrom(headerStream);
  }).prototype = mqtt_client.MqttPublishAckVariableHeader.prototype;
  dart.addTypeTests(mqtt_client.MqttPublishAckVariableHeader);
  dart.addTypeCaches(mqtt_client.MqttPublishAckVariableHeader);
  dart.setMethodSignature(mqtt_client.MqttPublishAckVariableHeader, () => ({
    __proto__: dart.getMethods(mqtt_client.MqttPublishAckVariableHeader.__proto__),
    toString: dart.fnType(dart.legacy(core.String), []),
    [$toString]: dart.fnType(dart.legacy(core.String), [])
  }));
  dart.setLibraryUri(mqtt_client.MqttPublishAckVariableHeader, I[0]);
  dart.defineExtensionMethods(mqtt_client.MqttPublishAckVariableHeader, ['toString']);
  var variableHeader$3 = dart.privateName(mqtt_client, "MqttPublishCompleteMessage.variableHeader");
  mqtt_client.MqttPublishCompleteMessage = class MqttPublishCompleteMessage extends mqtt_client.MqttMessage {
    get variableHeader() {
      return this[variableHeader$3];
    }
    set variableHeader(value) {
      this[variableHeader$3] = value;
    }
    writeTo(messageStream) {
      this.header.writeTo(this.variableHeader.getWriteLength(), messageStream);
      this.variableHeader.writeTo(messageStream);
    }
    withMessageIdentifier(messageIdentifier) {
      this.variableHeader.messageIdentifier = messageIdentifier;
      return this;
    }
    toString() {
      let sb = new core.StringBuffer.new();
      sb.write(super.toString());
      sb.writeln(dart.toString(this.variableHeader));
      return sb.toString();
    }
  };
  (mqtt_client.MqttPublishCompleteMessage.new = function() {
    this[variableHeader$3] = null;
    mqtt_client.MqttPublishCompleteMessage.__proto__.new.call(this);
    this.header = new mqtt_client.MqttHeader.new().asType(mqtt_client.MqttMessageType.publishComplete);
    this.variableHeader = new mqtt_client.MqttPublishCompleteVariableHeader.new();
  }).prototype = mqtt_client.MqttPublishCompleteMessage.prototype;
  (mqtt_client.MqttPublishCompleteMessage.fromByteBuffer = function(header, messageStream) {
    this[variableHeader$3] = null;
    mqtt_client.MqttPublishCompleteMessage.__proto__.new.call(this);
    this.header = header;
    this.variableHeader = new mqtt_client.MqttPublishCompleteVariableHeader.fromByteBuffer(messageStream);
  }).prototype = mqtt_client.MqttPublishCompleteMessage.prototype;
  dart.addTypeTests(mqtt_client.MqttPublishCompleteMessage);
  dart.addTypeCaches(mqtt_client.MqttPublishCompleteMessage);
  dart.setMethodSignature(mqtt_client.MqttPublishCompleteMessage, () => ({
    __proto__: dart.getMethods(mqtt_client.MqttPublishCompleteMessage.__proto__),
    withMessageIdentifier: dart.fnType(dart.legacy(mqtt_client.MqttPublishCompleteMessage), [dart.legacy(core.int)])
  }));
  dart.setLibraryUri(mqtt_client.MqttPublishCompleteMessage, I[0]);
  dart.setFieldSignature(mqtt_client.MqttPublishCompleteMessage, () => ({
    __proto__: dart.getFields(mqtt_client.MqttPublishCompleteMessage.__proto__),
    variableHeader: dart.fieldType(dart.legacy(mqtt_client.MqttPublishCompleteVariableHeader))
  }));
  dart.defineExtensionMethods(mqtt_client.MqttPublishCompleteMessage, ['toString']);
  mqtt_client.MqttPublishCompleteVariableHeader = class MqttPublishCompleteVariableHeader extends mqtt_client.MqttVariableHeader {
    readFrom(variableHeaderStream) {
      this.readMessageIdentifier(variableHeaderStream);
    }
    writeTo(variableHeaderStream) {
      this.writeMessageIdentifier(variableHeaderStream);
    }
    getWriteLength() {
      return 2;
    }
    toString() {
      return "PublishComplete Variable Header: MessageIdentifier={" + dart.str(this.messageIdentifier) + "}";
    }
  };
  (mqtt_client.MqttPublishCompleteVariableHeader.new = function() {
    mqtt_client.MqttPublishCompleteVariableHeader.__proto__.new.call(this);
    ;
  }).prototype = mqtt_client.MqttPublishCompleteVariableHeader.prototype;
  (mqtt_client.MqttPublishCompleteVariableHeader.fromByteBuffer = function(headerStream) {
    mqtt_client.MqttPublishCompleteVariableHeader.__proto__.new.call(this);
    this.readFrom(headerStream);
  }).prototype = mqtt_client.MqttPublishCompleteVariableHeader.prototype;
  dart.addTypeTests(mqtt_client.MqttPublishCompleteVariableHeader);
  dart.addTypeCaches(mqtt_client.MqttPublishCompleteVariableHeader);
  dart.setMethodSignature(mqtt_client.MqttPublishCompleteVariableHeader, () => ({
    __proto__: dart.getMethods(mqtt_client.MqttPublishCompleteVariableHeader.__proto__),
    toString: dart.fnType(dart.legacy(core.String), []),
    [$toString]: dart.fnType(dart.legacy(core.String), [])
  }));
  dart.setLibraryUri(mqtt_client.MqttPublishCompleteVariableHeader, I[0]);
  dart.defineExtensionMethods(mqtt_client.MqttPublishCompleteVariableHeader, ['toString']);
  var variableHeader$4 = dart.privateName(mqtt_client, "MqttPublishReceivedMessage.variableHeader");
  mqtt_client.MqttPublishReceivedMessage = class MqttPublishReceivedMessage extends mqtt_client.MqttMessage {
    get variableHeader() {
      return this[variableHeader$4];
    }
    set variableHeader(value) {
      this[variableHeader$4] = value;
    }
    writeTo(messageStream) {
      this.header.writeTo(this.variableHeader.getWriteLength(), messageStream);
      this.variableHeader.writeTo(messageStream);
    }
    withMessageIdentifier(messageIdentifier) {
      this.variableHeader.messageIdentifier = messageIdentifier;
      return this;
    }
    toString() {
      let sb = new core.StringBuffer.new();
      sb.write(super.toString());
      sb.writeln(dart.toString(this.variableHeader));
      return sb.toString();
    }
  };
  (mqtt_client.MqttPublishReceivedMessage.new = function() {
    this[variableHeader$4] = null;
    mqtt_client.MqttPublishReceivedMessage.__proto__.new.call(this);
    this.header = new mqtt_client.MqttHeader.new().asType(mqtt_client.MqttMessageType.publishReceived);
    this.variableHeader = new mqtt_client.MqttPublishReceivedVariableHeader.new();
  }).prototype = mqtt_client.MqttPublishReceivedMessage.prototype;
  (mqtt_client.MqttPublishReceivedMessage.fromByteBuffer = function(header, messageStream) {
    this[variableHeader$4] = null;
    mqtt_client.MqttPublishReceivedMessage.__proto__.new.call(this);
    this.header = header;
    this.variableHeader = new mqtt_client.MqttPublishReceivedVariableHeader.fromByteBuffer(messageStream);
  }).prototype = mqtt_client.MqttPublishReceivedMessage.prototype;
  dart.addTypeTests(mqtt_client.MqttPublishReceivedMessage);
  dart.addTypeCaches(mqtt_client.MqttPublishReceivedMessage);
  dart.setMethodSignature(mqtt_client.MqttPublishReceivedMessage, () => ({
    __proto__: dart.getMethods(mqtt_client.MqttPublishReceivedMessage.__proto__),
    withMessageIdentifier: dart.fnType(dart.legacy(mqtt_client.MqttPublishReceivedMessage), [dart.legacy(core.int)])
  }));
  dart.setLibraryUri(mqtt_client.MqttPublishReceivedMessage, I[0]);
  dart.setFieldSignature(mqtt_client.MqttPublishReceivedMessage, () => ({
    __proto__: dart.getFields(mqtt_client.MqttPublishReceivedMessage.__proto__),
    variableHeader: dart.fieldType(dart.legacy(mqtt_client.MqttPublishReceivedVariableHeader))
  }));
  dart.defineExtensionMethods(mqtt_client.MqttPublishReceivedMessage, ['toString']);
  mqtt_client.MqttPublishReceivedVariableHeader = class MqttPublishReceivedVariableHeader extends mqtt_client.MqttVariableHeader {
    readFrom(variableHeaderStream) {
      this.readMessageIdentifier(variableHeaderStream);
    }
    writeTo(variableHeaderStream) {
      this.writeMessageIdentifier(variableHeaderStream);
    }
    getWriteLength() {
      return 2;
    }
    toString() {
      return "PublishReceived Variable Header: MessageIdentifier={" + dart.str(this.messageIdentifier) + "}";
    }
  };
  (mqtt_client.MqttPublishReceivedVariableHeader.new = function() {
    mqtt_client.MqttPublishReceivedVariableHeader.__proto__.new.call(this);
    ;
  }).prototype = mqtt_client.MqttPublishReceivedVariableHeader.prototype;
  (mqtt_client.MqttPublishReceivedVariableHeader.fromByteBuffer = function(headerStream) {
    mqtt_client.MqttPublishReceivedVariableHeader.__proto__.new.call(this);
    this.readFrom(headerStream);
  }).prototype = mqtt_client.MqttPublishReceivedVariableHeader.prototype;
  dart.addTypeTests(mqtt_client.MqttPublishReceivedVariableHeader);
  dart.addTypeCaches(mqtt_client.MqttPublishReceivedVariableHeader);
  dart.setMethodSignature(mqtt_client.MqttPublishReceivedVariableHeader, () => ({
    __proto__: dart.getMethods(mqtt_client.MqttPublishReceivedVariableHeader.__proto__),
    toString: dart.fnType(dart.legacy(core.String), []),
    [$toString]: dart.fnType(dart.legacy(core.String), [])
  }));
  dart.setLibraryUri(mqtt_client.MqttPublishReceivedVariableHeader, I[0]);
  dart.defineExtensionMethods(mqtt_client.MqttPublishReceivedVariableHeader, ['toString']);
  var variableHeader$5 = dart.privateName(mqtt_client, "MqttPublishReleaseMessage.variableHeader");
  mqtt_client.MqttPublishReleaseMessage = class MqttPublishReleaseMessage extends mqtt_client.MqttMessage {
    get variableHeader() {
      return this[variableHeader$5];
    }
    set variableHeader(value) {
      this[variableHeader$5] = value;
    }
    writeTo(messageStream) {
      this.header.writeTo(this.variableHeader.getWriteLength(), messageStream);
      this.variableHeader.writeTo(messageStream);
    }
    withMessageIdentifier(messageIdentifier) {
      this.variableHeader.messageIdentifier = messageIdentifier;
      return this;
    }
    toString() {
      let sb = new core.StringBuffer.new();
      sb.write(super.toString());
      sb.writeln(dart.toString(this.variableHeader));
      return sb.toString();
    }
  };
  (mqtt_client.MqttPublishReleaseMessage.new = function() {
    this[variableHeader$5] = null;
    mqtt_client.MqttPublishReleaseMessage.__proto__.new.call(this);
    this.header = new mqtt_client.MqttHeader.new().asType(mqtt_client.MqttMessageType.publishRelease);
    this.header.qos = mqtt_client.MqttQos.atLeastOnce;
    this.variableHeader = new mqtt_client.MqttPublishReleaseVariableHeader.new();
  }).prototype = mqtt_client.MqttPublishReleaseMessage.prototype;
  (mqtt_client.MqttPublishReleaseMessage.fromByteBuffer = function(header, messageStream) {
    this[variableHeader$5] = null;
    mqtt_client.MqttPublishReleaseMessage.__proto__.new.call(this);
    this.header = header;
    this.variableHeader = new mqtt_client.MqttPublishReleaseVariableHeader.fromByteBuffer(messageStream);
  }).prototype = mqtt_client.MqttPublishReleaseMessage.prototype;
  dart.addTypeTests(mqtt_client.MqttPublishReleaseMessage);
  dart.addTypeCaches(mqtt_client.MqttPublishReleaseMessage);
  dart.setMethodSignature(mqtt_client.MqttPublishReleaseMessage, () => ({
    __proto__: dart.getMethods(mqtt_client.MqttPublishReleaseMessage.__proto__),
    withMessageIdentifier: dart.fnType(dart.legacy(mqtt_client.MqttPublishReleaseMessage), [dart.legacy(core.int)])
  }));
  dart.setLibraryUri(mqtt_client.MqttPublishReleaseMessage, I[0]);
  dart.setFieldSignature(mqtt_client.MqttPublishReleaseMessage, () => ({
    __proto__: dart.getFields(mqtt_client.MqttPublishReleaseMessage.__proto__),
    variableHeader: dart.fieldType(dart.legacy(mqtt_client.MqttPublishReleaseVariableHeader))
  }));
  dart.defineExtensionMethods(mqtt_client.MqttPublishReleaseMessage, ['toString']);
  mqtt_client.MqttPublishReleaseVariableHeader = class MqttPublishReleaseVariableHeader extends mqtt_client.MqttVariableHeader {
    readFrom(variableHeaderStream) {
      this.readMessageIdentifier(variableHeaderStream);
    }
    writeTo(variableHeaderStream) {
      this.writeMessageIdentifier(variableHeaderStream);
    }
    getWriteLength() {
      return 2;
    }
    toString() {
      return "PublishRelease Variable Header: MessageIdentifier={" + dart.str(this.messageIdentifier) + "}";
    }
  };
  (mqtt_client.MqttPublishReleaseVariableHeader.new = function() {
    mqtt_client.MqttPublishReleaseVariableHeader.__proto__.new.call(this);
    ;
  }).prototype = mqtt_client.MqttPublishReleaseVariableHeader.prototype;
  (mqtt_client.MqttPublishReleaseVariableHeader.fromByteBuffer = function(headerStream) {
    mqtt_client.MqttPublishReleaseVariableHeader.__proto__.new.call(this);
    this.readFrom(headerStream);
  }).prototype = mqtt_client.MqttPublishReleaseVariableHeader.prototype;
  dart.addTypeTests(mqtt_client.MqttPublishReleaseVariableHeader);
  dart.addTypeCaches(mqtt_client.MqttPublishReleaseVariableHeader);
  dart.setMethodSignature(mqtt_client.MqttPublishReleaseVariableHeader, () => ({
    __proto__: dart.getMethods(mqtt_client.MqttPublishReleaseVariableHeader.__proto__),
    toString: dart.fnType(dart.legacy(core.String), []),
    [$toString]: dart.fnType(dart.legacy(core.String), [])
  }));
  dart.setLibraryUri(mqtt_client.MqttPublishReleaseVariableHeader, I[0]);
  dart.defineExtensionMethods(mqtt_client.MqttPublishReleaseVariableHeader, ['toString']);
  mqtt_client.MqttSubscribeVariableHeader = class MqttSubscribeVariableHeader extends mqtt_client.MqttVariableHeader {
    readFrom(variableHeaderStream) {
      this.readMessageIdentifier(variableHeaderStream);
    }
    writeTo(variableHeaderStream) {
      this.writeMessageIdentifier(variableHeaderStream);
    }
    getWriteLength() {
      return 2;
    }
    toString() {
      return "Subscribe Variable Header: MessageIdentifier={" + dart.str(this.messageIdentifier) + "}";
    }
  };
  (mqtt_client.MqttSubscribeVariableHeader.new = function() {
    mqtt_client.MqttSubscribeVariableHeader.__proto__.new.call(this);
    ;
  }).prototype = mqtt_client.MqttSubscribeVariableHeader.prototype;
  (mqtt_client.MqttSubscribeVariableHeader.fromByteBuffer = function(headerStream) {
    mqtt_client.MqttSubscribeVariableHeader.__proto__.new.call(this);
    this.readFrom(headerStream);
  }).prototype = mqtt_client.MqttSubscribeVariableHeader.prototype;
  dart.addTypeTests(mqtt_client.MqttSubscribeVariableHeader);
  dart.addTypeCaches(mqtt_client.MqttSubscribeVariableHeader);
  dart.setMethodSignature(mqtt_client.MqttSubscribeVariableHeader, () => ({
    __proto__: dart.getMethods(mqtt_client.MqttSubscribeVariableHeader.__proto__),
    toString: dart.fnType(dart.legacy(core.String), []),
    [$toString]: dart.fnType(dart.legacy(core.String), [])
  }));
  dart.setLibraryUri(mqtt_client.MqttSubscribeVariableHeader, I[0]);
  dart.defineExtensionMethods(mqtt_client.MqttSubscribeVariableHeader, ['toString']);
  var variableHeader$6 = dart.privateName(mqtt_client, "MqttSubscribePayload.variableHeader");
  var header$1 = dart.privateName(mqtt_client, "MqttSubscribePayload.header");
  var subscriptions$ = dart.privateName(mqtt_client, "MqttSubscribePayload.subscriptions");
  mqtt_client.MqttSubscribePayload = class MqttSubscribePayload extends mqtt_client.MqttPayload {
    get variableHeader() {
      return this[variableHeader$6];
    }
    set variableHeader(value) {
      this[variableHeader$6] = value;
    }
    get header() {
      return this[header$1];
    }
    set header(value) {
      this[header$1] = value;
    }
    get subscriptions() {
      return this[subscriptions$];
    }
    set subscriptions(value) {
      this[subscriptions$] = value;
    }
    writeTo(payloadStream) {
      this.subscriptions[$forEach](dart.fn((key, value) => {
        payloadStream.writeMqttStringM(key);
        payloadStream.writeByte(value.index);
      }, T.StringLAndMqttQosLToNull()));
    }
    readFrom(payloadStream) {
      let payloadBytesRead = 0;
      let payloadLength = dart.notNull(this.header.messageSize) - dart.notNull(this.variableHeader.length);
      while (payloadBytesRead < payloadLength) {
        let topic = payloadStream.readMqttStringM();
        let qos = mqtt_client.MqttUtilities.getQosLevel(payloadStream.readByte());
        payloadBytesRead = payloadBytesRead + (topic.length + 3);
        this.addSubscription(topic, qos);
      }
    }
    getWriteLength() {
      let length = 0;
      let enc = new mqtt_client.MqttEncoding.new();
      this.subscriptions[$forEach](dart.fn((key, value) => {
        length = length + dart.notNull(enc.getByteCount(key));
        length = length + 1;
      }, T.StringLAndMqttQosLToNull()));
      return length;
    }
    addSubscription(topic, qos) {
      this.subscriptions[$_set](topic, qos);
    }
    clearSubscriptions() {
      this.subscriptions[$clear]();
    }
    toString() {
      let sb = new core.StringBuffer.new();
      sb.writeln("Payload: Subscription [{" + dart.str(this.subscriptions[$length]) + "}]");
      this.subscriptions[$forEach](dart.fn((key, value) => {
        sb.writeln("{{ Topic={" + dart.str(key) + "}, Qos={" + dart.str(value) + "} }}");
      }, T.StringLAndMqttQosLToNull()));
      return sb.toString();
    }
  };
  (mqtt_client.MqttSubscribePayload.new = function() {
    this[subscriptions$] = new (T.LinkedMapOfStringL$MqttQosL()).new();
    this[variableHeader$6] = null;
    this[header$1] = null;
    mqtt_client.MqttSubscribePayload.__proto__.new.call(this);
    ;
  }).prototype = mqtt_client.MqttSubscribePayload.prototype;
  (mqtt_client.MqttSubscribePayload.fromByteBuffer = function(header, variableHeader, payloadStream) {
    this[subscriptions$] = new (T.LinkedMapOfStringL$MqttQosL()).new();
    this[header$1] = header;
    this[variableHeader$6] = variableHeader;
    mqtt_client.MqttSubscribePayload.__proto__.new.call(this);
    this.readFrom(payloadStream);
  }).prototype = mqtt_client.MqttSubscribePayload.prototype;
  dart.addTypeTests(mqtt_client.MqttSubscribePayload);
  dart.addTypeCaches(mqtt_client.MqttSubscribePayload);
  dart.setMethodSignature(mqtt_client.MqttSubscribePayload, () => ({
    __proto__: dart.getMethods(mqtt_client.MqttSubscribePayload.__proto__),
    writeTo: dart.fnType(dart.void, [dart.legacy(mqtt_client.MqttByteBuffer)]),
    readFrom: dart.fnType(dart.void, [dart.legacy(mqtt_client.MqttByteBuffer)]),
    getWriteLength: dart.fnType(dart.legacy(core.int), []),
    addSubscription: dart.fnType(dart.void, [dart.legacy(core.String), dart.legacy(mqtt_client.MqttQos)]),
    clearSubscriptions: dart.fnType(dart.void, []),
    toString: dart.fnType(dart.legacy(core.String), []),
    [$toString]: dart.fnType(dart.legacy(core.String), [])
  }));
  dart.setLibraryUri(mqtt_client.MqttSubscribePayload, I[0]);
  dart.setFieldSignature(mqtt_client.MqttSubscribePayload, () => ({
    __proto__: dart.getFields(mqtt_client.MqttSubscribePayload.__proto__),
    variableHeader: dart.fieldType(dart.legacy(mqtt_client.MqttVariableHeader)),
    header: dart.fieldType(dart.legacy(mqtt_client.MqttHeader)),
    subscriptions: dart.fieldType(dart.legacy(core.Map$(dart.legacy(core.String), dart.legacy(mqtt_client.MqttQos))))
  }));
  dart.defineExtensionMethods(mqtt_client.MqttSubscribePayload, ['toString']);
  var variableHeader$7 = dart.privateName(mqtt_client, "MqttSubscribeMessage.variableHeader");
  var payload$1 = dart.privateName(mqtt_client, "MqttSubscribeMessage.payload");
  var _lastTopic = dart.privateName(mqtt_client, "_lastTopic");
  mqtt_client.MqttSubscribeMessage = class MqttSubscribeMessage extends mqtt_client.MqttMessage {
    get variableHeader() {
      return this[variableHeader$7];
    }
    set variableHeader(value) {
      this[variableHeader$7] = value;
    }
    get payload() {
      return this[payload$1];
    }
    set payload(value) {
      this[payload$1] = value;
    }
    writeTo(messageStream) {
      this.header.writeTo(dart.notNull(this.variableHeader.getWriteLength()) + dart.notNull(this.payload.getWriteLength()), messageStream);
      this.variableHeader.writeTo(messageStream);
      this.payload.writeTo(messageStream);
    }
    readFrom(messageStream) {
      this.variableHeader = new mqtt_client.MqttSubscribeVariableHeader.fromByteBuffer(messageStream);
      this.payload = new mqtt_client.MqttSubscribePayload.fromByteBuffer(this.header, this.variableHeader, messageStream);
    }
    toTopic(topic) {
      this[_lastTopic] = topic;
      this.payload.addSubscription(topic, mqtt_client.MqttQos.atMostOnce);
      return this;
    }
    atQos(qos) {
      if (dart.test(this.payload.subscriptions[$containsKey](this[_lastTopic]))) {
        this.payload.subscriptions[$_set](this[_lastTopic], qos);
      }
      return this;
    }
    withMessageIdentifier(messageIdentifier) {
      this.variableHeader.messageIdentifier = messageIdentifier;
      return this;
    }
    expectAcknowledgement() {
      this.header.withQos(mqtt_client.MqttQos.atLeastOnce);
      return this;
    }
    isDuplicate() {
      this.header.isDuplicate();
      return this;
    }
    toString() {
      let sb = new core.StringBuffer.new();
      sb.write(super.toString());
      sb.writeln(dart.toString(this.variableHeader));
      sb.writeln(dart.toString(this.payload));
      return sb.toString();
    }
  };
  (mqtt_client.MqttSubscribeMessage.new = function() {
    this[variableHeader$7] = null;
    this[payload$1] = null;
    this[_lastTopic] = null;
    mqtt_client.MqttSubscribeMessage.__proto__.new.call(this);
    this.header = new mqtt_client.MqttHeader.new().asType(mqtt_client.MqttMessageType.subscribe);
    this.header.qos = mqtt_client.MqttQos.atLeastOnce;
    this.variableHeader = new mqtt_client.MqttSubscribeVariableHeader.new();
    this.payload = new mqtt_client.MqttSubscribePayload.new();
  }).prototype = mqtt_client.MqttSubscribeMessage.prototype;
  (mqtt_client.MqttSubscribeMessage.fromByteBuffer = function(header, messageStream) {
    this[variableHeader$7] = null;
    this[payload$1] = null;
    this[_lastTopic] = null;
    mqtt_client.MqttSubscribeMessage.__proto__.new.call(this);
    this.header = header;
    this.header.qos = mqtt_client.MqttQos.atLeastOnce;
    this.readFrom(messageStream);
  }).prototype = mqtt_client.MqttSubscribeMessage.prototype;
  dart.addTypeTests(mqtt_client.MqttSubscribeMessage);
  dart.addTypeCaches(mqtt_client.MqttSubscribeMessage);
  dart.setMethodSignature(mqtt_client.MqttSubscribeMessage, () => ({
    __proto__: dart.getMethods(mqtt_client.MqttSubscribeMessage.__proto__),
    toTopic: dart.fnType(dart.legacy(mqtt_client.MqttSubscribeMessage), [dart.legacy(core.String)]),
    atQos: dart.fnType(dart.legacy(mqtt_client.MqttSubscribeMessage), [dart.legacy(mqtt_client.MqttQos)]),
    withMessageIdentifier: dart.fnType(dart.legacy(mqtt_client.MqttSubscribeMessage), [dart.legacy(core.int)]),
    expectAcknowledgement: dart.fnType(dart.legacy(mqtt_client.MqttSubscribeMessage), []),
    isDuplicate: dart.fnType(dart.legacy(mqtt_client.MqttSubscribeMessage), [])
  }));
  dart.setLibraryUri(mqtt_client.MqttSubscribeMessage, I[0]);
  dart.setFieldSignature(mqtt_client.MqttSubscribeMessage, () => ({
    __proto__: dart.getFields(mqtt_client.MqttSubscribeMessage.__proto__),
    variableHeader: dart.fieldType(dart.legacy(mqtt_client.MqttSubscribeVariableHeader)),
    payload: dart.fieldType(dart.legacy(mqtt_client.MqttSubscribePayload)),
    [_lastTopic]: dart.fieldType(dart.legacy(core.String))
  }));
  dart.defineExtensionMethods(mqtt_client.MqttSubscribeMessage, ['toString']);
  mqtt_client.MqttSubscribeAckVariableHeader = class MqttSubscribeAckVariableHeader extends mqtt_client.MqttVariableHeader {
    readFrom(variableHeaderStream) {
      this.readMessageIdentifier(variableHeaderStream);
    }
    writeTo(variableHeaderStream) {
      this.writeMessageIdentifier(variableHeaderStream);
    }
    getWriteLength() {
      return 2;
    }
    toString() {
      return "SubscribeAck Variable Header: MessageIdentifier={" + dart.str(this.messageIdentifier) + "}";
    }
  };
  (mqtt_client.MqttSubscribeAckVariableHeader.new = function() {
    mqtt_client.MqttSubscribeAckVariableHeader.__proto__.new.call(this);
    ;
  }).prototype = mqtt_client.MqttSubscribeAckVariableHeader.prototype;
  (mqtt_client.MqttSubscribeAckVariableHeader.fromByteBuffer = function(headerStream) {
    mqtt_client.MqttSubscribeAckVariableHeader.__proto__.new.call(this);
    this.readFrom(headerStream);
  }).prototype = mqtt_client.MqttSubscribeAckVariableHeader.prototype;
  dart.addTypeTests(mqtt_client.MqttSubscribeAckVariableHeader);
  dart.addTypeCaches(mqtt_client.MqttSubscribeAckVariableHeader);
  dart.setMethodSignature(mqtt_client.MqttSubscribeAckVariableHeader, () => ({
    __proto__: dart.getMethods(mqtt_client.MqttSubscribeAckVariableHeader.__proto__),
    toString: dart.fnType(dart.legacy(core.String), []),
    [$toString]: dart.fnType(dart.legacy(core.String), [])
  }));
  dart.setLibraryUri(mqtt_client.MqttSubscribeAckVariableHeader, I[0]);
  dart.defineExtensionMethods(mqtt_client.MqttSubscribeAckVariableHeader, ['toString']);
  var variableHeader$8 = dart.privateName(mqtt_client, "MqttSubscribeAckMessage.variableHeader");
  var payload$2 = dart.privateName(mqtt_client, "MqttSubscribeAckMessage.payload");
  mqtt_client.MqttSubscribeAckMessage = class MqttSubscribeAckMessage extends mqtt_client.MqttMessage {
    get variableHeader() {
      return this[variableHeader$8];
    }
    set variableHeader(value) {
      this[variableHeader$8] = value;
    }
    get payload() {
      return this[payload$2];
    }
    set payload(value) {
      this[payload$2] = value;
    }
    writeTo(messageStream) {
      this.header.writeTo(dart.notNull(this.variableHeader.getWriteLength()) + dart.notNull(this.payload.getWriteLength()), messageStream);
      this.variableHeader.writeTo(messageStream);
      this.payload.writeTo(messageStream);
    }
    readFrom(messageStream) {
      this.variableHeader = new mqtt_client.MqttSubscribeAckVariableHeader.fromByteBuffer(messageStream);
      this.payload = new mqtt_client.MqttSubscribeAckPayload.fromByteBuffer(this.header, this.variableHeader, messageStream);
    }
    withMessageIdentifier(messageIdentifier) {
      this.variableHeader.messageIdentifier = messageIdentifier;
      return this;
    }
    addQosGrant(qosGranted) {
      this.payload.addGrant(qosGranted);
      return this;
    }
    toString() {
      let sb = new core.StringBuffer.new();
      sb.write(super.toString());
      sb.writeln(dart.toString(this.variableHeader));
      sb.writeln(dart.toString(this.payload));
      return sb.toString();
    }
  };
  (mqtt_client.MqttSubscribeAckMessage.new = function() {
    this[variableHeader$8] = null;
    this[payload$2] = null;
    mqtt_client.MqttSubscribeAckMessage.__proto__.new.call(this);
    this.header = new mqtt_client.MqttHeader.new().asType(mqtt_client.MqttMessageType.subscribeAck);
    this.variableHeader = new mqtt_client.MqttSubscribeAckVariableHeader.new();
    this.payload = new mqtt_client.MqttSubscribeAckPayload.new();
  }).prototype = mqtt_client.MqttSubscribeAckMessage.prototype;
  (mqtt_client.MqttSubscribeAckMessage.fromByteBuffer = function(header, messageStream) {
    this[variableHeader$8] = null;
    this[payload$2] = null;
    mqtt_client.MqttSubscribeAckMessage.__proto__.new.call(this);
    this.header = header;
    this.readFrom(messageStream);
  }).prototype = mqtt_client.MqttSubscribeAckMessage.prototype;
  dart.addTypeTests(mqtt_client.MqttSubscribeAckMessage);
  dart.addTypeCaches(mqtt_client.MqttSubscribeAckMessage);
  dart.setMethodSignature(mqtt_client.MqttSubscribeAckMessage, () => ({
    __proto__: dart.getMethods(mqtt_client.MqttSubscribeAckMessage.__proto__),
    withMessageIdentifier: dart.fnType(dart.legacy(mqtt_client.MqttSubscribeAckMessage), [dart.legacy(core.int)]),
    addQosGrant: dart.fnType(dart.legacy(mqtt_client.MqttSubscribeAckMessage), [dart.legacy(mqtt_client.MqttQos)])
  }));
  dart.setLibraryUri(mqtt_client.MqttSubscribeAckMessage, I[0]);
  dart.setFieldSignature(mqtt_client.MqttSubscribeAckMessage, () => ({
    __proto__: dart.getFields(mqtt_client.MqttSubscribeAckMessage.__proto__),
    variableHeader: dart.fieldType(dart.legacy(mqtt_client.MqttSubscribeAckVariableHeader)),
    payload: dart.fieldType(dart.legacy(mqtt_client.MqttSubscribeAckPayload))
  }));
  dart.defineExtensionMethods(mqtt_client.MqttSubscribeAckMessage, ['toString']);
  var variableHeader$9 = dart.privateName(mqtt_client, "MqttSubscribeAckPayload.variableHeader");
  var header$2 = dart.privateName(mqtt_client, "MqttSubscribeAckPayload.header");
  var qosGrants = dart.privateName(mqtt_client, "MqttSubscribeAckPayload.qosGrants");
  mqtt_client.MqttSubscribeAckPayload = class MqttSubscribeAckPayload extends mqtt_client.MqttPayload {
    get variableHeader() {
      return this[variableHeader$9];
    }
    set variableHeader(value) {
      this[variableHeader$9] = value;
    }
    get header() {
      return this[header$2];
    }
    set header(value) {
      this[header$2] = value;
    }
    get qosGrants() {
      return this[qosGrants];
    }
    set qosGrants(value) {
      this[qosGrants] = value;
    }
    writeTo(payloadStream) {
      for (let value of this.qosGrants) {
        payloadStream.writeByte(value.index);
      }
    }
    readFrom(payloadStream) {
      let payloadBytesRead = 0;
      let payloadLength = dart.notNull(this.header.messageSize) - dart.notNull(this.variableHeader.length);
      while (payloadBytesRead < payloadLength) {
        let granted = mqtt_client.MqttUtilities.getQosLevel(payloadStream.readByte());
        payloadBytesRead = payloadBytesRead + 1;
        this.addGrant(granted);
      }
    }
    getWriteLength() {
      return this.qosGrants[$length];
    }
    addGrant(grantedQos) {
      this.qosGrants[$add](grantedQos);
    }
    clearGrants() {
      this.qosGrants[$clear]();
    }
    toString() {
      let sb = new core.StringBuffer.new();
      sb.writeln("Payload: Qos grants [{" + dart.str(this.qosGrants[$length]) + "}]");
      for (let value of this.qosGrants) {
        sb.writeln("{{ Grant={" + dart.str(value) + "} }}");
      }
      return sb.toString();
    }
  };
  (mqtt_client.MqttSubscribeAckPayload.new = function() {
    this[qosGrants] = T.JSArrayOfMqttQosL().of([]);
    this[variableHeader$9] = null;
    this[header$2] = null;
    mqtt_client.MqttSubscribeAckPayload.__proto__.new.call(this);
    ;
  }).prototype = mqtt_client.MqttSubscribeAckPayload.prototype;
  (mqtt_client.MqttSubscribeAckPayload.fromByteBuffer = function(header, variableHeader, payloadStream) {
    this[qosGrants] = T.JSArrayOfMqttQosL().of([]);
    this[header$2] = header;
    this[variableHeader$9] = variableHeader;
    mqtt_client.MqttSubscribeAckPayload.__proto__.new.call(this);
    this.readFrom(payloadStream);
  }).prototype = mqtt_client.MqttSubscribeAckPayload.prototype;
  dart.addTypeTests(mqtt_client.MqttSubscribeAckPayload);
  dart.addTypeCaches(mqtt_client.MqttSubscribeAckPayload);
  dart.setMethodSignature(mqtt_client.MqttSubscribeAckPayload, () => ({
    __proto__: dart.getMethods(mqtt_client.MqttSubscribeAckPayload.__proto__),
    writeTo: dart.fnType(dart.void, [dart.legacy(mqtt_client.MqttByteBuffer)]),
    readFrom: dart.fnType(dart.void, [dart.legacy(mqtt_client.MqttByteBuffer)]),
    getWriteLength: dart.fnType(dart.legacy(core.int), []),
    addGrant: dart.fnType(dart.void, [dart.legacy(mqtt_client.MqttQos)]),
    clearGrants: dart.fnType(dart.void, []),
    toString: dart.fnType(dart.legacy(core.String), []),
    [$toString]: dart.fnType(dart.legacy(core.String), [])
  }));
  dart.setLibraryUri(mqtt_client.MqttSubscribeAckPayload, I[0]);
  dart.setFieldSignature(mqtt_client.MqttSubscribeAckPayload, () => ({
    __proto__: dart.getFields(mqtt_client.MqttSubscribeAckPayload.__proto__),
    variableHeader: dart.fieldType(dart.legacy(mqtt_client.MqttVariableHeader)),
    header: dart.fieldType(dart.legacy(mqtt_client.MqttHeader)),
    qosGrants: dart.fieldType(dart.legacy(core.List$(dart.legacy(mqtt_client.MqttQos))))
  }));
  dart.defineExtensionMethods(mqtt_client.MqttSubscribeAckPayload, ['toString']);
  mqtt_client.MqttUnsubscribeVariableHeader = class MqttUnsubscribeVariableHeader extends mqtt_client.MqttVariableHeader {
    readFrom(variableHeaderStream) {
      this.readMessageIdentifier(variableHeaderStream);
    }
    writeTo(variableHeaderStream) {
      this.writeMessageIdentifier(variableHeaderStream);
    }
    getWriteLength() {
      return 2;
    }
    toString() {
      return "Unsubscribe VariableHeader Variable Header: MessageIdentifier={" + dart.str(this.messageIdentifier) + "}";
    }
  };
  (mqtt_client.MqttUnsubscribeVariableHeader.new = function() {
    mqtt_client.MqttUnsubscribeVariableHeader.__proto__.new.call(this);
    ;
  }).prototype = mqtt_client.MqttUnsubscribeVariableHeader.prototype;
  (mqtt_client.MqttUnsubscribeVariableHeader.fromByteBuffer = function(headerStream) {
    mqtt_client.MqttUnsubscribeVariableHeader.__proto__.new.call(this);
    this.readFrom(headerStream);
  }).prototype = mqtt_client.MqttUnsubscribeVariableHeader.prototype;
  dart.addTypeTests(mqtt_client.MqttUnsubscribeVariableHeader);
  dart.addTypeCaches(mqtt_client.MqttUnsubscribeVariableHeader);
  dart.setMethodSignature(mqtt_client.MqttUnsubscribeVariableHeader, () => ({
    __proto__: dart.getMethods(mqtt_client.MqttUnsubscribeVariableHeader.__proto__),
    toString: dart.fnType(dart.legacy(core.String), []),
    [$toString]: dart.fnType(dart.legacy(core.String), [])
  }));
  dart.setLibraryUri(mqtt_client.MqttUnsubscribeVariableHeader, I[0]);
  dart.defineExtensionMethods(mqtt_client.MqttUnsubscribeVariableHeader, ['toString']);
  var variableHeader$10 = dart.privateName(mqtt_client, "MqttUnsubscribePayload.variableHeader");
  var header$3 = dart.privateName(mqtt_client, "MqttUnsubscribePayload.header");
  var subscriptions$0 = dart.privateName(mqtt_client, "MqttUnsubscribePayload.subscriptions");
  mqtt_client.MqttUnsubscribePayload = class MqttUnsubscribePayload extends mqtt_client.MqttPayload {
    get variableHeader() {
      return this[variableHeader$10];
    }
    set variableHeader(value) {
      this[variableHeader$10] = value;
    }
    get header() {
      return this[header$3];
    }
    set header(value) {
      this[header$3] = value;
    }
    get subscriptions() {
      return this[subscriptions$0];
    }
    set subscriptions(value) {
      this[subscriptions$0] = value;
    }
    writeTo(payloadStream) {
      this.subscriptions[$forEach](dart.bind(payloadStream, 'writeMqttStringM'));
    }
    readFrom(payloadStream) {
      let payloadBytesRead = 0;
      let payloadLength = dart.notNull(this.header.messageSize) - dart.notNull(this.variableHeader.length);
      while (payloadBytesRead < payloadLength) {
        let topic = payloadStream.readMqttStringM();
        payloadBytesRead = payloadBytesRead + (topic.length + 2);
        this.addSubscription(topic);
      }
    }
    getWriteLength() {
      let length = 0;
      let enc = new mqtt_client.MqttEncoding.new();
      for (let subscription of this.subscriptions) {
        length = length + dart.notNull(enc.getByteCount(subscription));
      }
      return length;
    }
    addSubscription(topic) {
      this.subscriptions[$add](topic);
    }
    clearSubscriptions() {
      this.subscriptions[$clear]();
    }
    toString() {
      let sb = new core.StringBuffer.new();
      sb.writeln("Payload: Unsubscription [{" + dart.str(this.subscriptions[$length]) + "}]");
      for (let subscription of this.subscriptions) {
        sb.writeln("{{ Topic={" + dart.str(subscription) + "}}");
      }
      return sb.toString();
    }
  };
  (mqtt_client.MqttUnsubscribePayload.new = function() {
    this[subscriptions$0] = T.JSArrayOfStringL().of([]);
    this[variableHeader$10] = null;
    this[header$3] = null;
    mqtt_client.MqttUnsubscribePayload.__proto__.new.call(this);
    ;
  }).prototype = mqtt_client.MqttUnsubscribePayload.prototype;
  (mqtt_client.MqttUnsubscribePayload.fromByteBuffer = function(header, variableHeader, payloadStream) {
    this[subscriptions$0] = T.JSArrayOfStringL().of([]);
    this[header$3] = header;
    this[variableHeader$10] = variableHeader;
    mqtt_client.MqttUnsubscribePayload.__proto__.new.call(this);
    this.readFrom(payloadStream);
  }).prototype = mqtt_client.MqttUnsubscribePayload.prototype;
  dart.addTypeTests(mqtt_client.MqttUnsubscribePayload);
  dart.addTypeCaches(mqtt_client.MqttUnsubscribePayload);
  dart.setMethodSignature(mqtt_client.MqttUnsubscribePayload, () => ({
    __proto__: dart.getMethods(mqtt_client.MqttUnsubscribePayload.__proto__),
    writeTo: dart.fnType(dart.void, [dart.legacy(mqtt_client.MqttByteBuffer)]),
    readFrom: dart.fnType(dart.void, [dart.legacy(mqtt_client.MqttByteBuffer)]),
    getWriteLength: dart.fnType(dart.legacy(core.int), []),
    addSubscription: dart.fnType(dart.void, [dart.legacy(core.String)]),
    clearSubscriptions: dart.fnType(dart.void, []),
    toString: dart.fnType(dart.legacy(core.String), []),
    [$toString]: dart.fnType(dart.legacy(core.String), [])
  }));
  dart.setLibraryUri(mqtt_client.MqttUnsubscribePayload, I[0]);
  dart.setFieldSignature(mqtt_client.MqttUnsubscribePayload, () => ({
    __proto__: dart.getFields(mqtt_client.MqttUnsubscribePayload.__proto__),
    variableHeader: dart.fieldType(dart.legacy(mqtt_client.MqttVariableHeader)),
    header: dart.fieldType(dart.legacy(mqtt_client.MqttHeader)),
    subscriptions: dart.fieldType(dart.legacy(core.List$(dart.legacy(core.String))))
  }));
  dart.defineExtensionMethods(mqtt_client.MqttUnsubscribePayload, ['toString']);
  var variableHeader$11 = dart.privateName(mqtt_client, "MqttUnsubscribeMessage.variableHeader");
  var payload$3 = dart.privateName(mqtt_client, "MqttUnsubscribeMessage.payload");
  mqtt_client.MqttUnsubscribeMessage = class MqttUnsubscribeMessage extends mqtt_client.MqttMessage {
    get variableHeader() {
      return this[variableHeader$11];
    }
    set variableHeader(value) {
      this[variableHeader$11] = value;
    }
    get payload() {
      return this[payload$3];
    }
    set payload(value) {
      this[payload$3] = value;
    }
    writeTo(messageStream) {
      this.header.writeTo(dart.notNull(this.variableHeader.getWriteLength()) + dart.notNull(this.payload.getWriteLength()), messageStream);
      this.variableHeader.writeTo(messageStream);
      this.payload.writeTo(messageStream);
    }
    readFrom(messageStream) {
      this.variableHeader = new mqtt_client.MqttUnsubscribeVariableHeader.fromByteBuffer(messageStream);
      this.payload = new mqtt_client.MqttUnsubscribePayload.fromByteBuffer(this.header, this.variableHeader, messageStream);
    }
    fromTopic(topic) {
      this.payload.addSubscription(topic);
      return this;
    }
    withMessageIdentifier(messageIdentifier) {
      this.variableHeader.messageIdentifier = messageIdentifier;
      return this;
    }
    expectAcknowledgement() {
      this.header.withQos(mqtt_client.MqttQos.atLeastOnce);
      return this;
    }
    isDuplicate() {
      this.header.isDuplicate();
      return this;
    }
    toString() {
      let sb = new core.StringBuffer.new();
      sb.write(super.toString());
      sb.writeln(dart.toString(this.variableHeader));
      sb.writeln(dart.toString(this.payload));
      return sb.toString();
    }
  };
  (mqtt_client.MqttUnsubscribeMessage.new = function() {
    this[variableHeader$11] = null;
    this[payload$3] = null;
    mqtt_client.MqttUnsubscribeMessage.__proto__.new.call(this);
    this.header = new mqtt_client.MqttHeader.new().asType(mqtt_client.MqttMessageType.unsubscribe);
    this.variableHeader = new mqtt_client.MqttUnsubscribeVariableHeader.new();
    this.payload = new mqtt_client.MqttUnsubscribePayload.new();
  }).prototype = mqtt_client.MqttUnsubscribeMessage.prototype;
  (mqtt_client.MqttUnsubscribeMessage.fromByteBuffer = function(header, messageStream) {
    this[variableHeader$11] = null;
    this[payload$3] = null;
    mqtt_client.MqttUnsubscribeMessage.__proto__.new.call(this);
    this.header = header;
    this.readFrom(messageStream);
  }).prototype = mqtt_client.MqttUnsubscribeMessage.prototype;
  dart.addTypeTests(mqtt_client.MqttUnsubscribeMessage);
  dart.addTypeCaches(mqtt_client.MqttUnsubscribeMessage);
  dart.setMethodSignature(mqtt_client.MqttUnsubscribeMessage, () => ({
    __proto__: dart.getMethods(mqtt_client.MqttUnsubscribeMessage.__proto__),
    fromTopic: dart.fnType(dart.legacy(mqtt_client.MqttUnsubscribeMessage), [dart.legacy(core.String)]),
    withMessageIdentifier: dart.fnType(dart.legacy(mqtt_client.MqttUnsubscribeMessage), [dart.legacy(core.int)]),
    expectAcknowledgement: dart.fnType(dart.legacy(mqtt_client.MqttUnsubscribeMessage), []),
    isDuplicate: dart.fnType(dart.legacy(mqtt_client.MqttUnsubscribeMessage), [])
  }));
  dart.setLibraryUri(mqtt_client.MqttUnsubscribeMessage, I[0]);
  dart.setFieldSignature(mqtt_client.MqttUnsubscribeMessage, () => ({
    __proto__: dart.getFields(mqtt_client.MqttUnsubscribeMessage.__proto__),
    variableHeader: dart.fieldType(dart.legacy(mqtt_client.MqttUnsubscribeVariableHeader)),
    payload: dart.fieldType(dart.legacy(mqtt_client.MqttUnsubscribePayload))
  }));
  dart.defineExtensionMethods(mqtt_client.MqttUnsubscribeMessage, ['toString']);
  mqtt_client.MqttUnsubscribeAckVariableHeader = class MqttUnsubscribeAckVariableHeader extends mqtt_client.MqttVariableHeader {
    readFrom(variableHeaderStream) {
      this.readMessageIdentifier(variableHeaderStream);
    }
    writeTo(variableHeaderStream) {
      this.writeMessageIdentifier(variableHeaderStream);
    }
    getWriteLength() {
      return 2;
    }
    toString() {
      return "UnsubscribeAck Variable Header: MessageIdentifier={" + dart.str(this.messageIdentifier) + "}";
    }
  };
  (mqtt_client.MqttUnsubscribeAckVariableHeader.new = function() {
    mqtt_client.MqttUnsubscribeAckVariableHeader.__proto__.new.call(this);
    ;
  }).prototype = mqtt_client.MqttUnsubscribeAckVariableHeader.prototype;
  (mqtt_client.MqttUnsubscribeAckVariableHeader.fromByteBuffer = function(headerStream) {
    mqtt_client.MqttUnsubscribeAckVariableHeader.__proto__.new.call(this);
    this.readFrom(headerStream);
  }).prototype = mqtt_client.MqttUnsubscribeAckVariableHeader.prototype;
  dart.addTypeTests(mqtt_client.MqttUnsubscribeAckVariableHeader);
  dart.addTypeCaches(mqtt_client.MqttUnsubscribeAckVariableHeader);
  dart.setMethodSignature(mqtt_client.MqttUnsubscribeAckVariableHeader, () => ({
    __proto__: dart.getMethods(mqtt_client.MqttUnsubscribeAckVariableHeader.__proto__),
    toString: dart.fnType(dart.legacy(core.String), []),
    [$toString]: dart.fnType(dart.legacy(core.String), [])
  }));
  dart.setLibraryUri(mqtt_client.MqttUnsubscribeAckVariableHeader, I[0]);
  dart.defineExtensionMethods(mqtt_client.MqttUnsubscribeAckVariableHeader, ['toString']);
  var variableHeader$12 = dart.privateName(mqtt_client, "MqttUnsubscribeAckMessage.variableHeader");
  mqtt_client.MqttUnsubscribeAckMessage = class MqttUnsubscribeAckMessage extends mqtt_client.MqttMessage {
    get variableHeader() {
      return this[variableHeader$12];
    }
    set variableHeader(value) {
      this[variableHeader$12] = value;
    }
    writeTo(messageStream) {
      this.header.writeTo(this.variableHeader.getWriteLength(), messageStream);
      this.variableHeader.writeTo(messageStream);
    }
    readFrom(messageStream) {
      this.variableHeader = new mqtt_client.MqttUnsubscribeAckVariableHeader.fromByteBuffer(messageStream);
    }
    withMessageIdentifier(messageIdentifier) {
      this.variableHeader.messageIdentifier = messageIdentifier;
      return this;
    }
    toString() {
      let sb = new core.StringBuffer.new();
      sb.write(super.toString());
      sb.writeln(dart.toString(this.variableHeader));
      return sb.toString();
    }
  };
  (mqtt_client.MqttUnsubscribeAckMessage.new = function() {
    this[variableHeader$12] = null;
    mqtt_client.MqttUnsubscribeAckMessage.__proto__.new.call(this);
    this.header = new mqtt_client.MqttHeader.new().asType(mqtt_client.MqttMessageType.unsubscribeAck);
    this.variableHeader = new mqtt_client.MqttUnsubscribeAckVariableHeader.new();
  }).prototype = mqtt_client.MqttUnsubscribeAckMessage.prototype;
  (mqtt_client.MqttUnsubscribeAckMessage.fromByteBuffer = function(header, messageStream) {
    this[variableHeader$12] = null;
    mqtt_client.MqttUnsubscribeAckMessage.__proto__.new.call(this);
    this.header = header;
    this.readFrom(messageStream);
  }).prototype = mqtt_client.MqttUnsubscribeAckMessage.prototype;
  dart.addTypeTests(mqtt_client.MqttUnsubscribeAckMessage);
  dart.addTypeCaches(mqtt_client.MqttUnsubscribeAckMessage);
  dart.setMethodSignature(mqtt_client.MqttUnsubscribeAckMessage, () => ({
    __proto__: dart.getMethods(mqtt_client.MqttUnsubscribeAckMessage.__proto__),
    withMessageIdentifier: dart.fnType(dart.legacy(mqtt_client.MqttUnsubscribeAckMessage), [dart.legacy(core.int)])
  }));
  dart.setLibraryUri(mqtt_client.MqttUnsubscribeAckMessage, I[0]);
  dart.setFieldSignature(mqtt_client.MqttUnsubscribeAckMessage, () => ({
    __proto__: dart.getFields(mqtt_client.MqttUnsubscribeAckMessage.__proto__),
    variableHeader: dart.fieldType(dart.legacy(mqtt_client.MqttUnsubscribeAckVariableHeader))
  }));
  dart.defineExtensionMethods(mqtt_client.MqttUnsubscribeAckMessage, ['toString']);
  var header$4 = dart.privateName(mqtt_client, "MqttPublishPayload.header");
  var variableHeader$13 = dart.privateName(mqtt_client, "MqttPublishPayload.variableHeader");
  var message = dart.privateName(mqtt_client, "MqttPublishPayload.message");
  mqtt_client.MqttPublishPayload = class MqttPublishPayload extends mqtt_client.MqttPayload {
    get header() {
      return this[header$4];
    }
    set header(value) {
      this[header$4] = value;
    }
    get variableHeader() {
      return this[variableHeader$13];
    }
    set variableHeader(value) {
      this[variableHeader$13] = value;
    }
    get message() {
      return this[message];
    }
    set message(value) {
      this[message] = value;
    }
    readFrom(payloadStream) {
      let messageBytes = dart.notNull(this.header.messageSize) - dart.notNull(this.variableHeader.length);
      this.message = payloadStream.read(messageBytes);
    }
    writeTo(payloadStream) {
      payloadStream.write(this.message);
    }
    getWriteLength() {
      return this.message.length;
    }
    toString() {
      return "Payload: {" + dart.str(this.message.length) + " bytes={" + dart.str(mqtt_client.MqttPublishPayload.bytesToString(this.message));
    }
    static bytesToString(message) {
      let sb = new core.StringBuffer.new();
      for (let b of message) {
        sb.write("<");
        sb.write(b);
        sb.write(">");
      }
      return sb.toString();
    }
    static bytesToStringAsString(message) {
      let sb = new core.StringBuffer.new();
      message[$forEach](dart.bind(sb, 'writeCharCode'));
      return sb.toString();
    }
  };
  (mqtt_client.MqttPublishPayload.new = function() {
    this[message] = null;
    this[variableHeader$13] = null;
    this[header$4] = null;
    mqtt_client.MqttPublishPayload.__proto__.new.call(this);
    this.message = new typed_buffer.Uint8Buffer.new();
  }).prototype = mqtt_client.MqttPublishPayload.prototype;
  (mqtt_client.MqttPublishPayload.fromByteBuffer = function(header, variableHeader, payloadStream) {
    this[message] = null;
    this[header$4] = header;
    this[variableHeader$13] = variableHeader;
    mqtt_client.MqttPublishPayload.__proto__.new.call(this);
    this.readFrom(payloadStream);
  }).prototype = mqtt_client.MqttPublishPayload.prototype;
  dart.addTypeTests(mqtt_client.MqttPublishPayload);
  dart.addTypeCaches(mqtt_client.MqttPublishPayload);
  dart.setMethodSignature(mqtt_client.MqttPublishPayload, () => ({
    __proto__: dart.getMethods(mqtt_client.MqttPublishPayload.__proto__),
    readFrom: dart.fnType(dart.void, [dart.legacy(mqtt_client.MqttByteBuffer)]),
    writeTo: dart.fnType(dart.void, [dart.legacy(mqtt_client.MqttByteBuffer)]),
    getWriteLength: dart.fnType(dart.legacy(core.int), []),
    toString: dart.fnType(dart.legacy(core.String), []),
    [$toString]: dart.fnType(dart.legacy(core.String), [])
  }));
  dart.setLibraryUri(mqtt_client.MqttPublishPayload, I[0]);
  dart.setFieldSignature(mqtt_client.MqttPublishPayload, () => ({
    __proto__: dart.getFields(mqtt_client.MqttPublishPayload.__proto__),
    header: dart.fieldType(dart.legacy(mqtt_client.MqttHeader)),
    variableHeader: dart.fieldType(dart.legacy(mqtt_client.MqttPublishVariableHeader)),
    message: dart.fieldType(dart.legacy(typed_buffer.Uint8Buffer))
  }));
  dart.defineExtensionMethods(mqtt_client.MqttPublishPayload, ['toString']);
  mqtt_client.MqttMessageType = class MqttMessageType extends core.Object {
    toString() {
      return this[_name$];
    }
  };
  (mqtt_client.MqttMessageType.new = function(index, _name) {
    this.index = index;
    this[_name$] = _name;
    ;
  }).prototype = mqtt_client.MqttMessageType.prototype;
  dart.addTypeTests(mqtt_client.MqttMessageType);
  dart.addTypeCaches(mqtt_client.MqttMessageType);
  dart.setMethodSignature(mqtt_client.MqttMessageType, () => ({
    __proto__: dart.getMethods(mqtt_client.MqttMessageType.__proto__),
    toString: dart.fnType(dart.legacy(core.String), []),
    [$toString]: dart.fnType(dart.legacy(core.String), [])
  }));
  dart.setLibraryUri(mqtt_client.MqttMessageType, I[0]);
  dart.setFieldSignature(mqtt_client.MqttMessageType, () => ({
    __proto__: dart.getFields(mqtt_client.MqttMessageType.__proto__),
    index: dart.finalFieldType(dart.legacy(core.int)),
    [_name$]: dart.finalFieldType(dart.legacy(core.String))
  }));
  dart.defineExtensionMethods(mqtt_client.MqttMessageType, ['toString']);
  mqtt_client.MqttMessageType.reserved1 = C[44] || CT.C44;
  mqtt_client.MqttMessageType.connect = C[45] || CT.C45;
  mqtt_client.MqttMessageType.connectAck = C[46] || CT.C46;
  mqtt_client.MqttMessageType.publish = C[47] || CT.C47;
  mqtt_client.MqttMessageType.publishAck = C[48] || CT.C48;
  mqtt_client.MqttMessageType.publishReceived = C[49] || CT.C49;
  mqtt_client.MqttMessageType.publishRelease = C[50] || CT.C50;
  mqtt_client.MqttMessageType.publishComplete = C[51] || CT.C51;
  mqtt_client.MqttMessageType.subscribe = C[52] || CT.C52;
  mqtt_client.MqttMessageType.subscribeAck = C[53] || CT.C53;
  mqtt_client.MqttMessageType.unsubscribe = C[54] || CT.C54;
  mqtt_client.MqttMessageType.unsubscribeAck = C[55] || CT.C55;
  mqtt_client.MqttMessageType.pingRequest = C[56] || CT.C56;
  mqtt_client.MqttMessageType.pingResponse = C[57] || CT.C57;
  mqtt_client.MqttMessageType.disconnect = C[58] || CT.C58;
  mqtt_client.MqttMessageType.reserved2 = C[59] || CT.C59;
  mqtt_client.MqttMessageType.values = C[60] || CT.C60;
  mqtt_client.MqttMessageFactory = class MqttMessageFactory extends core.Object {
    static getMessage(header, messageStream) {
      let message = null;
      switch (header.messageType) {
        case C[45] || CT.C45:
        {
          message = new mqtt_client.MqttConnectMessage.fromByteBuffer(header, messageStream);
          break;
        }
        case C[46] || CT.C46:
        {
          message = new mqtt_client.MqttConnectAckMessage.fromByteBuffer(header, messageStream);
          break;
        }
        case C[47] || CT.C47:
        {
          message = new mqtt_client.MqttPublishMessage.fromByteBuffer(header, messageStream);
          break;
        }
        case C[48] || CT.C48:
        {
          message = new mqtt_client.MqttPublishAckMessage.fromByteBuffer(header, messageStream);
          break;
        }
        case C[51] || CT.C51:
        {
          message = new mqtt_client.MqttPublishCompleteMessage.fromByteBuffer(header, messageStream);
          break;
        }
        case C[49] || CT.C49:
        {
          message = new mqtt_client.MqttPublishReceivedMessage.fromByteBuffer(header, messageStream);
          break;
        }
        case C[50] || CT.C50:
        {
          message = new mqtt_client.MqttPublishReleaseMessage.fromByteBuffer(header, messageStream);
          break;
        }
        case C[52] || CT.C52:
        {
          message = new mqtt_client.MqttSubscribeMessage.fromByteBuffer(header, messageStream);
          break;
        }
        case C[53] || CT.C53:
        {
          message = new mqtt_client.MqttSubscribeAckMessage.fromByteBuffer(header, messageStream);
          break;
        }
        case C[54] || CT.C54:
        {
          message = new mqtt_client.MqttUnsubscribeMessage.fromByteBuffer(header, messageStream);
          break;
        }
        case C[55] || CT.C55:
        {
          message = new mqtt_client.MqttUnsubscribeAckMessage.fromByteBuffer(header, messageStream);
          break;
        }
        case C[56] || CT.C56:
        {
          message = new mqtt_client.MqttPingRequestMessage.fromHeader(header);
          break;
        }
        case C[57] || CT.C57:
        {
          message = new mqtt_client.MqttPingResponseMessage.fromHeader(header);
          break;
        }
        case C[58] || CT.C58:
        {
          message = new mqtt_client.MqttDisconnectMessage.fromHeader(header);
          break;
        }
        default:
        {
          dart.throw(new mqtt_client.InvalidHeaderException.new("The Message Type specified (" + dart.str(header) + ".messageType) is not a valid " + "MQTT Message type or currently not supported."));
        }
      }
      return message;
    }
  };
  (mqtt_client.MqttMessageFactory.new = function() {
    ;
  }).prototype = mqtt_client.MqttMessageFactory.prototype;
  dart.addTypeTests(mqtt_client.MqttMessageFactory);
  dart.addTypeCaches(mqtt_client.MqttMessageFactory);
  dart.setLibraryUri(mqtt_client.MqttMessageFactory, I[0]);
  dart.trackLibraries("packages/mqtt_client/mqtt_client.dart", {
    "package:mqtt_client/mqtt_client.dart": mqtt_client
  }, {
    "package:mqtt_client/mqtt_client.dart": ["src/mqtt_client.dart", "src/mqtt_client_constants.dart", "src/mqtt_client_protocol.dart", "src/mqtt_client_events.dart", "src/exception/mqtt_client_client_identifier_exception.dart", "src/exception/mqtt_client_connection_exception.dart", "src/exception/mqtt_client_noconnection_exception.dart", "src/exception/mqtt_client_invalid_header_exception.dart", "src/exception/mqtt_client_invalid_message_exception.dart", "src/exception/mqtt_client_invalid_payload_size_exception.dart", "src/exception/mqtt_client_invalid_topic_exception.dart", "src/connectionhandling/mqtt_client_connection_state.dart", "src/connectionhandling/mqtt_client_imqtt_connection_handler.dart", "src/connectionhandling/mqtt_client_mqtt_connection_handler.dart", "src/connectionhandling/mqtt_client_mqtt_connection.dart", "src/connectionhandling/mqtt_client_mqtt_normal_connection.dart", "src/connectionhandling/mqtt_client_mqtt_ws_connection.dart", "src/connectionhandling/mqtt_client_mqtt_secure_connection.dart", "src/connectionhandling/mqtt_client_mqtt_connection_keep_alive.dart", "src/connectionhandling/mqtt_client_synchronous_mqtt_connection_handler.dart", "src/mqtt_client_topic.dart", "src/mqtt_client_connection_status.dart", "src/mqtt_client_publication_topic.dart", "src/mqtt_client_subscription_topic.dart", "src/mqtt_client_subscription_status.dart", "src/mqtt_client_mqtt_qos.dart", "src/mqtt_client_mqtt_received_message.dart", "src/mqtt_client_publishing_manager.dart", "src/mqtt_client_ipublishing_manager.dart", "src/mqtt_client_subscription.dart", "src/mqtt_client_subscriptions_manager.dart", "src/mqtt_client_message_identifier_dispenser.dart", "src/dataconvertors/mqtt_client_payload_convertor.dart", "src/dataconvertors/mqtt_client_passthru_payload_convertor.dart", "src/encoding/mqtt_client_mqtt_encoding.dart", "src/dataconvertors/mqtt_client_ascii_payload_convertor.dart", "src/utility/mqtt_client_byte_buffer.dart", "src/utility/mqtt_client_utilities.dart", "src/utility/mqtt_client_logger.dart", "src/utility/mqtt_client_payload_builder.dart", "src/messages/mqtt_client_mqtt_header.dart", "src/messages/mqtt_client_mqtt_variable_header.dart", "src/messages/mqtt_client_mqtt_message.dart", "src/messages/connect/mqtt_client_mqtt_connect_return_code.dart", "src/messages/connect/mqtt_client_mqtt_connect_flags.dart", "src/messages/connect/mqtt_client_mqtt_connect_payload.dart", "src/messages/connect/mqtt_client_mqtt_connect_variable_header.dart", "src/messages/connect/mqtt_client_mqtt_connect_message.dart", "src/messages/connectack/mqtt_client_mqtt_connect_ack_variable_header.dart", "src/messages/connectack/mqtt_client_mqtt_connect_ack_message.dart", "src/messages/disconnect/mqtt_client_mqtt_disconnect_message.dart", "src/messages/pingrequest/mqtt_client_mqtt_ping_request_message.dart", "src/messages/pingresponse/mqtt_client_mqtt_ping_response_message.dart", "src/messages/publish/mqtt_client_mqtt_publish_message.dart", "src/messages/publish/mqtt_client_mqtt_publish_variable_header.dart", "src/messages/publishack/mqtt_client_mqtt_publish_ack_message.dart", "src/messages/publishack/mqtt_client_mqtt_publish_ack_variable_header.dart", "src/messages/publishcomplete/mqtt_client_mqtt_publish_complete_message.dart", "src/messages/publishcomplete/mqtt_client_mqtt_publish_complete_variable_header.dart", "src/messages/publishreceived/mqtt_client_mqtt_publish_received_message.dart", "src/messages/publishreceived/mqtt_client_mqtt_publish_received_variable_header.dart", "src/messages/publishrelease/mqtt_client_mqtt_publish_release_message.dart", "src/messages/publishrelease/mqtt_client_mqtt_publish_release_variable_header.dart", "src/messages/subscribe/mqtt_client_mqtt_subscribe_variable_header.dart", "src/messages/subscribe/mqtt_client_mqtt_subscribe_payload.dart", "src/messages/subscribe/mqtt_client_mqtt_subscribe_message.dart", "src/messages/subscribeack/mqtt_client_mqtt_subscribe_ack_variable_header.dart", "src/messages/subscribeack/mqtt_client_mqtt_subscribe_ack_message.dart", "src/messages/subscribeack/mqtt_client_mqtt_subscribe_ack_payload.dart", "src/messages/unsubscribe/mqtt_client_mqtt_unsubscribe_variable_header.dart", "src/messages/unsubscribe/mqtt_client_mqtt_unsubscribe_payload.dart", "src/messages/unsubscribe/mqtt_client_mqtt_unsubscribe_message.dart", "src/messages/unsubscribeack/mqtt_client_mqtt_unsubscribe_ack_variable_header.dart", "src/messages/unsubscribeack/mqtt_client_mqtt_unsubscribe_ack_message.dart", "src/messages/publish/mqtt_client_mqtt_publish_payload.dart", "src/messages/mqtt_client_mqtt_message_type.dart", "src/messages/mqtt_client_mqtt_message_factory.dart", "src/messages/mqtt_client_mqtt_payload.dart"]
  }, '{"version":3,"sourceRoot":"","sources":["src/mqtt_client.dart","src/mqtt_client_constants.dart","src/mqtt_client_protocol.dart","src/mqtt_client_events.dart","src/exception/mqtt_client_client_identifier_exception.dart","src/exception/mqtt_client_connection_exception.dart","src/exception/mqtt_client_noconnection_exception.dart","src/exception/mqtt_client_invalid_header_exception.dart","src/exception/mqtt_client_invalid_message_exception.dart","src/exception/mqtt_client_invalid_payload_size_exception.dart","src/exception/mqtt_client_invalid_topic_exception.dart","src/connectionhandling/mqtt_client_connection_state.dart","src/connectionhandling/mqtt_client_imqtt_connection_handler.dart","src/connectionhandling/mqtt_client_mqtt_connection_handler.dart","src/connectionhandling/mqtt_client_mqtt_connection.dart","src/connectionhandling/mqtt_client_mqtt_normal_connection.dart","src/connectionhandling/mqtt_client_mqtt_ws_connection.dart","src/connectionhandling/mqtt_client_mqtt_secure_connection.dart","src/connectionhandling/mqtt_client_mqtt_connection_keep_alive.dart","src/connectionhandling/mqtt_client_synchronous_mqtt_connection_handler.dart","src/mqtt_client_topic.dart","src/mqtt_client_connection_status.dart","src/mqtt_client_publication_topic.dart","src/mqtt_client_subscription_topic.dart","src/mqtt_client_subscription_status.dart","src/mqtt_client_mqtt_qos.dart","src/mqtt_client_mqtt_received_message.dart","src/mqtt_client_publishing_manager.dart","src/mqtt_client_ipublishing_manager.dart","src/mqtt_client_subscription.dart","src/mqtt_client_subscriptions_manager.dart","src/mqtt_client_message_identifier_dispenser.dart","src/dataconvertors/mqtt_client_payload_convertor.dart","src/dataconvertors/mqtt_client_passthru_payload_convertor.dart","src/encoding/mqtt_client_mqtt_encoding.dart","src/dataconvertors/mqtt_client_ascii_payload_convertor.dart","src/utility/mqtt_client_byte_buffer.dart","src/utility/mqtt_client_utilities.dart","src/utility/mqtt_client_logger.dart","src/utility/mqtt_client_payload_builder.dart","src/messages/mqtt_client_mqtt_header.dart","src/messages/mqtt_client_mqtt_variable_header.dart","src/messages/mqtt_client_mqtt_message.dart","src/messages/connect/mqtt_client_mqtt_connect_return_code.dart","src/messages/connect/mqtt_client_mqtt_connect_flags.dart","src/messages/mqtt_client_mqtt_payload.dart","src/messages/connect/mqtt_client_mqtt_connect_payload.dart","src/messages/connect/mqtt_client_mqtt_connect_variable_header.dart","src/messages/connect/mqtt_client_mqtt_connect_message.dart","src/messages/connectack/mqtt_client_mqtt_connect_ack_variable_header.dart","src/messages/connectack/mqtt_client_mqtt_connect_ack_message.dart","src/messages/disconnect/mqtt_client_mqtt_disconnect_message.dart","src/messages/pingrequest/mqtt_client_mqtt_ping_request_message.dart","src/messages/pingresponse/mqtt_client_mqtt_ping_response_message.dart","src/messages/publish/mqtt_client_mqtt_publish_message.dart","src/messages/publish/mqtt_client_mqtt_publish_variable_header.dart","src/messages/publishack/mqtt_client_mqtt_publish_ack_message.dart","src/messages/publishack/mqtt_client_mqtt_publish_ack_variable_header.dart","src/messages/publishcomplete/mqtt_client_mqtt_publish_complete_message.dart","src/messages/publishcomplete/mqtt_client_mqtt_publish_complete_variable_header.dart","src/messages/publishreceived/mqtt_client_mqtt_publish_received_message.dart","src/messages/publishreceived/mqtt_client_mqtt_publish_received_variable_header.dart","src/messages/publishrelease/mqtt_client_mqtt_publish_release_message.dart","src/messages/publishrelease/mqtt_client_mqtt_publish_release_variable_header.dart","src/messages/subscribe/mqtt_client_mqtt_subscribe_variable_header.dart","src/messages/subscribe/mqtt_client_mqtt_subscribe_payload.dart","src/messages/subscribe/mqtt_client_mqtt_subscribe_message.dart","src/messages/subscribeack/mqtt_client_mqtt_subscribe_ack_variable_header.dart","src/messages/subscribeack/mqtt_client_mqtt_subscribe_ack_message.dart","src/messages/subscribeack/mqtt_client_mqtt_subscribe_ack_payload.dart","src/messages/unsubscribe/mqtt_client_mqtt_unsubscribe_variable_header.dart","src/messages/unsubscribe/mqtt_client_mqtt_unsubscribe_payload.dart","src/messages/unsubscribe/mqtt_client_mqtt_unsubscribe_message.dart","src/messages/unsubscribeack/mqtt_client_mqtt_unsubscribe_ack_variable_header.dart","src/messages/unsubscribeack/mqtt_client_mqtt_unsubscribe_ack_message.dart","src/messages/publish/mqtt_client_mqtt_publish_payload.dart","src/messages/mqtt_client_mqtt_message_type.dart","src/messages/mqtt_client_mqtt_message_factory.dart"],"names":[],"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","file":"../../../../../../../packages/mqtt_client/mqtt_client.dart.lib.js"}');
  // Exports:
  return {
    mqtt_client: mqtt_client
  };
}));

//# sourceMappingURL=mqtt_client.dart.lib.js.map
