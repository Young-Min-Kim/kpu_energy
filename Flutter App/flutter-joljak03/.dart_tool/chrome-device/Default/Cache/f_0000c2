define(['dart_sdk', 'packages/syncfusion_flutter_sliders/src/constants.dart', 'packages/flutter/src/animation/listener_helpers.dart', 'packages/flutter/src/rendering/layer.dart', 'packages/syncfusion_flutter_core/src/theme/theme_widget.dart', 'packages/syncfusion_flutter_sliders/src/common.dart', 'packages/flutter/src/material/colors.dart', 'packages/flutter/src/painting/placeholder_span.dart', 'packages/flutter/src/painting/strut_style.dart', 'packages/flutter/src/gestures/hit_test.dart', 'packages/flutter/src/gestures/events.dart', 'packages/flutter/src/rendering/proxy_box.dart', 'packages/flutter/src/gestures/tap.dart', 'packages/intl/src/intl/number_parser.dart', 'packages/intl/src/intl/date_format.dart', 'packages/flutter/src/widgets/widget_span.dart', 'packages/flutter/src/gestures/monodrag.dart'], (function load__packages__syncfusion_flutter_sliders__src__slider_shapes_dart(dart_sdk, packages__syncfusion_flutter_sliders__src__constants$46dart, packages__flutter__src__animation__listener_helpers$46dart, packages__flutter__src__rendering__layer$46dart, packages__syncfusion_flutter_core__src__theme__theme_widget$46dart, packages__syncfusion_flutter_sliders__src__common$46dart, packages__flutter__src__material__colors$46dart, packages__flutter__src__painting__placeholder_span$46dart, packages__flutter__src__painting__strut_style$46dart, packages__flutter__src__gestures__hit_test$46dart, packages__flutter__src__gestures__events$46dart, packages__flutter__src__rendering__proxy_box$46dart, packages__flutter__src__gestures__tap$46dart, packages__intl__src__intl__number_parser$46dart, packages__intl__src__intl__date_format$46dart, packages__flutter__src__widgets__widget_span$46dart, packages__flutter__src__gestures__monodrag$46dart) {
  'use strict';
  const core = dart_sdk.core;
  const math = dart_sdk.math;
  const ui = dart_sdk.ui;
  const _internal = dart_sdk._internal;
  const _interceptors = dart_sdk._interceptors;
  const dart = dart_sdk.dart;
  const dartx = dart_sdk.dartx;
  const constants = packages__syncfusion_flutter_sliders__src__constants$46dart.src__constants;
  const tween = packages__flutter__src__animation__listener_helpers$46dart.src__animation__tween;
  const animation = packages__flutter__src__animation__listener_helpers$46dart.src__animation__animation;
  const box = packages__flutter__src__rendering__layer$46dart.src__rendering__box;
  const object = packages__flutter__src__rendering__layer$46dart.src__rendering__object;
  const slider_theme = packages__syncfusion_flutter_core__src__theme__theme_widget$46dart.src__theme__slider_theme;
  const range_slider_theme = packages__syncfusion_flutter_core__src__theme__theme_widget$46dart.src__theme__range_slider_theme;
  const range_selector_theme = packages__syncfusion_flutter_core__src__theme__theme_widget$46dart.src__theme__range_selector_theme;
  const common = packages__syncfusion_flutter_sliders__src__common$46dart.src__common;
  const colors = packages__flutter__src__material__colors$46dart.src__material__colors;
  const text_painter = packages__flutter__src__painting__placeholder_span$46dart.src__painting__text_painter;
  const text_span = packages__flutter__src__painting__placeholder_span$46dart.src__painting__text_span;
  const text_style = packages__flutter__src__painting__strut_style$46dart.src__painting__text_style;
  const hit_test = packages__flutter__src__gestures__hit_test$46dart.src__gestures__hit_test;
  const events = packages__flutter__src__gestures__events$46dart.src__gestures__events;
  const proxy_box = packages__flutter__src__rendering__proxy_box$46dart.src__rendering__proxy_box;
  const tap = packages__flutter__src__gestures__tap$46dart.src__gestures__tap;
  const number_format = packages__intl__src__intl__number_parser$46dart.src__intl__number_format;
  const date_format = packages__intl__src__intl__date_format$46dart.src__intl__date_format;
  const media_query = packages__flutter__src__widgets__widget_span$46dart.src__widgets__media_query;
  const monodrag = packages__flutter__src__gestures__monodrag$46dart.src__gestures__monodrag;
  var slider_shapes = Object.create(dart.library);
  var slider_base = Object.create(dart.library);
  var $toDouble = dartx.toDouble;
  var $runtimeType = dartx.runtimeType;
  var $reduce = dartx.reduce;
  var $toString = dartx.toString;
  var $clear = dartx.clear;
  var $add = dartx.add;
  var $contains = dartx.contains;
  var $length = dartx.length;
  var $_get = dartx._get;
  var $ceil = dartx.ceil;
  var $clamp = dartx.clamp;
  var $round = dartx.round;
  var $abs = dartx.abs;
  var $toInt = dartx.toInt;
  var $toStringAsFixed = dartx.toStringAsFixed;
  dart._checkModuleNullSafetyMode(false);
  var T = {
    VoidTobool: () => (T.VoidTobool = dart.constFn(dart.fnType(core.bool, [])))(),
    boolTodynamic: () => (T.boolTodynamic = dart.constFn(dart.fnType(dart.dynamic, [core.bool])))(),
    TweenOfdouble: () => (T.TweenOfdouble = dart.constFn(tween.Tween$(core.double)))(),
    JSArrayOfString: () => (T.JSArrayOfString = dart.constFn(_interceptors.JSArray$(core.String)))(),
    JSArrayOfdouble: () => (T.JSArrayOfdouble = dart.constFn(_interceptors.JSArray$(core.double)))(),
    TAndTToT: () => (T.TAndTToT = dart.constFn(dart.gFnType(T => [T, [T, T]], T => [core.num])))(),
    doubleN: () => (T.doubleN = dart.constFn(dart.nullable(core.double)))()
  };
  const CT = Object.create({
    _: () => (C, CT)
  });
  dart.defineLazy(CT, {
    get C0() {
      return C[0] = dart.const({
        __proto__: ui.TextDirection.prototype,
        [_name]: "TextDirection.ltr",
        index: 1
      });
    },
    get C1() {
      return C[1] = dart.const({
        __proto__: ui.TextDirection.prototype,
        [_name]: "TextDirection.rtl",
        index: 0
      });
    },
    get C2() {
      return C[2] = dart.const({
        __proto__: ui.Offset.prototype,
        [OffsetBase__dy]: 0,
        [OffsetBase__dx]: 0
      });
    },
    get C3() {
      return C[3] = dart.fn(math.max, T.TAndTToT());
    },
    get C4() {
      return C[4] = dart.const({
        __proto__: common.DateIntervalType.prototype,
        [_name$]: "DateIntervalType.months",
        index: 1
      });
    },
    get C5() {
      return C[5] = dart.const({
        __proto__: common.DateIntervalType.prototype,
        [_name$]: "DateIntervalType.days",
        index: 2
      });
    },
    get C6() {
      return C[6] = dart.const({
        __proto__: common.DateIntervalType.prototype,
        [_name$]: "DateIntervalType.hours",
        index: 3
      });
    },
    get C7() {
      return C[7] = dart.const({
        __proto__: common.DateIntervalType.prototype,
        [_name$]: "DateIntervalType.minutes",
        index: 4
      });
    },
    get C8() {
      return C[8] = dart.const({
        __proto__: common.DateIntervalType.prototype,
        [_name$]: "DateIntervalType.seconds",
        index: 5
      });
    },
    get C9() {
      return C[9] = dart.const({
        __proto__: common.DateIntervalType.prototype,
        [_name$]: "DateIntervalType.years",
        index: 0
      });
    }
  }, false);
  var C = Array(10).fill(void 0);
  var I = [
    "file:///C:/src/flutter/.pub-cache/hosted/pub.dartlang.org/syncfusion_flutter_sliders-19.2.49/lib/src/slider_shapes.dart",
    "package:syncfusion_flutter_sliders/src/slider_shapes.dart",
    "file:///C:/src/flutter/.pub-cache/hosted/pub.dartlang.org/syncfusion_flutter_sliders-19.2.49/lib/src/slider_base.dart",
    "package:syncfusion_flutter_sliders/src/slider_base.dart"
  ];
  var _isVertical = dart.privateName(slider_shapes, "_isVertical");
  var _drawTrackRect = dart.privateName(slider_shapes, "_drawTrackRect");
  var _drawRangeSliderTrack = dart.privateName(slider_shapes, "_drawRangeSliderTrack");
  var _drawSliderTrack = dart.privateName(slider_shapes, "_drawSliderTrack");
  slider_shapes.SfTrackShape = class SfTrackShape extends core.Object {
    [_isVertical](parentBox) {
      if (parentBox == null) dart.nullFailed(I[0], 18, 37, "parentBox");
      return parentBox.sliderType == constants.SliderType.vertical;
    }
    getPreferredRect(parentBox, themeData, offset, opts) {
      if (parentBox == null) dart.nullFailed(I[0], 24, 17, "parentBox");
      if (themeData == null) dart.nullFailed(I[0], 24, 46, "themeData");
      if (offset == null) dart.nullFailed(I[0], 24, 64, "offset");
      let isActive = opts && 'isActive' in opts ? opts.isActive : null;
      let maxRadius = math.max(core.double, themeData.overlayRadius, math.max(core.double, themeData.thumbRadius, dart.notNull(dart.nullCheck(themeData.tickSize).width) / 2));
      let maxTrackHeight = math.max(core.double, themeData.activeTrackHeight, themeData.inactiveTrackHeight);
      if (dart.test(this[_isVertical](slider_base.RenderBaseSlider.as(parentBox)))) {
        let left = offset.dx;
        if (isActive != null) {
          left = dart.notNull(left) + (dart.test(isActive) ? (maxTrackHeight - dart.notNull(themeData.activeTrackHeight)) / 2 : (maxTrackHeight - dart.notNull(themeData.inactiveTrackHeight)) / 2);
        }
        let right = dart.notNull(left) + dart.notNull(isActive == null ? maxTrackHeight : dart.test(isActive) ? themeData.activeTrackHeight : themeData.inactiveTrackHeight);
        let top = dart.notNull(offset.dy) + maxRadius;
        let bottom = top + dart.notNull(parentBox.size.height) - 2 * maxRadius;
        return new ui.Rect.fromLTRB(math.min(core.double, left, right), top, math.max(core.double, left, right), bottom);
      } else {
        let left = dart.notNull(offset.dx) + maxRadius;
        let top = offset.dy;
        if (isActive != null) {
          top = dart.notNull(top) + (dart.test(isActive) ? (maxTrackHeight - dart.notNull(themeData.activeTrackHeight)) / 2 : (maxTrackHeight - dart.notNull(themeData.inactiveTrackHeight)) / 2);
        }
        let right = left + dart.notNull(parentBox.size.width) - 2 * maxRadius;
        let bottom = dart.notNull(top) + dart.notNull(isActive == null ? maxTrackHeight : dart.test(isActive) ? themeData.activeTrackHeight : themeData.inactiveTrackHeight);
        return new ui.Rect.fromLTRB(math.min(core.double, left, right), top, math.max(core.double, left, right), bottom);
      }
    }
    paint(context, offset, thumbCenter, startThumbCenter, endThumbCenter, opts) {
      if (context == null) dart.nullFailed(I[0], 69, 30, "context");
      if (offset == null) dart.nullFailed(I[0], 69, 46, "offset");
      let parentBox = opts && 'parentBox' in opts ? opts.parentBox : null;
      if (parentBox == null) dart.nullFailed(I[0], 71, 27, "parentBox");
      let themeData = opts && 'themeData' in opts ? opts.themeData : null;
      if (themeData == null) dart.nullFailed(I[0], 72, 34, "themeData");
      let currentValues = opts && 'currentValues' in opts ? opts.currentValues : null;
      let currentValue = opts && 'currentValue' in opts ? opts.currentValue : null;
      let enableAnimation = opts && 'enableAnimation' in opts ? opts.enableAnimation : null;
      if (enableAnimation == null) dart.nullFailed(I[0], 75, 34, "enableAnimation");
      let inactivePaint = opts && 'inactivePaint' in opts ? opts.inactivePaint : null;
      let activePaint = opts && 'activePaint' in opts ? opts.activePaint : null;
      let textDirection = opts && 'textDirection' in opts ? opts.textDirection : null;
      if (textDirection == null) dart.nullFailed(I[0], 78, 30, "textDirection");
      let radius = new ui.Radius.circular(dart.nullCheck(themeData.trackCornerRadius));
      let inactiveTrackRect = this.getPreferredRect(parentBox, themeData, offset, {isActive: false});
      let activeTrackRect = this.getPreferredRect(parentBox, themeData, offset, {isActive: true});
      if (inactivePaint == null) {
        inactivePaint = ui.Paint.new();
        let inactiveTrackColorTween = new tween.ColorTween.new({begin: themeData.disabledInactiveTrackColor, end: themeData.inactiveTrackColor});
        inactivePaint.color = dart.nullCheck(inactiveTrackColorTween.evaluate(enableAnimation));
      }
      if (activePaint == null) {
        activePaint = ui.Paint.new();
        let activeTrackColorTween = new tween.ColorTween.new({begin: themeData.disabledActiveTrackColor, end: themeData.activeTrackColor});
        activePaint.color = dart.nullCheck(activeTrackColorTween.evaluate(enableAnimation));
      }
      this[_drawTrackRect](textDirection, thumbCenter, startThumbCenter, endThumbCenter, activePaint, inactivePaint, inactiveTrackRect, radius, context, activeTrackRect, {isVertical: this[_isVertical](slider_base.RenderBaseSlider.as(parentBox))});
    }
    [_drawTrackRect](textDirection, thumbCenter, startThumbCenter, endThumbCenter, activePaint, inactivePaint, inactiveTrackRect, radius, context, activeTrackRect, opts) {
      if (activePaint == null) dart.nullFailed(I[0], 121, 13, "activePaint");
      if (inactivePaint == null) dart.nullFailed(I[0], 122, 13, "inactivePaint");
      if (inactiveTrackRect == null) dart.nullFailed(I[0], 123, 12, "inactiveTrackRect");
      if (radius == null) dart.nullFailed(I[0], 124, 14, "radius");
      if (context == null) dart.nullFailed(I[0], 125, 23, "context");
      if (activeTrackRect == null) dart.nullFailed(I[0], 126, 12, "activeTrackRect");
      let isVertical = opts && 'isVertical' in opts ? opts.isVertical : null;
      if (isVertical == null) dart.nullFailed(I[0], 127, 22, "isVertical");
      let leftThumbCenter = null;
      let rightThumbCenter = null;
      let leftTrackPaint = null;
      let rightTrackPaint = null;
      let leftTrackRect = null;
      let rightTrackRect = null;
      if (textDirection == ui.TextDirection.rtl && !dart.test(isVertical)) {
        if (startThumbCenter != null) {
          leftThumbCenter = endThumbCenter;
          rightThumbCenter = startThumbCenter;
        } else {
          leftTrackPaint = inactivePaint;
          rightTrackPaint = activePaint;
          leftTrackRect = inactiveTrackRect;
          rightTrackRect = activeTrackRect;
        }
      } else {
        if (startThumbCenter != null) {
          leftThumbCenter = startThumbCenter;
          rightThumbCenter = endThumbCenter;
        } else {
          leftTrackPaint = activePaint;
          rightTrackPaint = inactivePaint;
          leftTrackRect = activeTrackRect;
          rightTrackRect = inactiveTrackRect;
        }
      }
      if (leftThumbCenter != null && rightThumbCenter != null) {
        this[_drawRangeSliderTrack](inactiveTrackRect, leftThumbCenter, radius, context, inactivePaint, activeTrackRect, rightThumbCenter, activePaint, {isVertical: isVertical});
      } else {
        this[_drawSliderTrack](dart.nullCheck(leftTrackRect), dart.nullCheck(thumbCenter), radius, context, dart.nullCheck(leftTrackPaint), dart.nullCheck(rightTrackRect), dart.nullCheck(rightTrackPaint), {isVertical: isVertical});
      }
    }
    [_drawSliderTrack](activeTrackRect, thumbCenter, radius, context, activePaint, inactiveTrackRect, inactivePaint, opts) {
      if (activeTrackRect == null) dart.nullFailed(I[0], 174, 12, "activeTrackRect");
      if (thumbCenter == null) dart.nullFailed(I[0], 175, 14, "thumbCenter");
      if (radius == null) dart.nullFailed(I[0], 176, 14, "radius");
      if (context == null) dart.nullFailed(I[0], 177, 23, "context");
      if (activePaint == null) dart.nullFailed(I[0], 178, 13, "activePaint");
      if (inactiveTrackRect == null) dart.nullFailed(I[0], 179, 12, "inactiveTrackRect");
      if (inactivePaint == null) dart.nullFailed(I[0], 180, 13, "inactivePaint");
      let isVertical = opts && 'isVertical' in opts ? opts.isVertical : null;
      if (isVertical == null) dart.nullFailed(I[0], 181, 22, "isVertical");
      let inactiveTrackRRect = null;
      if (dart.test(isVertical)) {
        let trackRect = new ui.Rect.fromLTRB(activeTrackRect.left, thumbCenter.dy, activeTrackRect.right, activeTrackRect.bottom);
        let activeTrackRRect = new ui.RRect.fromRectAndCorners(trackRect, {bottomRight: radius, bottomLeft: radius});
        context.canvas.drawRRect(activeTrackRRect, activePaint);
        trackRect = new ui.Rect.fromLTRB(inactiveTrackRect.left, inactiveTrackRect.top, inactiveTrackRect.right, thumbCenter.dy);
        inactiveTrackRRect = new ui.RRect.fromRectAndCorners(trackRect, {topLeft: radius, topRight: radius, bottomLeft: ui.Radius.zero, bottomRight: ui.Radius.zero});
        context.canvas.drawRRect(inactiveTrackRRect, inactivePaint);
      } else {
        let trackRect = new ui.Rect.fromLTRB(activeTrackRect.left, activeTrackRect.top, thumbCenter.dx, activeTrackRect.bottom);
        let activeTrackRRect = new ui.RRect.fromRectAndCorners(trackRect, {topLeft: radius, bottomLeft: radius});
        context.canvas.drawRRect(activeTrackRRect, activePaint);
        trackRect = new ui.Rect.fromLTRB(thumbCenter.dx, inactiveTrackRect.top, dart.notNull(inactiveTrackRect.width) + dart.notNull(inactiveTrackRect.left), inactiveTrackRect.bottom);
        inactiveTrackRRect = new ui.RRect.fromRectAndCorners(trackRect, {topLeft: ui.Radius.zero, topRight: radius, bottomLeft: ui.Radius.zero, bottomRight: radius});
        context.canvas.drawRRect(inactiveTrackRRect, inactivePaint);
      }
    }
    [_drawRangeSliderTrack](inactiveTrackRect, startThumbCenter, radius, context, inactivePaint, activeTrackRect, endThumbCenter, activePaint, opts) {
      if (inactiveTrackRect == null) dart.nullFailed(I[0], 224, 12, "inactiveTrackRect");
      if (startThumbCenter == null) dart.nullFailed(I[0], 225, 14, "startThumbCenter");
      if (radius == null) dart.nullFailed(I[0], 226, 14, "radius");
      if (context == null) dart.nullFailed(I[0], 227, 23, "context");
      if (inactivePaint == null) dart.nullFailed(I[0], 228, 13, "inactivePaint");
      if (activeTrackRect == null) dart.nullFailed(I[0], 229, 12, "activeTrackRect");
      if (endThumbCenter == null) dart.nullFailed(I[0], 230, 14, "endThumbCenter");
      if (activePaint == null) dart.nullFailed(I[0], 231, 13, "activePaint");
      let isVertical = opts && 'isVertical' in opts ? opts.isVertical : false;
      if (isVertical == null) dart.nullFailed(I[0], 232, 13, "isVertical");
      let inactiveTrackRRect = null;
      if (dart.test(isVertical)) {
        let trackRect = new ui.Rect.fromLTRB(inactiveTrackRect.left, startThumbCenter.dy, inactiveTrackRect.right, inactiveTrackRect.bottom);
        inactiveTrackRRect = new ui.RRect.fromRectAndCorners(trackRect, {bottomLeft: radius, bottomRight: radius});
        context.canvas.drawRRect(inactiveTrackRRect, inactivePaint);
        let activeTrackRRect = new ui.Rect.fromLTRB(activeTrackRect.left, startThumbCenter.dy, activeTrackRect.right, endThumbCenter.dy);
        context.canvas.drawRect(activeTrackRRect, activePaint);
        trackRect = new ui.Rect.fromLTRB(inactiveTrackRect.left, inactiveTrackRect.top, inactiveTrackRect.right, endThumbCenter.dy);
        inactiveTrackRRect = new ui.RRect.fromRectAndCorners(trackRect, {topLeft: radius, topRight: radius, bottomLeft: ui.Radius.zero, bottomRight: ui.Radius.zero});
        context.canvas.drawRRect(inactiveTrackRRect, inactivePaint);
      } else {
        let trackRect = new ui.Rect.fromLTRB(inactiveTrackRect.left, inactiveTrackRect.top, startThumbCenter.dx, inactiveTrackRect.bottom);
        inactiveTrackRRect = new ui.RRect.fromRectAndCorners(trackRect, {topLeft: radius, bottomLeft: radius});
        context.canvas.drawRRect(inactiveTrackRRect, inactivePaint);
        let activeTrackRRect = new ui.Rect.fromLTRB(startThumbCenter.dx, activeTrackRect.top, endThumbCenter.dx, activeTrackRect.bottom);
        context.canvas.drawRect(activeTrackRRect, activePaint);
        trackRect = new ui.Rect.fromLTRB(endThumbCenter.dx, inactiveTrackRect.top, dart.notNull(inactiveTrackRect.width) + dart.notNull(inactiveTrackRect.left), inactiveTrackRect.bottom);
        inactiveTrackRRect = new ui.RRect.fromRectAndCorners(trackRect, {topLeft: ui.Radius.zero, topRight: radius, bottomLeft: ui.Radius.zero, bottomRight: radius});
        context.canvas.drawRRect(inactiveTrackRRect, inactivePaint);
      }
    }
  };
  (slider_shapes.SfTrackShape.new = function() {
    ;
  }).prototype = slider_shapes.SfTrackShape.prototype;
  dart.addTypeTests(slider_shapes.SfTrackShape);
  dart.addTypeCaches(slider_shapes.SfTrackShape);
  dart.setMethodSignature(slider_shapes.SfTrackShape, () => ({
    __proto__: dart.getMethods(slider_shapes.SfTrackShape.__proto__),
    [_isVertical]: dart.fnType(core.bool, [slider_base.RenderBaseSlider]),
    getPreferredRect: dart.fnType(ui.Rect, [box.RenderBox, slider_theme.SfSliderThemeData, ui.Offset], {isActive: dart.nullable(core.bool)}, {}),
    paint: dart.fnType(dart.void, [object.PaintingContext, ui.Offset, dart.nullable(ui.Offset), dart.nullable(ui.Offset), dart.nullable(ui.Offset)], {currentValue: dart.dynamic, currentValues: dart.nullable(common.SfRangeValues)}, {activePaint: dart.nullable(ui.Paint), enableAnimation: animation.Animation$(core.double), inactivePaint: dart.nullable(ui.Paint), parentBox: box.RenderBox, textDirection: ui.TextDirection, themeData: slider_theme.SfSliderThemeData}),
    [_drawTrackRect]: dart.fnType(dart.void, [dart.nullable(ui.TextDirection), dart.nullable(ui.Offset), dart.nullable(ui.Offset), dart.nullable(ui.Offset), ui.Paint, ui.Paint, ui.Rect, ui.Radius, object.PaintingContext, ui.Rect], {}, {isVertical: core.bool}),
    [_drawSliderTrack]: dart.fnType(dart.void, [ui.Rect, ui.Offset, ui.Radius, object.PaintingContext, ui.Paint, ui.Rect, ui.Paint], {}, {isVertical: core.bool}),
    [_drawRangeSliderTrack]: dart.fnType(dart.void, [ui.Rect, ui.Offset, ui.Radius, object.PaintingContext, ui.Paint, ui.Rect, ui.Offset, ui.Paint], {isVertical: core.bool}, {})
  }));
  dart.setLibraryUri(slider_shapes.SfTrackShape, I[1]);
  var _isThumbOverlap = dart.privateName(slider_shapes, "_isThumbOverlap");
  slider_shapes.SfThumbShape = class SfThumbShape extends core.Object {
    [_isThumbOverlap](parentBox) {
      if (parentBox == null) dart.nullFailed(I[0], 294, 41, "parentBox");
      return parentBox.showOverlappingThumbStroke;
    }
    getPreferredSize(themeData) {
      if (themeData == null) dart.nullFailed(I[0], 299, 43, "themeData");
      return new ui.Size.fromRadius(themeData.thumbRadius);
    }
    paint(context, center, opts) {
      let t0, t0$;
      if (context == null) dart.nullFailed(I[0], 304, 30, "context");
      if (center == null) dart.nullFailed(I[0], 304, 46, "center");
      let parentBox = opts && 'parentBox' in opts ? opts.parentBox : null;
      if (parentBox == null) dart.nullFailed(I[0], 305, 27, "parentBox");
      let child = opts && 'child' in opts ? opts.child : null;
      let themeData = opts && 'themeData' in opts ? opts.themeData : null;
      if (themeData == null) dart.nullFailed(I[0], 307, 34, "themeData");
      let currentValues = opts && 'currentValues' in opts ? opts.currentValues : null;
      let currentValue = opts && 'currentValue' in opts ? opts.currentValue : null;
      let paint = opts && 'paint' in opts ? opts.paint : null;
      let enableAnimation = opts && 'enableAnimation' in opts ? opts.enableAnimation : null;
      if (enableAnimation == null) dart.nullFailed(I[0], 311, 34, "enableAnimation");
      let textDirection = opts && 'textDirection' in opts ? opts.textDirection : null;
      if (textDirection == null) dart.nullFailed(I[0], 312, 30, "textDirection");
      let thumb = opts && 'thumb' in opts ? opts.thumb : null;
      let radius = dart.notNull(this.getPreferredSize(themeData).width) / 2;
      let isThumbStroke = themeData.thumbStrokeColor != null && !dart.equals(themeData.thumbStrokeColor, colors.Colors.transparent) && themeData.thumbStrokeWidth != null && dart.nullCheck(themeData.thumbStrokeWidth) > 0;
      let showThumbShadow = !dart.equals(themeData.thumbColor, colors.Colors.transparent);
      let parentRenderBox = slider_base.RenderBaseSlider.as(parentBox);
      if (showThumbShadow) {
        let path = ui.Path.new();
        let isThumbActive = (parentRenderBox.activeThumb == thumb || thumb == null) && parentRenderBox.currentPointerType != null && parentRenderBox.currentPointerType != constants.PointerType.up;
        path.addOval(new ui.Rect.fromCircle({center: center, radius: themeData.thumbRadius}));
        let thumbElevation = isThumbActive ? parentRenderBox.thumbElevationTween.evaluate(enableAnimation) : 1;
        context.canvas.drawShadow(path, constants.shadowColor, thumbElevation, true);
      }
      if (!isThumbStroke && dart.test(this[_isThumbOverlap](parentBox)) && !dart.equals(themeData.thumbColor, colors.Colors.transparent)) {
        let thumbOverlappingStrokeColor = range_slider_theme.SfRangeSliderThemeData.is(themeData) ? themeData.overlappingThumbStrokeColor : null;
        if (thumbOverlappingStrokeColor != null) {
          let strokePaint = (t0 = ui.Paint.new(), (() => {
            t0.color = thumbOverlappingStrokeColor;
            t0.style = ui.PaintingStyle.stroke;
            t0.strokeWidth = 1.0;
            return t0;
          })());
          context.canvas.drawCircle(center, dart.notNull(this.getPreferredSize(themeData).width) / 2, strokePaint);
        }
      }
      if (paint == null) {
        paint = ui.Paint.new();
        paint.isAntiAlias = true;
        paint.color = dart.nullCheck(new tween.ColorTween.new({begin: themeData.disabledThumbColor, end: themeData.thumbColor}).evaluate(enableAnimation));
      }
      context.canvas.drawCircle(center, dart.notNull(this.getPreferredSize(themeData).width) / 2, paint);
      if (child != null) {
        context.paintChild(child, new ui.Offset.new(dart.notNull(center.dx) - dart.notNull(child.size.width) / 2, dart.notNull(center.dy) - dart.notNull(child.size.height) / 2));
      }
      if (themeData.thumbStrokeColor != null && themeData.thumbStrokeWidth != null && dart.nullCheck(themeData.thumbStrokeWidth) > 0) {
        context.canvas.drawCircle(center, dart.nullCheck(themeData.thumbStrokeWidth) > radius ? radius / 2 : radius - dart.nullCheck(themeData.thumbStrokeWidth) / 2, (t0$ = paint, (() => {
          t0$.color = dart.nullCheck(themeData.thumbStrokeColor);
          t0$.style = ui.PaintingStyle.stroke;
          t0$.strokeWidth = dart.nullCheck(themeData.thumbStrokeWidth) > radius ? radius : dart.nullCheck(themeData.thumbStrokeWidth);
          return t0$;
        })()));
      }
    }
  };
  (slider_shapes.SfThumbShape.new = function() {
    ;
  }).prototype = slider_shapes.SfThumbShape.prototype;
  dart.addTypeTests(slider_shapes.SfThumbShape);
  dart.addTypeCaches(slider_shapes.SfThumbShape);
  dart.setMethodSignature(slider_shapes.SfThumbShape, () => ({
    __proto__: dart.getMethods(slider_shapes.SfThumbShape.__proto__),
    [_isThumbOverlap]: dart.fnType(core.bool, [slider_base.RenderBaseSlider]),
    getPreferredSize: dart.fnType(ui.Size, [slider_theme.SfSliderThemeData]),
    paint: dart.fnType(dart.void, [object.PaintingContext, ui.Offset], {currentValue: dart.dynamic, currentValues: dart.nullable(common.SfRangeValues)}, {child: dart.nullable(box.RenderBox), enableAnimation: animation.Animation$(core.double), paint: dart.nullable(ui.Paint), parentBox: box.RenderBox, textDirection: ui.TextDirection, themeData: slider_theme.SfSliderThemeData, thumb: dart.nullable(common.SfThumb)})
  }));
  dart.setLibraryUri(slider_shapes.SfThumbShape, I[1]);
  var _name = dart.privateName(ui, "_name");
  slider_shapes.SfDividerShape = class SfDividerShape extends core.Object {
    [_isVertical](parentBox) {
      if (parentBox == null) dart.nullFailed(I[0], 397, 37, "parentBox");
      return parentBox.sliderType == constants.SliderType.vertical;
    }
    getPreferredSize(themeData, opts) {
      if (themeData == null) dart.nullFailed(I[0], 402, 43, "themeData");
      let isActive = opts && 'isActive' in opts ? opts.isActive : null;
      return new ui.Size.fromRadius(isActive != null ? dart.test(isActive) ? dart.nullCheck(themeData.activeDividerRadius) : dart.nullCheck(themeData.inactiveDividerRadius) : 0.0);
    }
    paint(context, center, thumbCenter, startThumbCenter, endThumbCenter, opts) {
      let t5;
      if (context == null) dart.nullFailed(I[0], 411, 30, "context");
      if (center == null) dart.nullFailed(I[0], 411, 46, "center");
      let parentBox = opts && 'parentBox' in opts ? opts.parentBox : null;
      if (parentBox == null) dart.nullFailed(I[0], 413, 27, "parentBox");
      let themeData = opts && 'themeData' in opts ? opts.themeData : null;
      if (themeData == null) dart.nullFailed(I[0], 414, 34, "themeData");
      let currentValues = opts && 'currentValues' in opts ? opts.currentValues : null;
      let currentValue = opts && 'currentValue' in opts ? opts.currentValue : null;
      let paint = opts && 'paint' in opts ? opts.paint : null;
      let enableAnimation = opts && 'enableAnimation' in opts ? opts.enableAnimation : null;
      if (enableAnimation == null) dart.nullFailed(I[0], 418, 34, "enableAnimation");
      let textDirection = opts && 'textDirection' in opts ? opts.textDirection : null;
      if (textDirection == null) dart.nullFailed(I[0], 419, 30, "textDirection");
      let isActive = null;
      let isActive$35isSet = false;
      function isActive$35get() {
        return isActive$35isSet ? isActive : dart.throw(new _internal.LateError.localNI("isActive"));
      }
      dart.fn(isActive$35get, T.VoidTobool());
      function isActive$35set(t3) {
        if (t3 == null) dart.nullFailed(I[0], 420, 15, "null");
        isActive$35isSet = true;
        return isActive = t3;
      }
      dart.fn(isActive$35set, T.boolTodynamic());
      switch (textDirection) {
        case C[0] || CT.C0:
        {
          isActive$35set(startThumbCenter != null ? dart.test(this[_isVertical](slider_base.RenderBaseSlider.as(parentBox))) ? dart.notNull(center.dy) <= dart.notNull(startThumbCenter.dy) && dart.notNull(center.dy) >= dart.notNull(dart.nullCheck(endThumbCenter).dy) : dart.notNull(center.dx) >= dart.notNull(startThumbCenter.dx) && dart.notNull(center.dx) <= dart.notNull(dart.nullCheck(endThumbCenter).dx) : dart.test(this[_isVertical](slider_base.RenderBaseSlider.as(parentBox))) ? dart.notNull(center.dy) >= dart.notNull(dart.nullCheck(thumbCenter).dy) : dart.notNull(center.dx) <= dart.notNull(dart.nullCheck(thumbCenter).dx));
          break;
        }
        case C[1] || CT.C1:
        {
          isActive$35set(startThumbCenter != null ? dart.test(this[_isVertical](slider_base.RenderBaseSlider.as(parentBox))) ? dart.notNull(center.dy) <= dart.notNull(startThumbCenter.dy) && dart.notNull(center.dy) >= dart.notNull(dart.nullCheck(endThumbCenter).dy) : dart.notNull(center.dx) >= dart.notNull(dart.nullCheck(endThumbCenter).dx) && dart.notNull(center.dx) <= dart.notNull(startThumbCenter.dx) : dart.test(this[_isVertical](slider_base.RenderBaseSlider.as(parentBox))) ? dart.notNull(center.dy) >= dart.notNull(dart.nullCheck(thumbCenter).dy) : dart.notNull(center.dx) >= dart.notNull(dart.nullCheck(thumbCenter).dx));
          break;
        }
        default:
        {
          dart.throw(new _internal.ReachabilityError.new("`null` encountered as case in a switch expression with a non-nullable enum type."));
        }
      }
      if (paint == null) {
        paint = ui.Paint.new();
        let begin = dart.test(isActive$35get()) ? dart.nullCheck(themeData.disabledActiveDividerColor) : dart.nullCheck(themeData.disabledInactiveDividerColor);
        let end = dart.test(isActive$35get()) ? dart.nullCheck(themeData.activeDividerColor) : dart.nullCheck(themeData.inactiveDividerColor);
        paint.color = dart.nullCheck(new tween.ColorTween.new({begin: begin, end: end}).evaluate(enableAnimation));
      }
      let dividerRadius = dart.notNull(this.getPreferredSize(themeData, {isActive: isActive$35get()}).width) / 2;
      context.canvas.drawCircle(center, dividerRadius, paint);
      let dividerStrokeWidth = dart.test(isActive$35get()) ? themeData.activeDividerStrokeWidth : themeData.inactiveDividerStrokeWidth;
      let dividerStrokeColor = dart.test(isActive$35get()) ? themeData.activeDividerStrokeColor : themeData.inactiveDividerStrokeColor;
      if (dividerStrokeColor != null && dividerStrokeWidth != null && dart.notNull(dividerStrokeWidth) > 0) {
        context.canvas.drawCircle(center, dart.notNull(dividerStrokeWidth) > dividerRadius ? dividerRadius / 2 : dividerRadius - dart.notNull(dividerStrokeWidth) / 2, (t5 = paint, (() => {
          t5.color = dividerStrokeColor;
          t5.style = ui.PaintingStyle.stroke;
          t5.strokeWidth = dart.notNull(dividerStrokeWidth) > dividerRadius ? dividerRadius : dividerStrokeWidth;
          return t5;
        })()));
      }
    }
  };
  (slider_shapes.SfDividerShape.new = function() {
    ;
  }).prototype = slider_shapes.SfDividerShape.prototype;
  dart.addTypeTests(slider_shapes.SfDividerShape);
  dart.addTypeCaches(slider_shapes.SfDividerShape);
  dart.setMethodSignature(slider_shapes.SfDividerShape, () => ({
    __proto__: dart.getMethods(slider_shapes.SfDividerShape.__proto__),
    [_isVertical]: dart.fnType(core.bool, [slider_base.RenderBaseSlider]),
    getPreferredSize: dart.fnType(ui.Size, [slider_theme.SfSliderThemeData], {isActive: dart.nullable(core.bool)}, {}),
    paint: dart.fnType(dart.void, [object.PaintingContext, ui.Offset, dart.nullable(ui.Offset), dart.nullable(ui.Offset), dart.nullable(ui.Offset)], {currentValue: dart.dynamic, currentValues: dart.nullable(common.SfRangeValues)}, {enableAnimation: animation.Animation$(core.double), paint: dart.nullable(ui.Paint), parentBox: box.RenderBox, textDirection: ui.TextDirection, themeData: slider_theme.SfSliderThemeData})
  }));
  dart.setLibraryUri(slider_shapes.SfDividerShape, I[1]);
  slider_shapes.SfOverlayShape = class SfOverlayShape extends core.Object {
    getPreferredSize(themeData) {
      if (themeData == null) dart.nullFailed(I[0], 502, 43, "themeData");
      return new ui.Size.fromRadius(themeData.overlayRadius);
    }
    paint(context, center, opts) {
      if (context == null) dart.nullFailed(I[0], 507, 30, "context");
      if (center == null) dart.nullFailed(I[0], 507, 46, "center");
      let parentBox = opts && 'parentBox' in opts ? opts.parentBox : null;
      if (parentBox == null) dart.nullFailed(I[0], 508, 27, "parentBox");
      let themeData = opts && 'themeData' in opts ? opts.themeData : null;
      if (themeData == null) dart.nullFailed(I[0], 509, 34, "themeData");
      let currentValues = opts && 'currentValues' in opts ? opts.currentValues : null;
      let currentValue = opts && 'currentValue' in opts ? opts.currentValue : null;
      let paint = opts && 'paint' in opts ? opts.paint : null;
      let animation = opts && 'animation' in opts ? opts.animation : null;
      if (animation == null) dart.nullFailed(I[0], 513, 34, "animation");
      let thumb = opts && 'thumb' in opts ? opts.thumb : null;
      let radius = dart.notNull(this.getPreferredSize(themeData).width) / 2;
      let tween = new (T.TweenOfdouble()).new({begin: 0.0, end: radius});
      if (paint == null) {
        paint = ui.Paint.new();
        paint.color = dart.nullCheck(themeData.overlayColor);
      }
      context.canvas.drawCircle(center, tween.evaluate(animation), paint);
    }
  };
  (slider_shapes.SfOverlayShape.new = function() {
    ;
  }).prototype = slider_shapes.SfOverlayShape.prototype;
  dart.addTypeTests(slider_shapes.SfOverlayShape);
  dart.addTypeCaches(slider_shapes.SfOverlayShape);
  dart.setMethodSignature(slider_shapes.SfOverlayShape, () => ({
    __proto__: dart.getMethods(slider_shapes.SfOverlayShape.__proto__),
    getPreferredSize: dart.fnType(ui.Size, [slider_theme.SfSliderThemeData]),
    paint: dart.fnType(dart.void, [object.PaintingContext, ui.Offset], {currentValue: dart.dynamic, currentValues: dart.nullable(common.SfRangeValues)}, {animation: animation.Animation$(core.double), paint: dart.nullable(ui.Paint), parentBox: box.RenderBox, themeData: slider_theme.SfSliderThemeData, thumb: dart.nullable(common.SfThumb)})
  }));
  dart.setLibraryUri(slider_shapes.SfOverlayShape, I[1]);
  slider_shapes.SfTickShape = class SfTickShape extends core.Object {
    [_isVertical](parentBox) {
      if (parentBox == null) dart.nullFailed(I[0], 532, 37, "parentBox");
      return parentBox.sliderType == constants.SliderType.vertical;
    }
    getPreferredSize(themeData) {
      if (themeData == null) dart.nullFailed(I[0], 537, 43, "themeData");
      return new ui.Size.copy(dart.nullCheck(themeData.tickSize));
    }
    paint(context, offset, thumbCenter, startThumbCenter, endThumbCenter, opts) {
      let t5;
      if (context == null) dart.nullFailed(I[0], 542, 30, "context");
      if (offset == null) dart.nullFailed(I[0], 542, 46, "offset");
      let parentBox = opts && 'parentBox' in opts ? opts.parentBox : null;
      if (parentBox == null) dart.nullFailed(I[0], 544, 27, "parentBox");
      let themeData = opts && 'themeData' in opts ? opts.themeData : null;
      if (themeData == null) dart.nullFailed(I[0], 545, 34, "themeData");
      let currentValues = opts && 'currentValues' in opts ? opts.currentValues : null;
      let currentValue = opts && 'currentValue' in opts ? opts.currentValue : null;
      let enableAnimation = opts && 'enableAnimation' in opts ? opts.enableAnimation : null;
      if (enableAnimation == null) dart.nullFailed(I[0], 548, 34, "enableAnimation");
      let textDirection = opts && 'textDirection' in opts ? opts.textDirection : null;
      if (textDirection == null) dart.nullFailed(I[0], 549, 30, "textDirection");
      let isInactive = false;
      let tickSize = this.getPreferredSize(themeData);
      switch (textDirection) {
        case C[0] || CT.C0:
        {
          isInactive = startThumbCenter != null ? dart.test(this[_isVertical](slider_base.RenderBaseSlider.as(parentBox))) ? dart.notNull(offset.dy) > dart.notNull(startThumbCenter.dy) || dart.notNull(offset.dy) < dart.notNull(dart.nullCheck(endThumbCenter).dy) : dart.notNull(offset.dx) < dart.notNull(startThumbCenter.dx) || dart.notNull(offset.dx) > dart.notNull(dart.nullCheck(endThumbCenter).dx) : dart.test(this[_isVertical](slider_base.RenderBaseSlider.as(parentBox))) ? dart.notNull(offset.dy) < dart.notNull(dart.nullCheck(thumbCenter).dy) : dart.notNull(offset.dx) > dart.notNull(dart.nullCheck(thumbCenter).dx);
          break;
        }
        case C[1] || CT.C1:
        {
          isInactive = startThumbCenter != null ? dart.test(this[_isVertical](slider_base.RenderBaseSlider.as(parentBox))) ? dart.notNull(offset.dy) > dart.notNull(startThumbCenter.dy) || dart.notNull(offset.dy) < dart.notNull(dart.nullCheck(endThumbCenter).dy) : dart.notNull(offset.dx) > dart.notNull(startThumbCenter.dx) || dart.notNull(offset.dx) < dart.notNull(dart.nullCheck(endThumbCenter).dx) : dart.test(this[_isVertical](slider_base.RenderBaseSlider.as(parentBox))) ? dart.notNull(offset.dy) < dart.notNull(dart.nullCheck(thumbCenter).dy) : dart.notNull(offset.dx) < dart.notNull(dart.nullCheck(thumbCenter).dx);
          break;
        }
        default:
        {
          dart.throw(new _internal.ReachabilityError.new("`null` encountered as case in a switch expression with a non-nullable enum type."));
        }
      }
      let begin = isInactive ? themeData.disabledInactiveTickColor : themeData.disabledActiveTickColor;
      let end = isInactive ? themeData.inactiveTickColor : themeData.activeTickColor;
      let paint = (t5 = ui.Paint.new(), (() => {
        t5.isAntiAlias = true;
        t5.strokeWidth = dart.test(this[_isVertical](parentBox)) ? tickSize.height : tickSize.width;
        t5.color = dart.nullCheck(new tween.ColorTween.new({begin: begin, end: end}).evaluate(enableAnimation));
        return t5;
      })());
      if (dart.test(this[_isVertical](parentBox))) {
        context.canvas.drawLine(offset, new ui.Offset.new(dart.notNull(offset.dx) + dart.notNull(tickSize.width), offset.dy), paint);
      } else {
        context.canvas.drawLine(offset, new ui.Offset.new(offset.dx, dart.notNull(offset.dy) + dart.notNull(tickSize.height)), paint);
      }
    }
  };
  (slider_shapes.SfTickShape.new = function() {
    ;
  }).prototype = slider_shapes.SfTickShape.prototype;
  dart.addTypeTests(slider_shapes.SfTickShape);
  dart.addTypeCaches(slider_shapes.SfTickShape);
  dart.setMethodSignature(slider_shapes.SfTickShape, () => ({
    __proto__: dart.getMethods(slider_shapes.SfTickShape.__proto__),
    [_isVertical]: dart.fnType(core.bool, [slider_base.RenderBaseSlider]),
    getPreferredSize: dart.fnType(ui.Size, [slider_theme.SfSliderThemeData]),
    paint: dart.fnType(dart.void, [object.PaintingContext, ui.Offset, dart.nullable(ui.Offset), dart.nullable(ui.Offset), dart.nullable(ui.Offset)], {currentValue: dart.dynamic, currentValues: dart.nullable(common.SfRangeValues)}, {enableAnimation: animation.Animation$(core.double), parentBox: box.RenderBox, textDirection: ui.TextDirection, themeData: slider_theme.SfSliderThemeData})
  }));
  dart.setLibraryUri(slider_shapes.SfTickShape, I[1]);
  slider_shapes.SfTooltipShape = class SfTooltipShape extends core.Object {};
  (slider_shapes.SfTooltipShape.new = function() {
    ;
  }).prototype = slider_shapes.SfTooltipShape.prototype;
  dart.addTypeTests(slider_shapes.SfTooltipShape);
  dart.addTypeCaches(slider_shapes.SfTooltipShape);
  dart.setLibraryUri(slider_shapes.SfTooltipShape, I[1]);
  slider_shapes.SfMinorTickShape = class SfMinorTickShape extends slider_shapes.SfTickShape {
    getPreferredSize(themeData) {
      if (themeData == null) dart.nullFailed(I[0], 623, 43, "themeData");
      return new ui.Size.copy(dart.nullCheck(themeData.minorTickSize));
    }
    paint(context, offset, thumbCenter, startThumbCenter, endThumbCenter, opts) {
      let t5;
      if (context == null) dart.nullFailed(I[0], 628, 30, "context");
      if (offset == null) dart.nullFailed(I[0], 628, 46, "offset");
      let parentBox = opts && 'parentBox' in opts ? opts.parentBox : null;
      if (parentBox == null) dart.nullFailed(I[0], 630, 27, "parentBox");
      let currentValues = opts && 'currentValues' in opts ? opts.currentValues : null;
      let currentValue = opts && 'currentValue' in opts ? opts.currentValue : null;
      let themeData = opts && 'themeData' in opts ? opts.themeData : null;
      if (themeData == null) dart.nullFailed(I[0], 633, 34, "themeData");
      let enableAnimation = opts && 'enableAnimation' in opts ? opts.enableAnimation : null;
      if (enableAnimation == null) dart.nullFailed(I[0], 634, 34, "enableAnimation");
      let textDirection = opts && 'textDirection' in opts ? opts.textDirection : null;
      if (textDirection == null) dart.nullFailed(I[0], 635, 30, "textDirection");
      let isInactive = null;
      let minorTickSize = this.getPreferredSize(themeData);
      switch (textDirection) {
        case C[0] || CT.C0:
        {
          isInactive = startThumbCenter != null ? dart.test(this[_isVertical](slider_base.RenderBaseSlider.as(parentBox))) ? dart.notNull(offset.dy) > dart.notNull(startThumbCenter.dy) || dart.notNull(offset.dy) < dart.notNull(dart.nullCheck(endThumbCenter).dy) : dart.notNull(offset.dx) < dart.notNull(startThumbCenter.dx) || dart.notNull(offset.dx) > dart.notNull(dart.nullCheck(endThumbCenter).dx) : dart.test(this[_isVertical](slider_base.RenderBaseSlider.as(parentBox))) ? dart.notNull(offset.dy) < dart.notNull(dart.nullCheck(thumbCenter).dy) : dart.notNull(offset.dx) > dart.notNull(dart.nullCheck(thumbCenter).dx);
          break;
        }
        case C[1] || CT.C1:
        {
          isInactive = startThumbCenter != null ? dart.test(this[_isVertical](slider_base.RenderBaseSlider.as(parentBox))) ? dart.notNull(offset.dy) > dart.notNull(startThumbCenter.dy) || dart.notNull(offset.dy) < dart.notNull(dart.nullCheck(endThumbCenter).dy) : dart.notNull(offset.dx) > dart.notNull(startThumbCenter.dx) || dart.notNull(offset.dx) < dart.notNull(dart.nullCheck(endThumbCenter).dx) : dart.test(this[_isVertical](slider_base.RenderBaseSlider.as(parentBox))) ? dart.notNull(offset.dy) < dart.notNull(dart.nullCheck(thumbCenter).dy) : dart.notNull(offset.dx) < dart.notNull(dart.nullCheck(thumbCenter).dx);
          break;
        }
        default:
        {
          dart.throw(new _internal.ReachabilityError.new("`null` encountered as case in a switch expression with a non-nullable enum type."));
        }
      }
      let begin = dart.test(isInactive) ? themeData.disabledInactiveMinorTickColor : themeData.disabledActiveMinorTickColor;
      let end = dart.test(isInactive) ? themeData.inactiveMinorTickColor : themeData.activeMinorTickColor;
      let paint = (t5 = ui.Paint.new(), (() => {
        t5.isAntiAlias = true;
        t5.strokeWidth = dart.test(this[_isVertical](parentBox)) ? minorTickSize.height : minorTickSize.width;
        t5.color = dart.nullCheck(new tween.ColorTween.new({begin: begin, end: end}).evaluate(enableAnimation));
        return t5;
      })());
      if (dart.test(this[_isVertical](parentBox))) {
        context.canvas.drawLine(offset, new ui.Offset.new(dart.notNull(offset.dx) + dart.notNull(minorTickSize.width), offset.dy), paint);
      } else {
        context.canvas.drawLine(offset, new ui.Offset.new(offset.dx, dart.notNull(offset.dy) + dart.notNull(minorTickSize.height)), paint);
      }
    }
  };
  (slider_shapes.SfMinorTickShape.new = function() {
    slider_shapes.SfMinorTickShape.__proto__.new.call(this);
    ;
  }).prototype = slider_shapes.SfMinorTickShape.prototype;
  dart.addTypeTests(slider_shapes.SfMinorTickShape);
  dart.addTypeCaches(slider_shapes.SfMinorTickShape);
  dart.setLibraryUri(slider_shapes.SfMinorTickShape, I[1]);
  var _isTooltipOverlapStroke = dart.privateName(slider_shapes, "_isTooltipOverlapStroke");
  var _getPaddleTooltipPath = dart.privateName(slider_shapes, "_getPaddleTooltipPath");
  var _drawPaddleTooltip = dart.privateName(slider_shapes, "_drawPaddleTooltip");
  var OffsetBase__dy = dart.privateName(ui, "OffsetBase._dy");
  var OffsetBase__dx = dart.privateName(ui, "OffsetBase._dx");
  slider_shapes.SfPaddleTooltipShape = class SfPaddleTooltipShape extends slider_shapes.SfTooltipShape {
    [_isTooltipOverlapStroke](parentBox) {
      if (parentBox == null) dart.nullFailed(I[0], 694, 49, "parentBox");
      return parentBox.showOverlappingTooltipStroke;
    }
    [_drawPaddleTooltip](parentBox, textPainter, minPaddleTopCircleRadius, neckDifference, sliderThemeData, defaultThumbRadius, minBottomNeckRadius, textPadding, offset, moveNeckValue, thumbCenter, trackRect, context, animation, paint) {
      let t5, t5$;
      if (parentBox == null) dart.nullFailed(I[0], 699, 17, "parentBox");
      if (textPainter == null) dart.nullFailed(I[0], 700, 19, "textPainter");
      if (minPaddleTopCircleRadius == null) dart.nullFailed(I[0], 701, 14, "minPaddleTopCircleRadius");
      if (neckDifference == null) dart.nullFailed(I[0], 702, 14, "neckDifference");
      if (sliderThemeData == null) dart.nullFailed(I[0], 703, 25, "sliderThemeData");
      if (defaultThumbRadius == null) dart.nullFailed(I[0], 704, 14, "defaultThumbRadius");
      if (minBottomNeckRadius == null) dart.nullFailed(I[0], 705, 14, "minBottomNeckRadius");
      if (textPadding == null) dart.nullFailed(I[0], 706, 14, "textPadding");
      if (offset == null) dart.nullFailed(I[0], 707, 14, "offset");
      if (moveNeckValue == null) dart.nullFailed(I[0], 708, 14, "moveNeckValue");
      if (thumbCenter == null) dart.nullFailed(I[0], 709, 14, "thumbCenter");
      if (trackRect == null) dart.nullFailed(I[0], 710, 12, "trackRect");
      if (context == null) dart.nullFailed(I[0], 711, 23, "context");
      if (animation == null) dart.nullFailed(I[0], 712, 25, "animation");
      let paddleTopCircleRadius = dart.notNull(textPainter.height) > dart.notNull(minPaddleTopCircleRadius) ? textPainter.height : minPaddleTopCircleRadius;
      let topNeckRadius = dart.notNull(paddleTopCircleRadius) - dart.notNull(neckDifference);
      let bottomNeckRadius = dart.notNull(sliderThemeData.thumbRadius) > dart.notNull(defaultThumbRadius) ? dart.notNull(sliderThemeData.thumbRadius) - dart.notNull(neckDifference) * 2 : minBottomNeckRadius;
      let halfTextWidth = dart.notNull(textPainter.width) / 2 + dart.notNull(textPadding);
      let paddleTopCircleX = halfTextWidth > dart.notNull(paddleTopCircleRadius) ? halfTextWidth - dart.notNull(paddleTopCircleRadius) : 0.0;
      let minPaddleWidth = dart.notNull(paddleTopCircleRadius) + topNeckRadius + dart.notNull(neckDifference) / 2;
      let topNeckCenter = new ui.Offset.new(topNeckRadius + dart.notNull(neckDifference) / 2, -dart.notNull(offset.dy) - dart.notNull(bottomNeckRadius));
      let paddleTopCircleCenter = new ui.Offset.new(paddleTopCircleX, -dart.notNull(paddleTopCircleRadius) * (1.0 - dart.notNull(moveNeckValue)) - topNeckRadius - dart.notNull(offset.dy) - dart.notNull(bottomNeckRadius));
      let bottomNeckCenter = new ui.Offset.new(dart.notNull(bottomNeckRadius) + dart.notNull(neckDifference) / 2, -dart.notNull(sliderThemeData.thumbRadius) - dart.notNull(bottomNeckRadius) * (1.0 - dart.notNull(moveNeckValue)));
      let leftShiftWidth = dart.notNull(thumbCenter.dx) - dart.notNull(offset.dx) - halfTextWidth;
      let shiftPaddleWidth = leftShiftWidth < 0 ? leftShiftWidth : 0.0;
      let rightEndPosition = dart.notNull(trackRect.right) + dart.notNull(trackRect.left) - dart.notNull(offset.dx);
      shiftPaddleWidth = dart.notNull(thumbCenter.dx) + halfTextWidth > rightEndPosition ? dart.notNull(thumbCenter.dx) + halfTextWidth - rightEndPosition : shiftPaddleWidth;
      let leftPaddleWidth = dart.notNull(paddleTopCircleRadius) + dart.notNull(paddleTopCircleCenter.dx) + shiftPaddleWidth;
      let rightPaddleWidth = dart.notNull(paddleTopCircleRadius) + dart.notNull(paddleTopCircleCenter.dx) - shiftPaddleWidth;
      let moveLeftTopNeckY = leftPaddleWidth > dart.notNull(paddleTopCircleRadius) ? leftPaddleWidth < minPaddleWidth ? (leftPaddleWidth - topNeckRadius) * dart.notNull(moveNeckValue) : dart.notNull(paddleTopCircleRadius) * dart.notNull(moveNeckValue) : 0.0;
      let moveLeftTopNeckAngle = leftPaddleWidth > dart.notNull(paddleTopCircleRadius) ? leftPaddleWidth < minPaddleWidth ? moveLeftTopNeckY * 3.141592653589793 / 180 : 30 * 3.141592653589793 / 180 : 0.0;
      let moveRightTopNeckY = rightPaddleWidth > dart.notNull(paddleTopCircleRadius) ? rightPaddleWidth < minPaddleWidth ? (rightPaddleWidth - topNeckRadius) * dart.notNull(moveNeckValue) : dart.notNull(paddleTopCircleRadius) * dart.notNull(moveNeckValue) : 0.0;
      let moveRightTopNeckAngle = rightPaddleWidth > dart.notNull(paddleTopCircleRadius) ? rightPaddleWidth < minPaddleWidth ? moveRightTopNeckY * 3.141592653589793 / 180 : 30 * 3.141592653589793 / 180 : 0.0;
      let leftNeckStretchValue = leftPaddleWidth < minPaddleWidth ? 1.0 - leftPaddleWidth / minPaddleWidth : 0.0;
      let rightNeckStretchValue = rightPaddleWidth < minPaddleWidth ? 1.0 - rightPaddleWidth / minPaddleWidth : 0.0;
      let adjustPaddleCircleLeftArcAngle = shiftPaddleWidth < 0 && leftPaddleWidth < minPaddleWidth ? leftNeckStretchValue * (3.141592653589793 / 2 + moveLeftTopNeckAngle) : 0.0;
      let adjustPaddleCircleRightArcAngle = shiftPaddleWidth > 0 && rightPaddleWidth < minPaddleWidth ? rightNeckStretchValue * (3.141592653589793 / 2 + moveRightTopNeckAngle) : 0.0;
      let adjustLeftNeckArcAngle = adjustPaddleCircleLeftArcAngle * (1.0 - dart.notNull(moveNeckValue));
      let adjustRightNeckArcAngle = adjustPaddleCircleRightArcAngle * (1.0 - dart.notNull(moveNeckValue));
      let path = this[_getPaddleTooltipPath](neckDifference, topNeckCenter, moveRightTopNeckY, topNeckRadius, moveRightTopNeckAngle, adjustRightNeckArcAngle, paddleTopCircleCenter, shiftPaddleWidth, paddleTopCircleRadius, adjustPaddleCircleRightArcAngle, adjustPaddleCircleLeftArcAngle, moveLeftTopNeckY, moveLeftTopNeckAngle, adjustLeftNeckArcAngle, bottomNeckCenter, bottomNeckRadius, sliderThemeData);
      context.canvas.save();
      context.canvas.translate(thumbCenter.dx, thumbCenter.dy);
      context.canvas.scale(animation.value);
      let strokePaint = ui.Paint.new();
      if (dart.test(this[_isTooltipOverlapStroke](slider_base.RenderBaseSlider.as(parentBox))) && range_slider_theme.SfRangeSliderThemeData.is(sliderThemeData) && !dart.equals(sliderThemeData.tooltipBackgroundColor, colors.Colors.transparent)) {
        t5 = strokePaint;
        (() => {
          t5.color = dart.nullCheck(sliderThemeData.overlappingTooltipStrokeColor);
          t5.style = ui.PaintingStyle.stroke;
          t5.strokeWidth = 1.0;
          return t5;
        })();
      } else {
        t5$ = strokePaint;
        (() => {
          t5$.color = colors.Colors.transparent;
          t5$.style = ui.PaintingStyle.stroke;
          return t5$;
        })();
      }
      context.canvas.drawPath(path, strokePaint);
      context.canvas.drawPath(path, dart.nullCheck(paint));
      textPainter.paint(context.canvas, new ui.Offset.new(-dart.notNull(textPainter.width) / 2 - shiftPaddleWidth, dart.notNull(paddleTopCircleCenter.dy) - dart.notNull(textPainter.height) / 2));
      context.canvas.restore();
    }
    [_getPaddleTooltipPath](neckDifference, topNeckCenter, moveRightTopNeckY, topNeckRadius, moveRightTopNeckAngle, adjustRightNeckArcAngle, paddleTopCircleCenter, shiftPaddleWidth, paddleTopCircleRadius, adjustPaddleCircleRightArcAngle, adjustPaddleCircleLeftArcAngle, moveLeftTopNeckY, moveLeftTopNeckAngle, adjustLeftNeckArcAngle, bottomNeckCenter, bottomNeckRadius, sliderThemeData) {
      if (neckDifference == null) dart.nullFailed(I[0], 841, 14, "neckDifference");
      if (topNeckCenter == null) dart.nullFailed(I[0], 842, 14, "topNeckCenter");
      if (moveRightTopNeckY == null) dart.nullFailed(I[0], 843, 14, "moveRightTopNeckY");
      if (topNeckRadius == null) dart.nullFailed(I[0], 844, 14, "topNeckRadius");
      if (moveRightTopNeckAngle == null) dart.nullFailed(I[0], 845, 14, "moveRightTopNeckAngle");
      if (adjustRightNeckArcAngle == null) dart.nullFailed(I[0], 846, 14, "adjustRightNeckArcAngle");
      if (paddleTopCircleCenter == null) dart.nullFailed(I[0], 847, 14, "paddleTopCircleCenter");
      if (shiftPaddleWidth == null) dart.nullFailed(I[0], 848, 14, "shiftPaddleWidth");
      if (paddleTopCircleRadius == null) dart.nullFailed(I[0], 849, 14, "paddleTopCircleRadius");
      if (adjustPaddleCircleRightArcAngle == null) dart.nullFailed(I[0], 850, 14, "adjustPaddleCircleRightArcAngle");
      if (adjustPaddleCircleLeftArcAngle == null) dart.nullFailed(I[0], 851, 14, "adjustPaddleCircleLeftArcAngle");
      if (moveLeftTopNeckY == null) dart.nullFailed(I[0], 852, 14, "moveLeftTopNeckY");
      if (moveLeftTopNeckAngle == null) dart.nullFailed(I[0], 853, 14, "moveLeftTopNeckAngle");
      if (adjustLeftNeckArcAngle == null) dart.nullFailed(I[0], 854, 14, "adjustLeftNeckArcAngle");
      if (bottomNeckCenter == null) dart.nullFailed(I[0], 855, 14, "bottomNeckCenter");
      if (bottomNeckRadius == null) dart.nullFailed(I[0], 856, 14, "bottomNeckRadius");
      if (sliderThemeData == null) dart.nullFailed(I[0], 857, 25, "sliderThemeData");
      let path = ui.Path.new();
      path.moveTo(dart.notNull(neckDifference) / 2, dart.notNull(topNeckCenter.dy) + dart.notNull(topNeckRadius) * 0.25);
      path.arcTo(new ui.Rect.fromCircle({center: new ui.Offset.new(topNeckCenter.dx, dart.notNull(topNeckCenter.dy) + dart.notNull(moveRightTopNeckY)), radius: topNeckRadius}), 3.141592653589793, 3.141592653589793 / 3 + dart.notNull(moveRightTopNeckAngle) - dart.notNull(adjustRightNeckArcAngle), false);
      path.arcTo(new ui.Rect.fromCircle({center: new ui.Offset.new(dart.notNull(paddleTopCircleCenter.dx) - dart.notNull(shiftPaddleWidth), paddleTopCircleCenter.dy), radius: paddleTopCircleRadius}), 3.141592653589793 / 2 - dart.notNull(adjustPaddleCircleRightArcAngle), -3.141592653589793 + dart.notNull(adjustPaddleCircleRightArcAngle), false);
      path.arcTo(new ui.Rect.fromCircle({center: new ui.Offset.new(-dart.notNull(paddleTopCircleCenter.dx) - dart.notNull(shiftPaddleWidth), paddleTopCircleCenter.dy), radius: paddleTopCircleRadius}), 3 * 3.141592653589793 / 2, -3.141592653589793 + dart.notNull(adjustPaddleCircleLeftArcAngle), false);
      path.arcTo(new ui.Rect.fromCircle({center: new ui.Offset.new(-dart.notNull(topNeckCenter.dx), dart.notNull(topNeckCenter.dy) + dart.notNull(moveLeftTopNeckY)), radius: topNeckRadius}), 5 * 3.141592653589793 / 3 - dart.notNull(moveLeftTopNeckAngle) + dart.notNull(adjustLeftNeckArcAngle), 3.141592653589793 / 3 + dart.notNull(moveLeftTopNeckAngle) - dart.notNull(adjustLeftNeckArcAngle), false);
      path.arcTo(new ui.Rect.fromCircle({center: new ui.Offset.new(-dart.notNull(bottomNeckCenter.dx), bottomNeckCenter.dy), radius: bottomNeckRadius}), 0.0, 3.141592653589793 / 3, false);
      path.arcTo(new ui.Rect.fromCircle({center: C[2] || CT.C2, radius: sliderThemeData.thumbRadius}), 3 * 3.141592653589793 / 2, -3.141592653589793, false);
      path.arcTo(new ui.Rect.fromCircle({center: C[2] || CT.C2, radius: sliderThemeData.thumbRadius}), 3.141592653589793 / 2, -3.141592653589793, false);
      path.arcTo(new ui.Rect.fromCircle({center: bottomNeckCenter, radius: bottomNeckRadius}), 2 * 3.141592653589793 / 3, 3.141592653589793 / 3, false);
      return path;
    }
    paint(context, thumbCenter, offset, textPainter, opts) {
      if (context == null) dart.nullFailed(I[0], 927, 30, "context");
      if (thumbCenter == null) dart.nullFailed(I[0], 927, 46, "thumbCenter");
      if (offset == null) dart.nullFailed(I[0], 927, 66, "offset");
      if (textPainter == null) dart.nullFailed(I[0], 928, 19, "textPainter");
      let parentBox = opts && 'parentBox' in opts ? opts.parentBox : null;
      if (parentBox == null) dart.nullFailed(I[0], 929, 27, "parentBox");
      let sliderThemeData = opts && 'sliderThemeData' in opts ? opts.sliderThemeData : null;
      if (sliderThemeData == null) dart.nullFailed(I[0], 930, 34, "sliderThemeData");
      let paint = opts && 'paint' in opts ? opts.paint : null;
      if (paint == null) dart.nullFailed(I[0], 931, 22, "paint");
      let animation = opts && 'animation' in opts ? opts.animation : null;
      if (animation == null) dart.nullFailed(I[0], 932, 34, "animation");
      let trackRect = opts && 'trackRect' in opts ? opts.trackRect : null;
      if (trackRect == null) dart.nullFailed(I[0], 933, 21, "trackRect");
      this[_drawPaddleTooltip](parentBox, textPainter, 16, 3, sliderThemeData, 10, 4, 8, offset, 0.25, thumbCenter, trackRect, context, animation, paint);
    }
  };
  (slider_shapes.SfPaddleTooltipShape.new = function() {
    slider_shapes.SfPaddleTooltipShape.__proto__.new.call(this);
    ;
  }).prototype = slider_shapes.SfPaddleTooltipShape.prototype;
  dart.addTypeTests(slider_shapes.SfPaddleTooltipShape);
  dart.addTypeCaches(slider_shapes.SfPaddleTooltipShape);
  dart.setMethodSignature(slider_shapes.SfPaddleTooltipShape, () => ({
    __proto__: dart.getMethods(slider_shapes.SfPaddleTooltipShape.__proto__),
    [_isTooltipOverlapStroke]: dart.fnType(core.bool, [slider_base.RenderBaseSlider]),
    [_drawPaddleTooltip]: dart.fnType(dart.void, [box.RenderBox, text_painter.TextPainter, core.double, core.double, slider_theme.SfSliderThemeData, core.double, core.double, core.double, ui.Offset, core.double, ui.Offset, ui.Rect, object.PaintingContext, animation.Animation$(core.double), dart.nullable(ui.Paint)]),
    [_getPaddleTooltipPath]: dart.fnType(ui.Path, [core.double, ui.Offset, core.double, core.double, core.double, core.double, ui.Offset, core.double, core.double, core.double, core.double, core.double, core.double, core.double, ui.Offset, core.double, slider_theme.SfSliderThemeData]),
    paint: dart.fnType(dart.void, [object.PaintingContext, ui.Offset, ui.Offset, text_painter.TextPainter], {}, {animation: animation.Animation$(core.double), paint: ui.Paint, parentBox: box.RenderBox, sliderThemeData: slider_theme.SfSliderThemeData, trackRect: ui.Rect})
  }));
  dart.setLibraryUri(slider_shapes.SfPaddleTooltipShape, I[1]);
  var _isLeftTooltip = dart.privateName(slider_shapes, "_isLeftTooltip");
  var _getRectangularPath = dart.privateName(slider_shapes, "_getRectangularPath");
  var _updateRectangularTooltipWidth = dart.privateName(slider_shapes, "_updateRectangularTooltipWidth");
  slider_shapes.SfRectangularTooltipShape = class SfRectangularTooltipShape extends slider_shapes.SfTooltipShape {
    [_isTooltipOverlapStroke](parentBox) {
      if (parentBox == null) dart.nullFailed(I[0], 959, 49, "parentBox");
      return parentBox.showOverlappingTooltipStroke;
    }
    [_isVertical](parentBox) {
      if (parentBox == null) dart.nullFailed(I[0], 963, 37, "parentBox");
      return parentBox.sliderType == constants.SliderType.vertical;
    }
    [_isLeftTooltip](parentBox) {
      if (parentBox == null) dart.nullFailed(I[0], 967, 40, "parentBox");
      return parentBox.tooltipPosition == common.SliderTooltipPosition.left;
    }
    [_updateRectangularTooltipWidth](textSize, tooltipStartY, trackRect, dx, opts) {
      if (textSize == null) dart.nullFailed(I[0], 972, 12, "textSize");
      if (tooltipStartY == null) dart.nullFailed(I[0], 972, 29, "tooltipStartY");
      if (trackRect == null) dart.nullFailed(I[0], 972, 49, "trackRect");
      if (dx == null) dart.nullFailed(I[0], 972, 67, "dx");
      let isVertical = opts && 'isVertical' in opts ? opts.isVertical : null;
      if (isVertical == null) dart.nullFailed(I[0], 973, 22, "isVertical");
      let isLeftTooltip = opts && 'isLeftTooltip' in opts ? opts.isLeftTooltip : null;
      let dy = dart.notNull(tooltipStartY) + 7;
      let tooltipWidth = dart.notNull(textSize.width) < 47 ? 47 : textSize.width;
      let tooltipHeight = dart.notNull(textSize.height) < 37 ? 37 : textSize.height;
      let halfTooltipWidth = dart.notNull(tooltipWidth) / 2;
      let halfTooltipHeight = dart.notNull(tooltipHeight) / 2;
      if (dart.test(isVertical)) {
        if (dart.nullCheck(isLeftTooltip)) {
          let topLineHeight = dart.notNull(dx) - halfTooltipHeight < dart.notNull(trackRect.top) ? dart.notNull(dx) - dart.notNull(trackRect.top) : halfTooltipHeight;
          let bottomLineHeight = dart.notNull(dx) + halfTooltipHeight > dart.notNull(trackRect.bottom) ? dart.notNull(trackRect.bottom) - dart.notNull(dx) : dart.notNull(tooltipHeight) - topLineHeight;
          topLineHeight = bottomLineHeight < halfTooltipHeight ? halfTooltipHeight - bottomLineHeight + topLineHeight : topLineHeight;
          return this[_getRectangularPath](tooltipStartY, topLineHeight, 6, dy, tooltipHeight, bottomLineHeight, {isVertical: isVertical, toolTipWidth: tooltipWidth, isLeftTooltip: isLeftTooltip});
        } else {
          let topLineHeight = dart.notNull(dx) - halfTooltipHeight < dart.notNull(trackRect.top) ? dart.notNull(dx) - dart.notNull(trackRect.top) : halfTooltipHeight;
          let bottomLineHeight = dart.notNull(dx) + halfTooltipHeight > dart.notNull(trackRect.bottom) ? dart.notNull(trackRect.bottom) - dart.notNull(dx) : dart.notNull(tooltipHeight) - topLineHeight;
          topLineHeight = bottomLineHeight < halfTooltipHeight ? halfTooltipHeight - bottomLineHeight + topLineHeight : topLineHeight;
          return this[_getRectangularPath](tooltipStartY, topLineHeight, 6, dy, tooltipHeight, bottomLineHeight, {isVertical: isVertical, toolTipWidth: tooltipWidth, isLeftTooltip: isLeftTooltip});
        }
      } else {
        let rightLineWidth = dart.notNull(dx) + halfTooltipWidth > dart.notNull(trackRect.right) ? dart.notNull(trackRect.right) - dart.notNull(dx) : halfTooltipWidth;
        let leftLineWidth = dart.test(isVertical) ? dart.notNull(tooltipWidth) - rightLineWidth : dart.notNull(dx) - halfTooltipWidth < dart.notNull(trackRect.left) ? dart.notNull(dx) - dart.notNull(trackRect.left) : dart.notNull(tooltipWidth) - rightLineWidth;
        if (!dart.test(isVertical)) {
          rightLineWidth = leftLineWidth < halfTooltipWidth ? halfTooltipWidth - leftLineWidth + rightLineWidth : rightLineWidth;
        }
        return this[_getRectangularPath](tooltipStartY, rightLineWidth, 6, dy, tooltipHeight, leftLineWidth, {isVertical: isVertical});
      }
    }
    [_getRectangularPath](tooltipStartY, rightLineWidth, halfTooltipTriangleWidth, dy, tooltipHeight, leftLineWidth, opts) {
      if (tooltipStartY == null) dart.nullFailed(I[0], 1037, 14, "tooltipStartY");
      if (rightLineWidth == null) dart.nullFailed(I[0], 1038, 14, "rightLineWidth");
      if (halfTooltipTriangleWidth == null) dart.nullFailed(I[0], 1039, 14, "halfTooltipTriangleWidth");
      if (dy == null) dart.nullFailed(I[0], 1040, 14, "dy");
      if (tooltipHeight == null) dart.nullFailed(I[0], 1041, 14, "tooltipHeight");
      if (leftLineWidth == null) dart.nullFailed(I[0], 1042, 14, "leftLineWidth");
      let isVertical = opts && 'isVertical' in opts ? opts.isVertical : null;
      if (isVertical == null) dart.nullFailed(I[0], 1043, 22, "isVertical");
      let toolTipWidth = opts && 'toolTipWidth' in opts ? opts.toolTipWidth : null;
      let isLeftTooltip = opts && 'isLeftTooltip' in opts ? opts.isLeftTooltip : null;
      let path = ui.Path.new();
      if (dart.test(isVertical) && toolTipWidth != null) {
        if (dart.nullCheck(isLeftTooltip)) {
          path.moveTo(-dart.notNull(tooltipStartY), 0.0);
          let canAdjustTooltipNose = dart.notNull(rightLineWidth) < dart.notNull(halfTooltipTriangleWidth);
          path.lineTo(-dart.notNull(dy), canAdjustTooltipNose ? -dart.notNull(rightLineWidth) : -dart.notNull(halfTooltipTriangleWidth));
          if (!canAdjustTooltipNose) {
            path.lineTo(-dart.notNull(dy), -dart.notNull(rightLineWidth) + 4 / 2);
          }
          path.quadraticBezierTo(-dart.notNull(dy), canAdjustTooltipNose ? -dart.notNull(rightLineWidth) : -dart.notNull(rightLineWidth) + 4 / 2, -dart.notNull(dy) - 4 / 2, -dart.notNull(rightLineWidth));
          path.lineTo(-dart.notNull(dy) - dart.notNull(toolTipWidth) + 4 / 2, -dart.notNull(rightLineWidth));
          path.quadraticBezierTo(-dart.notNull(dy) - dart.notNull(toolTipWidth) + 4 / 2, -dart.notNull(rightLineWidth), -dart.notNull(dy) - dart.notNull(toolTipWidth), -dart.notNull(rightLineWidth) + 4 / 2);
          path.lineTo(-dart.notNull(dy) - dart.notNull(toolTipWidth), dart.notNull(leftLineWidth) - 4 / 2);
          path.quadraticBezierTo(-dart.notNull(dy) - dart.notNull(toolTipWidth), dart.notNull(leftLineWidth) - 4 / 2, -dart.notNull(dy) - dart.notNull(toolTipWidth) + 4 / 2, leftLineWidth);
          path.lineTo(-dart.notNull(dy) - 4 / 2, leftLineWidth);
          if (dart.notNull(leftLineWidth) > dart.notNull(halfTooltipTriangleWidth)) {
            path.quadraticBezierTo(-dart.notNull(dy) - 4 / 2, leftLineWidth, -dart.notNull(dy), dart.notNull(leftLineWidth) - 4 / 2);
            path.lineTo(-dart.notNull(dy), halfTooltipTriangleWidth);
          }
          path.close();
        } else {
          path.moveTo(tooltipStartY, 0.0);
          let canAdjustTooltipNose = dart.notNull(rightLineWidth) < dart.notNull(halfTooltipTriangleWidth);
          path.lineTo(dy, canAdjustTooltipNose ? -dart.notNull(rightLineWidth) : -dart.notNull(halfTooltipTriangleWidth));
          if (!canAdjustTooltipNose) {
            path.lineTo(dy, -dart.notNull(rightLineWidth) + 4 / 2);
          }
          path.quadraticBezierTo(dy, canAdjustTooltipNose ? -dart.notNull(rightLineWidth) : -dart.notNull(rightLineWidth) + 4 / 2, dart.notNull(dy) + 4 / 2, -dart.notNull(rightLineWidth));
          path.lineTo(dart.notNull(dy) + dart.notNull(toolTipWidth) - 4 / 2, -dart.notNull(rightLineWidth));
          path.quadraticBezierTo(dart.notNull(dy) + dart.notNull(toolTipWidth) - 4 / 2, -dart.notNull(rightLineWidth), dart.notNull(dy) + dart.notNull(toolTipWidth), -dart.notNull(rightLineWidth) + 4 / 2);
          path.lineTo(dart.notNull(dy) + dart.notNull(toolTipWidth), dart.notNull(leftLineWidth) - 4 / 2);
          path.quadraticBezierTo(dart.notNull(dy) + dart.notNull(toolTipWidth), dart.notNull(leftLineWidth) - 4 / 2, dart.notNull(dy) + dart.notNull(toolTipWidth) - 4 / 2, leftLineWidth);
          path.lineTo(dart.notNull(dy) + 4 / 2, leftLineWidth);
          if (dart.notNull(leftLineWidth) > dart.notNull(halfTooltipTriangleWidth)) {
            path.quadraticBezierTo(dart.notNull(dy) + 4 / 2, leftLineWidth, dy, dart.notNull(leftLineWidth) - 4 / 2);
            path.lineTo(dy, halfTooltipTriangleWidth);
          }
          path.close();
        }
      } else {
        path.moveTo(0.0, -dart.notNull(tooltipStartY));
        let canAdjustTooltipNose = dart.notNull(rightLineWidth) > dart.notNull(halfTooltipTriangleWidth) + 4 / 2;
        path.lineTo(canAdjustTooltipNose ? halfTooltipTriangleWidth : rightLineWidth, -dart.notNull(dy) - (canAdjustTooltipNose ? 0 : 4 / 2));
        path.lineTo(dart.notNull(rightLineWidth) - 4, -dart.notNull(dy));
        path.quadraticBezierTo(rightLineWidth, -dart.notNull(dy), rightLineWidth, -dart.notNull(dy) - 4);
        path.lineTo(rightLineWidth, -dart.notNull(dy) - dart.notNull(tooltipHeight) + 4);
        path.quadraticBezierTo(rightLineWidth, -dart.notNull(dy) - dart.notNull(tooltipHeight), dart.notNull(rightLineWidth) - 4, -dart.notNull(dy) - dart.notNull(tooltipHeight));
        path.lineTo(-dart.notNull(leftLineWidth) + 4, -dart.notNull(dy) - dart.notNull(tooltipHeight));
        path.quadraticBezierTo(-dart.notNull(leftLineWidth), -dart.notNull(dy) - dart.notNull(tooltipHeight), -dart.notNull(leftLineWidth), -dart.notNull(dy) - dart.notNull(tooltipHeight) + 4);
        path.lineTo(-dart.notNull(leftLineWidth), -dart.notNull(dy) - 4);
        if (dart.notNull(leftLineWidth) > dart.notNull(halfTooltipTriangleWidth)) {
          path.quadraticBezierTo(-dart.notNull(leftLineWidth), -dart.notNull(dy), -dart.notNull(leftLineWidth) + 4, -dart.notNull(dy));
          path.lineTo(-dart.notNull(halfTooltipTriangleWidth), -dart.notNull(dy));
        }
        path.close();
      }
      return path;
    }
    paint(context, thumbCenter, offset, textPainter, opts) {
      let t5;
      if (context == null) dart.nullFailed(I[0], 1215, 30, "context");
      if (thumbCenter == null) dart.nullFailed(I[0], 1215, 46, "thumbCenter");
      if (offset == null) dart.nullFailed(I[0], 1215, 66, "offset");
      if (textPainter == null) dart.nullFailed(I[0], 1216, 19, "textPainter");
      let parentBox = opts && 'parentBox' in opts ? opts.parentBox : null;
      if (parentBox == null) dart.nullFailed(I[0], 1217, 27, "parentBox");
      let sliderThemeData = opts && 'sliderThemeData' in opts ? opts.sliderThemeData : null;
      if (sliderThemeData == null) dart.nullFailed(I[0], 1218, 34, "sliderThemeData");
      let paint = opts && 'paint' in opts ? opts.paint : null;
      if (paint == null) dart.nullFailed(I[0], 1219, 22, "paint");
      let animation = opts && 'animation' in opts ? opts.animation : null;
      if (animation == null) dart.nullFailed(I[0], 1220, 34, "animation");
      let trackRect = opts && 'trackRect' in opts ? opts.trackRect : null;
      if (trackRect == null) dart.nullFailed(I[0], 1221, 21, "trackRect");
      let leftPadding = dart.notNull(constants.tooltipTextPadding.dx) / 2;
      let minLeftX = trackRect.left;
      let path = dart.test(this[_isVertical](slider_base.RenderBaseSlider.as(parentBox))) ? this[_updateRectangularTooltipWidth](textPainter.size['+'](constants.tooltipTextPadding), offset.dy, trackRect, thumbCenter.dy, {isVertical: this[_isVertical](parentBox), isLeftTooltip: this[_isLeftTooltip](parentBox)}) : this[_updateRectangularTooltipWidth](textPainter.size['+'](constants.tooltipTextPadding), offset.dy, trackRect, thumbCenter.dx, {isVertical: this[_isVertical](parentBox)});
      context.canvas.save();
      context.canvas.translate(thumbCenter.dx, thumbCenter.dy);
      context.canvas.scale(animation.value);
      let strokePaint = ui.Paint.new();
      if (dart.test(this[_isTooltipOverlapStroke](parentBox)) && !dart.equals(sliderThemeData.tooltipBackgroundColor, colors.Colors.transparent)) {
        if (range_slider_theme.SfRangeSliderThemeData.is(sliderThemeData)) {
          strokePaint.color = dart.nullCheck(sliderThemeData.overlappingTooltipStrokeColor);
          strokePaint.style = ui.PaintingStyle.stroke;
          strokePaint.strokeWidth = 1.0;
        } else if (range_selector_theme.SfRangeSelectorThemeData.is(sliderThemeData)) {
          strokePaint.color = dart.nullCheck(sliderThemeData.overlappingTooltipStrokeColor);
          strokePaint.style = ui.PaintingStyle.stroke;
          strokePaint.strokeWidth = 1.0;
        }
      } else {
        t5 = strokePaint;
        (() => {
          t5.color = colors.Colors.transparent;
          t5.style = ui.PaintingStyle.stroke;
          return t5;
        })();
      }
      context.canvas.drawPath(path, strokePaint);
      context.canvas.drawPath(path, paint);
      let pathRect = path.getBounds();
      let halfPathWidth = dart.notNull(pathRect.width) / 2;
      let halfTextPainterWidth = dart.notNull(textPainter.width) / 2;
      let rectLeftPosition = dart.notNull(thumbCenter.dx) - halfPathWidth;
      if (dart.test(this[_isVertical](parentBox))) {
        let halfPathHeight = dart.notNull(pathRect.height) / 2;
        let halfTextPainterHeight = dart.notNull(textPainter.height) / 2;
        let rectTopPosition = dart.notNull(thumbCenter.dy) - halfPathHeight;
        if (dart.test(this[_isLeftTooltip](parentBox))) {
          let dx = -dart.notNull(offset.dy) - 7 - (dart.notNull(pathRect.size.width) - 7) / 2 - dart.notNull(textPainter.width) / 2;
          let dy = rectTopPosition >= dart.notNull(trackRect.top) ? dart.notNull(thumbCenter.dy) + halfPathHeight >= dart.notNull(trackRect.bottom) ? -halfTextPainterHeight - halfPathHeight - dart.notNull(thumbCenter.dy) + dart.notNull(trackRect.bottom) : -halfTextPainterHeight : -halfTextPainterHeight + halfPathHeight - dart.notNull(thumbCenter.dy) + dart.notNull(trackRect.top);
          textPainter.paint(context.canvas, new ui.Offset.new(dx, dy));
        } else {
          let dx = dart.notNull(offset.dy) + 7 + (dart.notNull(pathRect.size.width) - 7) / 2 - dart.notNull(textPainter.width) / 2;
          let dy = rectTopPosition >= dart.notNull(trackRect.top) ? dart.notNull(thumbCenter.dy) + halfPathHeight >= dart.notNull(trackRect.bottom) ? -halfTextPainterHeight - halfPathHeight - dart.notNull(thumbCenter.dy) + dart.notNull(trackRect.bottom) : -halfTextPainterHeight : -halfTextPainterHeight + halfPathHeight - dart.notNull(thumbCenter.dy) + dart.notNull(trackRect.top);
          textPainter.paint(context.canvas, new ui.Offset.new(dx, dy));
        }
      } else {
        let dx = rectLeftPosition >= dart.notNull(minLeftX) ? dart.notNull(thumbCenter.dx) + halfTextPainterWidth + leftPadding > dart.notNull(trackRect.right) ? -halfTextPainterWidth - halfPathWidth + dart.notNull(trackRect.right) - dart.notNull(thumbCenter.dx) : -halfTextPainterWidth : -halfTextPainterWidth + halfPathWidth + dart.notNull(trackRect.left) - dart.notNull(thumbCenter.dx);
        let dy = dart.notNull(offset.dy) + 7 + (dart.notNull(pathRect.size.height) - 7) / 2 + dart.notNull(textPainter.height) / 2;
        textPainter.paint(context.canvas, new ui.Offset.new(dx, -dy));
      }
      context.canvas.restore();
    }
  };
  (slider_shapes.SfRectangularTooltipShape.new = function() {
    slider_shapes.SfRectangularTooltipShape.__proto__.new.call(this);
    ;
  }).prototype = slider_shapes.SfRectangularTooltipShape.prototype;
  dart.addTypeTests(slider_shapes.SfRectangularTooltipShape);
  dart.addTypeCaches(slider_shapes.SfRectangularTooltipShape);
  dart.setMethodSignature(slider_shapes.SfRectangularTooltipShape, () => ({
    __proto__: dart.getMethods(slider_shapes.SfRectangularTooltipShape.__proto__),
    [_isTooltipOverlapStroke]: dart.fnType(core.bool, [slider_base.RenderBaseSlider]),
    [_isVertical]: dart.fnType(core.bool, [slider_base.RenderBaseSlider]),
    [_isLeftTooltip]: dart.fnType(core.bool, [slider_base.RenderBaseSlider]),
    [_updateRectangularTooltipWidth]: dart.fnType(ui.Path, [ui.Size, core.double, ui.Rect, core.double], {isLeftTooltip: dart.nullable(core.bool)}, {isVertical: core.bool}),
    [_getRectangularPath]: dart.fnType(ui.Path, [core.double, core.double, core.double, core.double, core.double, core.double], {isLeftTooltip: dart.nullable(core.bool), toolTipWidth: dart.nullable(core.double)}, {isVertical: core.bool}),
    paint: dart.fnType(dart.void, [object.PaintingContext, ui.Offset, ui.Offset, text_painter.TextPainter], {}, {animation: animation.Animation$(core.double), paint: ui.Paint, parentBox: box.RenderBox, sliderThemeData: slider_theme.SfSliderThemeData, trackRect: ui.Rect})
  }));
  dart.setLibraryUri(slider_shapes.SfRectangularTooltipShape, I[1]);
  var minTrackWidth = dart.privateName(slider_base, "RenderBaseSlider.minTrackWidth");
  var textPainter = dart.privateName(slider_base, "RenderBaseSlider.textPainter");
  var sliderType$ = dart.privateName(slider_base, "RenderBaseSlider.sliderType");
  var divisions = dart.privateName(slider_base, "RenderBaseSlider.divisions");
  var willDrawTooltip = dart.privateName(slider_base, "RenderBaseSlider.willDrawTooltip");
  var isInteractionEnd = dart.privateName(slider_base, "RenderBaseSlider.isInteractionEnd");
  var unformattedLabels = dart.privateName(slider_base, "RenderBaseSlider.unformattedLabels");
  var horizontalDragGestureRecognizer = dart.privateName(slider_base, "RenderBaseSlider.horizontalDragGestureRecognizer");
  var verticalDragGestureRecognizer = dart.privateName(slider_base, "RenderBaseSlider.verticalDragGestureRecognizer");
  var showOverlappingTooltipStroke = dart.privateName(slider_base, "RenderBaseSlider.showOverlappingTooltipStroke");
  var showOverlappingThumbStroke = dart.privateName(slider_base, "RenderBaseSlider.showOverlappingThumbStroke");
  var mainAxisOffset = dart.privateName(slider_base, "RenderBaseSlider.mainAxisOffset");
  var activeThumb = dart.privateName(slider_base, "RenderBaseSlider.activeThumb");
  var currentPointerType = dart.privateName(slider_base, "RenderBaseSlider.currentPointerType");
  var __RenderBaseSlider__minInMilliseconds = dart.privateName(slider_base, "_#RenderBaseSlider#_minInMilliseconds");
  var __RenderBaseSlider__minInMilliseconds_isSet = dart.privateName(slider_base, "_#RenderBaseSlider#_minInMilliseconds#isSet");
  var __RenderBaseSlider__maxInMilliseconds = dart.privateName(slider_base, "_#RenderBaseSlider#_maxInMilliseconds");
  var __RenderBaseSlider__maxInMilliseconds_isSet = dart.privateName(slider_base, "_#RenderBaseSlider#_maxInMilliseconds#isSet");
  var __RenderBaseSlider__visibleLabels = dart.privateName(slider_base, "_#RenderBaseSlider#_visibleLabels");
  var __RenderBaseSlider__visibleLabels_isSet = dart.privateName(slider_base, "_#RenderBaseSlider#_visibleLabels#isSet");
  var __RenderBaseSlider__majorTickPositions = dart.privateName(slider_base, "_#RenderBaseSlider#_majorTickPositions");
  var __RenderBaseSlider__majorTickPositions_isSet = dart.privateName(slider_base, "_#RenderBaseSlider#_majorTickPositions#isSet");
  var __RenderBaseSlider__minorTickPositions = dart.privateName(slider_base, "_#RenderBaseSlider#_minorTickPositions");
  var __RenderBaseSlider__minorTickPositions_isSet = dart.privateName(slider_base, "_#RenderBaseSlider#_minorTickPositions#isSet");
  var __RenderBaseSlider_tapGestureRecognizer = dart.privateName(slider_base, "_#RenderBaseSlider#tapGestureRecognizer");
  var __RenderBaseSlider_tapGestureRecognizer_isSet = dart.privateName(slider_base, "_#RenderBaseSlider#tapGestureRecognizer#isSet");
  var __RenderBaseSlider_actualHeight = dart.privateName(slider_base, "_#RenderBaseSlider#actualHeight");
  var __RenderBaseSlider_actualHeight_isSet = dart.privateName(slider_base, "_#RenderBaseSlider#actualHeight#isSet");
  var __RenderBaseSlider_trackOffset = dart.privateName(slider_base, "_#RenderBaseSlider#trackOffset");
  var __RenderBaseSlider_trackOffset_isSet = dart.privateName(slider_base, "_#RenderBaseSlider#trackOffset#isSet");
  var __RenderBaseSlider_maxTrackHeight = dart.privateName(slider_base, "_#RenderBaseSlider#maxTrackHeight");
  var __RenderBaseSlider_maxTrackHeight_isSet = dart.privateName(slider_base, "_#RenderBaseSlider#maxTrackHeight#isSet");
  var __RenderBaseSlider_thumbElevationTween = dart.privateName(slider_base, "_#RenderBaseSlider#thumbElevationTween");
  var __RenderBaseSlider_thumbElevationTween_isSet = dart.privateName(slider_base, "_#RenderBaseSlider#thumbElevationTween#isSet");
  var _min = dart.privateName(slider_base, "_min");
  var _max = dart.privateName(slider_base, "_max");
  var _interval = dart.privateName(slider_base, "_interval");
  var _stepSize = dart.privateName(slider_base, "_stepSize");
  var _stepDuration = dart.privateName(slider_base, "_stepDuration");
  var _minorTicksPerInterval = dart.privateName(slider_base, "_minorTicksPerInterval");
  var _showTicks = dart.privateName(slider_base, "_showTicks");
  var _showLabels = dart.privateName(slider_base, "_showLabels");
  var _showDividers = dart.privateName(slider_base, "_showDividers");
  var _enableTooltip = dart.privateName(slider_base, "_enableTooltip");
  var _labelPlacement = dart.privateName(slider_base, "_labelPlacement");
  var _numberFormat = dart.privateName(slider_base, "_numberFormat");
  var _dateFormat = dart.privateName(slider_base, "_dateFormat");
  var _dateIntervalType = dart.privateName(slider_base, "_dateIntervalType");
  var _labelFormatterCallback = dart.privateName(slider_base, "_labelFormatterCallback");
  var _tooltipTextFormatterCallback = dart.privateName(slider_base, "_tooltipTextFormatterCallback");
  var _trackShape = dart.privateName(slider_base, "_trackShape");
  var _dividerShape = dart.privateName(slider_base, "_dividerShape");
  var _overlayShape = dart.privateName(slider_base, "_overlayShape");
  var _thumbShape = dart.privateName(slider_base, "_thumbShape");
  var _tickShape = dart.privateName(slider_base, "_tickShape");
  var _minorTickShape = dart.privateName(slider_base, "_minorTickShape");
  var _tooltipShape = dart.privateName(slider_base, "_tooltipShape");
  var _sliderThemeData = dart.privateName(slider_base, "_sliderThemeData");
  var _textDirection = dart.privateName(slider_base, "_textDirection");
  var _mediaQueryData = dart.privateName(slider_base, "_mediaQueryData");
  var _tooltipPosition = dart.privateName(slider_base, "_tooltipPosition");
  var _getTrackOffset = dart.privateName(slider_base, "_getTrackOffset");
  var _minInMilliseconds = dart.privateName(slider_base, "_minInMilliseconds");
  var _maxInMilliseconds = dart.privateName(slider_base, "_maxInMilliseconds");
  var _visibleLabels = dart.privateName(slider_base, "_visibleLabels");
  var _majorTickPositions = dart.privateName(slider_base, "_majorTickPositions");
  var _minorTickPositions = dart.privateName(slider_base, "_minorTickPositions");
  var _actualDividerSize = dart.privateName(slider_base, "_actualDividerSize");
  var _generateLabelsAndMajorTicksBasedOnInterval = dart.privateName(slider_base, "_generateLabelsAndMajorTicksBasedOnInterval");
  var _generateEdgeLabelsAndMajorTicks = dart.privateName(slider_base, "_generateEdgeLabelsAndMajorTicks");
  var _getDateTimeDifference = dart.privateName(slider_base, "_getDateTimeDifference");
  var _getNextDate = dart.privateName(slider_base, "_getNextDate");
  var _generateDateTimeMinorTicks = dart.privateName(slider_base, "_generateDateTimeMinorTicks");
  var _generateNumericMinorTicks = dart.privateName(slider_base, "_generateNumericMinorTicks");
  var _updateMinorTicksPosition = dart.privateName(slider_base, "_updateMinorTicksPosition");
  var _name$ = dart.privateName(common, "_name");
  var _getAdjustPaddleWidth = dart.privateName(slider_base, "_getAdjustPaddleWidth");
  var _drawTick = dart.privateName(slider_base, "_drawTick");
  var _drawMinorTick = dart.privateName(slider_base, "_drawMinorTick");
  var _drawDivider = dart.privateName(slider_base, "_drawDivider");
  var _drawLabel = dart.privateName(slider_base, "_drawLabel");
  var _drawText = dart.privateName(slider_base, "_drawText");
  var _textSize = dart.privateName(slider_base, "_textSize");
  var _edgeLabelWidth = dart.privateName(slider_base, "_edgeLabelWidth");
  var _maximumLabelWidth = dart.privateName(slider_base, "_maximumLabelWidth");
  const RenderProxyBox_RelayoutWhenSystemFontsChangeMixin$36 = class RenderProxyBox_RelayoutWhenSystemFontsChangeMixin extends proxy_box.RenderProxyBox {};
  (RenderProxyBox_RelayoutWhenSystemFontsChangeMixin$36.new = function(child) {
    RenderProxyBox_RelayoutWhenSystemFontsChangeMixin$36.__proto__.new.call(this, child);
  }).prototype = RenderProxyBox_RelayoutWhenSystemFontsChangeMixin$36.prototype;
  dart.applyMixin(RenderProxyBox_RelayoutWhenSystemFontsChangeMixin$36, object.RelayoutWhenSystemFontsChangeMixin);
  slider_base.RenderBaseSlider = class RenderBaseSlider extends RenderProxyBox_RelayoutWhenSystemFontsChangeMixin$36 {
    get minTrackWidth() {
      return this[minTrackWidth];
    }
    set minTrackWidth(value) {
      super.minTrackWidth = value;
    }
    get textPainter() {
      return this[textPainter];
    }
    set textPainter(value) {
      super.textPainter = value;
    }
    get sliderType() {
      return this[sliderType$];
    }
    set sliderType(value) {
      super.sliderType = value;
    }
    get divisions() {
      return this[divisions];
    }
    set divisions(value) {
      this[divisions] = value;
    }
    get willDrawTooltip() {
      return this[willDrawTooltip];
    }
    set willDrawTooltip(value) {
      this[willDrawTooltip] = value;
    }
    get isInteractionEnd() {
      return this[isInteractionEnd];
    }
    set isInteractionEnd(value) {
      this[isInteractionEnd] = value;
    }
    get unformattedLabels() {
      return this[unformattedLabels];
    }
    set unformattedLabels(value) {
      this[unformattedLabels] = value;
    }
    get horizontalDragGestureRecognizer() {
      return this[horizontalDragGestureRecognizer];
    }
    set horizontalDragGestureRecognizer(value) {
      this[horizontalDragGestureRecognizer] = value;
    }
    get verticalDragGestureRecognizer() {
      return this[verticalDragGestureRecognizer];
    }
    set verticalDragGestureRecognizer(value) {
      this[verticalDragGestureRecognizer] = value;
    }
    get showOverlappingTooltipStroke() {
      return this[showOverlappingTooltipStroke];
    }
    set showOverlappingTooltipStroke(value) {
      this[showOverlappingTooltipStroke] = value;
    }
    get showOverlappingThumbStroke() {
      return this[showOverlappingThumbStroke];
    }
    set showOverlappingThumbStroke(value) {
      this[showOverlappingThumbStroke] = value;
    }
    get mainAxisOffset() {
      return this[mainAxisOffset];
    }
    set mainAxisOffset(value) {
      this[mainAxisOffset] = value;
    }
    get activeThumb() {
      return this[activeThumb];
    }
    set activeThumb(value) {
      this[activeThumb] = value;
    }
    get currentPointerType() {
      return this[currentPointerType];
    }
    set currentPointerType(value) {
      this[currentPointerType] = value;
    }
    set [_minInMilliseconds](t5) {
      if (t5 == null) dart.nullFailed(I[2], 97, 15, "null");
      this[__RenderBaseSlider__minInMilliseconds_isSet] = true;
      this[__RenderBaseSlider__minInMilliseconds] = t5;
    }
    get [_minInMilliseconds]() {
      let t6;
      return dart.test(this[__RenderBaseSlider__minInMilliseconds_isSet]) ? (t6 = this[__RenderBaseSlider__minInMilliseconds], t6) : dart.throw(new _internal.LateError.fieldNI("_minInMilliseconds"));
    }
    get [_maxInMilliseconds]() {
      let t6;
      return dart.test(this[__RenderBaseSlider__maxInMilliseconds_isSet]) ? (t6 = this[__RenderBaseSlider__maxInMilliseconds], t6) : dart.throw(new _internal.LateError.fieldNI("_maxInMilliseconds"));
    }
    set [_maxInMilliseconds](t6) {
      if (t6 == null) dart.nullFailed(I[2], 99, 15, "null");
      this[__RenderBaseSlider__maxInMilliseconds_isSet] = true;
      this[__RenderBaseSlider__maxInMilliseconds] = t6;
    }
    get [_visibleLabels]() {
      let t7;
      return dart.test(this[__RenderBaseSlider__visibleLabels_isSet]) ? (t7 = this[__RenderBaseSlider__visibleLabels], t7) : dart.throw(new _internal.LateError.fieldNI("_visibleLabels"));
    }
    set [_visibleLabels](t7) {
      if (t7 == null) dart.nullFailed(I[2], 111, 21, "null");
      this[__RenderBaseSlider__visibleLabels_isSet] = true;
      this[__RenderBaseSlider__visibleLabels] = t7;
    }
    get [_majorTickPositions]() {
      let t8;
      return dart.test(this[__RenderBaseSlider__majorTickPositions_isSet]) ? (t8 = this[__RenderBaseSlider__majorTickPositions], t8) : dart.throw(new _internal.LateError.fieldNI("_majorTickPositions"));
    }
    set [_majorTickPositions](t8) {
      if (t8 == null) dart.nullFailed(I[2], 113, 21, "null");
      this[__RenderBaseSlider__majorTickPositions_isSet] = true;
      this[__RenderBaseSlider__majorTickPositions] = t8;
    }
    get [_minorTickPositions]() {
      let t9;
      return dart.test(this[__RenderBaseSlider__minorTickPositions_isSet]) ? (t9 = this[__RenderBaseSlider__minorTickPositions], t9) : dart.throw(new _internal.LateError.fieldNI("_minorTickPositions"));
    }
    set [_minorTickPositions](t9) {
      if (t9 == null) dart.nullFailed(I[2], 115, 21, "null");
      this[__RenderBaseSlider__minorTickPositions_isSet] = true;
      this[__RenderBaseSlider__minorTickPositions] = t9;
    }
    get tapGestureRecognizer() {
      let t10;
      return dart.test(this[__RenderBaseSlider_tapGestureRecognizer_isSet]) ? (t10 = this[__RenderBaseSlider_tapGestureRecognizer], t10) : dart.throw(new _internal.LateError.fieldNI("tapGestureRecognizer"));
    }
    set tapGestureRecognizer(t10) {
      if (t10 == null) dart.nullFailed(I[2], 123, 29, "null");
      this[__RenderBaseSlider_tapGestureRecognizer_isSet] = true;
      this[__RenderBaseSlider_tapGestureRecognizer] = t10;
    }
    get actualHeight() {
      let t11;
      return dart.test(this[__RenderBaseSlider_actualHeight_isSet]) ? (t11 = this[__RenderBaseSlider_actualHeight], t11) : dart.throw(new _internal.LateError.fieldNI("actualHeight"));
    }
    set actualHeight(t11) {
      if (t11 == null) dart.nullFailed(I[2], 125, 15, "null");
      this[__RenderBaseSlider_actualHeight_isSet] = true;
      this[__RenderBaseSlider_actualHeight] = t11;
    }
    get trackOffset() {
      let t12;
      return dart.test(this[__RenderBaseSlider_trackOffset_isSet]) ? (t12 = this[__RenderBaseSlider_trackOffset], t12) : dart.throw(new _internal.LateError.fieldNI("trackOffset"));
    }
    set trackOffset(t12) {
      if (t12 == null) dart.nullFailed(I[2], 127, 15, "null");
      this[__RenderBaseSlider_trackOffset_isSet] = true;
      this[__RenderBaseSlider_trackOffset] = t12;
    }
    get maxTrackHeight() {
      let t13;
      return dart.test(this[__RenderBaseSlider_maxTrackHeight_isSet]) ? (t13 = this[__RenderBaseSlider_maxTrackHeight], t13) : dart.throw(new _internal.LateError.fieldNI("maxTrackHeight"));
    }
    set maxTrackHeight(t13) {
      if (t13 == null) dart.nullFailed(I[2], 129, 15, "null");
      this[__RenderBaseSlider_maxTrackHeight_isSet] = true;
      this[__RenderBaseSlider_maxTrackHeight] = t13;
    }
    get thumbElevationTween() {
      let t14;
      return dart.test(this[__RenderBaseSlider_thumbElevationTween_isSet]) ? (t14 = this[__RenderBaseSlider_thumbElevationTween], t14) : dart.throw(new _internal.LateError.fieldNI("thumbElevationTween"));
    }
    set thumbElevationTween(t14) {
      if (t14 == null) dart.nullFailed(I[2], 142, 22, "null");
      this[__RenderBaseSlider_thumbElevationTween_isSet] = true;
      this[__RenderBaseSlider_thumbElevationTween] = t14;
    }
    get min() {
      return this[_min];
    }
    set min(value) {
      if (dart.equals(this[_min], value)) {
        return;
      }
      this[_min] = value;
      if (core.DateTime.is(this[_min])) {
        this[_minInMilliseconds] = core.DateTime.as(this[_min]).millisecondsSinceEpoch[$toDouble]();
      }
      this.generateLabelsAndMajorTicks();
      this.generateMinorTicks();
      this.markNeedsPaint();
    }
    get max() {
      return this[_max];
    }
    set max(value) {
      if (dart.equals(this[_max], value)) {
        return;
      }
      this[_max] = value;
      if (core.DateTime.is(this[_max])) {
        this[_maxInMilliseconds] = core.DateTime.as(this[_max]).millisecondsSinceEpoch[$toDouble]();
      }
      this.generateLabelsAndMajorTicks();
      this.generateMinorTicks();
      this.markNeedsPaint();
    }
    get interval() {
      return this[_interval];
    }
    set interval(value) {
      if (this[_interval] == value) {
        return;
      }
      this[_interval] = value;
      this.generateLabelsAndMajorTicks();
      this.generateMinorTicks();
      this.markNeedsPaint();
    }
    get stepSize() {
      return this[_stepSize];
    }
    set stepSize(value) {
      if (this[_stepSize] == value) {
        return;
      }
      this[_stepSize] = value;
      this.markNeedsPaint();
    }
    get stepDuration() {
      return this[_stepDuration];
    }
    set stepDuration(value) {
      if (dart.equals(this[_stepDuration], value)) {
        return;
      }
      this[_stepDuration] = value;
    }
    get minorTicksPerInterval() {
      return this[_minorTicksPerInterval];
    }
    set minorTicksPerInterval(value) {
      if (value == null) dart.nullFailed(I[2], 219, 33, "value");
      if (this[_minorTicksPerInterval] == value) {
        return;
      }
      this[_minorTicksPerInterval] = value;
      this.generateMinorTicks();
      this.markNeedsPaint();
    }
    get showTicks() {
      return this[_showTicks];
    }
    set showTicks(value) {
      if (value == null) dart.nullFailed(I[2], 231, 22, "value");
      if (this[_showTicks] == value) {
        return;
      }
      this[_showTicks] = value;
      this.markNeedsLayout();
    }
    get showLabels() {
      return this[_showLabels];
    }
    set showLabels(value) {
      if (value == null) dart.nullFailed(I[2], 242, 23, "value");
      if (this[_showLabels] == value) {
        return;
      }
      this[_showLabels] = value;
      this.markNeedsLayout();
    }
    get showDividers() {
      return this[_showDividers];
    }
    set showDividers(value) {
      if (value == null) dart.nullFailed(I[2], 253, 25, "value");
      if (this[_showDividers] == value) {
        return;
      }
      this[_showDividers] = value;
      this.markNeedsLayout();
    }
    get enableTooltip() {
      return this[_enableTooltip];
    }
    set enableTooltip(value) {
      if (value == null) dart.nullFailed(I[2], 264, 26, "value");
      if (this[_enableTooltip] == value) {
        return;
      }
      this[_enableTooltip] = value;
    }
    get labelPlacement() {
      return this[_labelPlacement];
    }
    set labelPlacement(value) {
      if (value == null) dart.nullFailed(I[2], 274, 37, "value");
      if (this[_labelPlacement] == value) {
        return;
      }
      this[_labelPlacement] = value;
      this.markNeedsPaint();
    }
    get numberFormat() {
      return this[_numberFormat];
    }
    set numberFormat(value) {
      if (value == null) dart.nullFailed(I[2], 285, 33, "value");
      if (dart.equals(this[_numberFormat], value)) {
        return;
      }
      this[_numberFormat] = value;
      this.generateLabelsAndMajorTicks();
      this.markNeedsPaint();
    }
    get dateIntervalType() {
      return this[_dateIntervalType];
    }
    set dateIntervalType(value) {
      if (this[_dateIntervalType] == value) {
        return;
      }
      this[_dateIntervalType] = value;
      this.generateLabelsAndMajorTicks();
      this.generateMinorTicks();
      this.markNeedsPaint();
    }
    get dateFormat() {
      return this[_dateFormat];
    }
    set dateFormat(value) {
      if (dart.equals(this[_dateFormat], value)) {
        return;
      }
      this[_dateFormat] = value;
      this.generateLabelsAndMajorTicks();
      this.markNeedsPaint();
    }
    get labelFormatterCallback() {
      return this[_labelFormatterCallback];
    }
    set labelFormatterCallback(value) {
      if (value == null) dart.nullFailed(I[2], 322, 53, "value");
      if (dart.equals(this[_labelFormatterCallback], value)) {
        return;
      }
      this[_labelFormatterCallback] = value;
      this.markNeedsSemanticsUpdate();
    }
    get tooltipTextFormatterCallback() {
      return this[_tooltipTextFormatterCallback];
    }
    set tooltipTextFormatterCallback(value) {
      if (value == null) dart.nullFailed(I[2], 334, 65, "value");
      if (dart.equals(this[_tooltipTextFormatterCallback], value)) {
        return;
      }
      this[_tooltipTextFormatterCallback] = value;
      this.markNeedsSemanticsUpdate();
    }
    get thumbShape() {
      return this[_thumbShape];
    }
    set thumbShape(value) {
      if (value == null) dart.nullFailed(I[2], 345, 31, "value");
      if (dart.equals(this[_thumbShape], value)) {
        return;
      }
      this[_thumbShape] = value;
      this.markNeedsLayout();
    }
    get overlayShape() {
      return this[_overlayShape];
    }
    set overlayShape(value) {
      if (value == null) dart.nullFailed(I[2], 356, 35, "value");
      if (dart.equals(this[_overlayShape], value)) {
        return;
      }
      this[_overlayShape] = value;
    }
    get trackShape() {
      return this[_trackShape];
    }
    set trackShape(value) {
      if (value == null) dart.nullFailed(I[2], 366, 31, "value");
      if (dart.equals(this[_trackShape], value)) {
        return;
      }
      this[_trackShape] = value;
      this.markNeedsLayout();
    }
    get dividerShape() {
      return this[_dividerShape];
    }
    set dividerShape(value) {
      if (value == null) dart.nullFailed(I[2], 377, 35, "value");
      if (dart.equals(this[_dividerShape], value)) {
        return;
      }
      this[_dividerShape] = value;
      this.markNeedsLayout();
    }
    get tickShape() {
      return this[_tickShape];
    }
    set tickShape(value) {
      if (value == null) dart.nullFailed(I[2], 388, 29, "value");
      if (dart.equals(this[_tickShape], value)) {
        return;
      }
      this[_tickShape] = value;
      this.markNeedsLayout();
    }
    get minorTickShape() {
      return this[_minorTickShape];
    }
    set minorTickShape(value) {
      if (value == null) dart.nullFailed(I[2], 399, 34, "value");
      if (dart.equals(this[_minorTickShape], value)) {
        return;
      }
      this[_minorTickShape] = value;
      this.markNeedsLayout();
    }
    get tooltipShape() {
      return this[_tooltipShape];
    }
    set tooltipShape(value) {
      if (value == null) dart.nullFailed(I[2], 410, 35, "value");
      if (dart.equals(this[_tooltipShape], value)) {
        return;
      }
      this[_tooltipShape] = value;
    }
    get sliderThemeData() {
      return this[_sliderThemeData];
    }
    set sliderThemeData(value) {
      if (value == null) dart.nullFailed(I[2], 420, 41, "value");
      if (dart.equals(this[_sliderThemeData], value)) {
        return;
      }
      this[_sliderThemeData] = value;
      this.markNeedsPaint();
    }
    get textDirection() {
      return this[_textDirection];
    }
    set textDirection(value) {
      if (value == null) dart.nullFailed(I[2], 431, 35, "value");
      if (this[_textDirection] == value) {
        return;
      }
      this[_textDirection] = value;
      this.updateTextPainter();
      this.markNeedsLayout();
    }
    get tooltipPosition() {
      return this[_tooltipPosition];
    }
    set tooltipPosition(value) {
      if (this[_tooltipPosition] == value) {
        return;
      }
      this[_tooltipPosition] = value;
      this.markNeedsPaint();
    }
    get mediaQueryData() {
      return this[_mediaQueryData];
    }
    set mediaQueryData(value) {
      if (value == null) dart.nullFailed(I[2], 454, 37, "value");
      if (dart.equals(this[_mediaQueryData], value)) {
        return;
      }
      this[_mediaQueryData] = value;
      this.updateTextPainter();
      this.markNeedsLayout();
    }
    get isDateTime() {
      return dart.equals(dart.runtimeType(this[_min]), dart.wrapType(core.DateTime)) && dart.equals(dart.runtimeType(this[_max]), dart.wrapType(core.DateTime));
    }
    get actualMin() {
      return dart.test(this.isDateTime) ? this[_minInMilliseconds] : core.double.as(dart.dsend(this[_min], 'toDouble', []));
    }
    get actualMax() {
      return dart.test(this.isDateTime) ? this[_maxInMilliseconds] : core.double.as(dart.dsend(this[_max], 'toDouble', []));
    }
    get isDiscrete() {
      return this[_stepSize] != null && dart.nullCheck(this[_stepSize]) > 0 || this[_stepDuration] != null;
    }
    get [_actualDividerSize]() {
      return this[_dividerShape].getPreferredSize(this[_sliderThemeData]);
    }
    get actualTickSize() {
      return this[_tickShape].getPreferredSize(this[_sliderThemeData]);
    }
    get actualMinorTickSize() {
      return this[_minorTickShape].getPreferredSize(this[_sliderThemeData]);
    }
    get maximumFontSize() {
      return math.max(core.double, dart.nullCheck(dart.nullCheck(this[_sliderThemeData].inactiveLabelStyle).fontSize), dart.nullCheck(dart.nullCheck(this[_sliderThemeData].activeLabelStyle).fontSize));
    }
    get actualLabelSize() {
      return new ui.Size.fromHeight(this.maximumFontSize);
    }
    get actualTrackRect() {
      return this[_trackShape].getPreferredRect(this, this[_sliderThemeData], ui.Offset.zero);
    }
    get actualThumbSize() {
      return this[_thumbShape].getPreferredSize(this[_sliderThemeData]);
    }
    get actualOverlaySize() {
      return this[_overlayShape].getPreferredSize(this[_sliderThemeData]);
    }
    get actualTickHeight() {
      return dart.test(this[_showTicks]) ? dart.notNull(dart.nullCheck(this[_sliderThemeData].tickSize).height) + dart.notNull(this[_sliderThemeData].tickOffset != null ? dart.nullCheck(this[_sliderThemeData].tickOffset).dy : 0) : 0.0;
    }
    get actualTickWidth() {
      return dart.test(this[_showTicks]) ? dart.notNull(dart.nullCheck(this[_sliderThemeData].tickSize).width) + dart.notNull(this[_sliderThemeData].tickOffset != null ? dart.nullCheck(this[_sliderThemeData].tickOffset).dx : 0) : 0.0;
    }
    get actualMinorTickHeight() {
      return dart.notNull(this[_minorTicksPerInterval]) > 0 ? this.actualMinorTickSize.height : 0.0;
    }
    get actualMinorTickWidth() {
      return dart.notNull(this[_minorTicksPerInterval]) > 0 ? this.actualMinorTickSize.width : 0.0;
    }
    get actualLabelHeight() {
      return dart.test(this[_showLabels]) ? dart.notNull(this.actualLabelSize.height) * dart.notNull(this.textPainter.textScaleFactor) + dart.notNull(this[_sliderThemeData].labelOffset != null ? dart.nullCheck(this[_sliderThemeData].labelOffset).dy : 0) : 0.0;
    }
    get actualLabelOffset() {
      return dart.test(this[_showLabels]) ? this[_sliderThemeData].labelOffset != null ? dart.nullCheck(this[_sliderThemeData].labelOffset).dx : 0.0 : 0.0;
    }
    get tooltipStartY() {
      return this.sliderType == constants.SliderType.vertical ? math.max(core.double, this.actualThumbSize.width, this.actualTrackRect.width) / 2 + 10 : slider_shapes.SfPaddleTooltipShape.is(this[_tooltipShape]) ? math.max(core.double, this.actualThumbSize.height, this.actualTrackRect.height) / 2 : math.max(core.double, this.actualThumbSize.height, this.actualTrackRect.height) / 2 + 10;
    }
    get adjustmentUnit() {
      return (dart.notNull(this.actualMax) - dart.notNull(this.actualMin)) / 10;
    }
    get semanticActionUnit() {
      let t15, t15$;
      return dart.test(this.isDateTime) ? (t15 = this[_stepDuration], t15 == null ? this.adjustmentUnit : t15) : (t15$ = this[_stepSize], t15$ == null ? this.adjustmentUnit : t15$);
    }
    updateTextPainter() {
      let t15;
      t15 = this.textPainter;
      (() => {
        t15.textDirection = this[_textDirection];
        t15.textScaleFactor = this[_mediaQueryData].textScaleFactor;
        return t15;
      })();
    }
    [_getTrackOffset]() {
      let dx = dart.notNull(T.JSArrayOfdouble().of([this.actualOverlaySize.width, this.actualThumbSize.width, this.actualTickSize.width, this.actualMinorTickSize.width])[$reduce](dart.gbind(C[3] || CT.C3, core.double))) / 2;
      let dy = dart.notNull(T.JSArrayOfdouble().of([this.actualOverlaySize.height, this.actualThumbSize.height, this[_actualDividerSize].height, this.maxTrackHeight])[$reduce](dart.gbind(C[3] || CT.C3, core.double))) / 2;
      return new ui.Offset.new(dx, dy);
    }
    getMaxTrackHeight() {
      return math.max(core.double, this[_sliderThemeData].activeTrackHeight, this[_sliderThemeData].inactiveTrackHeight);
    }
    getFormattedText(value) {
      if (dart.test(this.isDateTime)) {
        return this[_dateFormat] != null ? dart.nullCheck(this[_dateFormat]).format(core.DateTime.as(value)) : dart.toString(value);
      }
      return this[_numberFormat].format(value);
    }
    getFactorFromValue(value) {
      let factor = value == null || dart.notNull(this.actualMax) <= dart.notNull(this.actualMin) ? 0.0 : core.double.as(dart.dsend(dart.dsend(value, '-', [this.actualMin]), '/', [dart.notNull(this.actualMax) - dart.notNull(this.actualMin)]));
      if (this.sliderType == constants.SliderType.vertical) {
        return factor;
      } else {
        return this[_textDirection] == ui.TextDirection.rtl ? 1.0 - dart.notNull(factor) : factor;
      }
    }
    getPositionFromValue(value) {
      if (value == null) dart.nullFailed(I[2], 604, 38, "value");
      return this.sliderType == constants.SliderType.vertical ? dart.notNull(this.actualTrackRect.bottom) - dart.notNull(this.getFactorFromValue(value)) * dart.notNull(this.actualTrackRect.height) : dart.notNull(this.getFactorFromValue(value)) * dart.notNull(this.actualTrackRect.width) + dart.notNull(this.actualTrackRect.left);
    }
    generateLabelsAndMajorTicks() {
      let t15;
      this[_visibleLabels][$clear]();
      t15 = this.unformattedLabels;
      t15 == null ? null : t15[$clear]();
      this[_majorTickPositions][$clear]();
      if (this[_interval] != null && dart.nullCheck(this[_interval]) > 0) {
        this[_generateLabelsAndMajorTicksBasedOnInterval]();
      } else if (dart.test(this[_showTicks]) || dart.test(this[_showLabels])) {
        this[_generateEdgeLabelsAndMajorTicks]();
      }
    }
    [_generateLabelsAndMajorTicksBasedOnInterval]() {
      let t16, t15, t15$;
      let label = null;
      let labelPosition = null;
      let valueInMilliseconds = null;
      let currentValue = this[_min];
      this.divisions = core.double.as(dart.dsend(dart.dsend(dart.test(this.isDateTime) ? this[_getDateTimeDifference](core.DateTime.as(this[_min]), core.DateTime.as(this[_max]), this[_dateIntervalType]) : dart.dsend(this[_max], '-', [this[_min]]), 'toDouble', []), '/', [this[_interval]]));
      for (let i = 0; i <= dart.nullCheck(this.divisions); i = i + 1) {
        label = (t15 = currentValue, t16 = this.getFormattedText(currentValue), this[_labelFormatterCallback](t15, t16));
        if (dart.test(this.isDateTime)) {
          valueInMilliseconds = core.DateTime.as(currentValue).millisecondsSinceEpoch;
        }
        this[_visibleLabels][$add](label);
        t15$ = this.unformattedLabels;
        t15$ == null ? null : t15$[$add](core.double.as(dart.test(this.isDateTime) ? dart.nullCheck(valueInMilliseconds)[$toDouble]() : dart.dsend(currentValue, 'toDouble', [])));
        if (this.sliderType == constants.SliderType.vertical) {
          labelPosition = dart.notNull(this.getFactorFromValue(dart.test(this.isDateTime) ? valueInMilliseconds : currentValue)) * dart.notNull(this.actualTrackRect.height);
        } else {
          labelPosition = dart.notNull(this.getFactorFromValue(dart.test(this.isDateTime) ? valueInMilliseconds : currentValue)) * dart.notNull(this.actualTrackRect.width);
        }
        if (!dart.test(this[_majorTickPositions][$contains](labelPosition))) {
          this[_majorTickPositions][$add](labelPosition);
        }
        currentValue = dart.test(this.isDateTime) ? this[_getNextDate](core.DateTime.as(currentValue), this[_dateIntervalType], dart.nullCheck(this[_interval])) : dart.dsend(currentValue, '+', [this[_interval]]);
      }
    }
    [_generateEdgeLabelsAndMajorTicks]() {
      let t16, t15, t15$, t16$, t15$0, t15$1;
      let label = null;
      let labelPosition = null;
      this.divisions = 1.0;
      label = (t15 = this[_min], t16 = this.getFormattedText(this[_min]), this[_labelFormatterCallback](t15, t16));
      this[_visibleLabels][$add](label);
      t15$ = this.unformattedLabels;
      t15$ == null ? null : t15$[$add](core.double.as(dart.test(this.isDateTime) ? dart.dsend(dart.dload(this[_min], 'millisecondsSinceEpoch'), 'toDouble', []) : dart.dsend(this[_min], 'toDouble', [])));
      label = (t15$0 = this[_max], t16$ = this.getFormattedText(this[_max]), this[_labelFormatterCallback](t15$0, t16$));
      this[_visibleLabels][$add](label);
      t15$1 = this.unformattedLabels;
      t15$1 == null ? null : t15$1[$add](core.double.as(dart.test(this.isDateTime) ? dart.dsend(dart.dload(this[_max], 'millisecondsSinceEpoch'), 'toDouble', []) : dart.dsend(this[_max], 'toDouble', [])));
      labelPosition = dart.notNull(this.getFactorFromValue(this.actualMin)) * dart.notNull(this.sliderType == constants.SliderType.vertical ? this.actualTrackRect.height : this.actualTrackRect.width);
      this[_majorTickPositions][$add](labelPosition);
      labelPosition = dart.notNull(this.getFactorFromValue(this.actualMax)) * dart.notNull(this.sliderType == constants.SliderType.vertical ? this.actualTrackRect.height : this.actualTrackRect.width);
      this[_majorTickPositions][$add](labelPosition);
    }
    generateMinorTicks() {
      if (this[_interval] != null && dart.nullCheck(this[_interval]) > 0) {
        this[_minorTickPositions][$clear]();
        if (dart.notNull(this[_minorTicksPerInterval]) > 0) {
          if (dart.test(this.isDateTime)) {
            this[_generateDateTimeMinorTicks]();
          } else {
            this[_generateNumericMinorTicks]();
          }
        }
      }
    }
    [_generateDateTimeMinorTicks]() {
      let majorTicksCount = this[_majorTickPositions][$length];
      let minorTickPosition = null;
      let nextDate = this[_getNextDate](core.DateTime.as(this[_min]), this[_dateIntervalType], dart.nullCheck(this[_interval]));
      let currentActualDate = this[_getNextDate](nextDate, this[_dateIntervalType], -dart.nullCheck(this[_interval]));
      for (let i = 1; i <= dart.notNull(majorTicksCount); i = i + 1) {
        let intervalDiff = dart.notNull(this[_getDateTimeDifference](currentActualDate, nextDate, this[_dateIntervalType])) / (dart.notNull(this[_minorTicksPerInterval]) + 1);
        if (intervalDiff === 1.0) {
          for (let j = 1.0; j <= dart.notNull(this[_minorTicksPerInterval]); j = j + 1) {
            let nextMinorDate = this[_getNextDate](currentActualDate, this[_dateIntervalType], j);
            minorTickPosition = this[_updateMinorTicksPosition](nextMinorDate.millisecondsSinceEpoch[$toDouble]());
            this[_minorTickPositions][$add](minorTickPosition);
          }
        } else {
          let minorPositionDiff = (dart.notNull(nextDate.millisecondsSinceEpoch) - dart.notNull(currentActualDate.millisecondsSinceEpoch)) / (dart.notNull(this[_minorTicksPerInterval]) + 1);
          for (let j = 1; j <= dart.notNull(this[_minorTicksPerInterval]); j = j + 1) {
            minorTickPosition = this[_updateMinorTicksPosition](dart.notNull(currentActualDate.millisecondsSinceEpoch) + j * minorPositionDiff);
            this[_minorTickPositions][$add](minorTickPosition);
          }
        }
        currentActualDate = nextDate;
        nextDate = this[_getNextDate](currentActualDate, this[_dateIntervalType], dart.nullCheck(this[_interval]));
      }
    }
    [_updateMinorTicksPosition](value) {
      if (value == null) dart.nullFailed(I[2], 742, 43, "value");
      return dart.notNull(this.getFactorFromValue(value)) * dart.notNull(this.sliderType == constants.SliderType.vertical ? this.actualTrackRect.height : this.actualTrackRect.width);
    }
    [_generateNumericMinorTicks]() {
      let majorTicksCount = this[_majorTickPositions][$length];
      for (let i = 0; i <= dart.notNull(majorTicksCount) - 1; i = i + 1) {
        let minorPositionDiff = (dart.notNull(i + 1 < dart.notNull(majorTicksCount) ? this[_majorTickPositions][$_get](i + 1) : this.sliderType == constants.SliderType.vertical ? this.actualTrackRect.height : this.actualTrackRect.width) - dart.notNull(this[_majorTickPositions][$_get](i))) / (dart.notNull(this[_minorTicksPerInterval]) + 1);
        for (let j = 1; j <= dart.notNull(this[_minorTicksPerInterval]); j = j + 1) {
          this[_minorTickPositions][$add](dart.notNull(this[_majorTickPositions][$_get](i)) + j * minorPositionDiff);
        }
      }
    }
    [_getDateTimeDifference](min, max, intervalType) {
      if (min == null) dart.nullFailed(I[2], 769, 16, "min");
      if (max == null) dart.nullFailed(I[2], 769, 30, "max");
      if (!(intervalType != null)) dart.assertFailed(null, I[2], 770, 12, "intervalType != null");
      let diff = max.difference(min);
      switch (dart.nullCheck(intervalType)) {
        case C[4] || CT.C4:
        {
          return (dart.notNull(max.year) - dart.notNull(min.year)) * 12 + dart.notNull(max.month) - dart.notNull(min.month);
        }
        case C[5] || CT.C5:
        {
          return diff.inDays;
        }
        case C[6] || CT.C6:
        {
          return diff.inHours;
        }
        case C[7] || CT.C7:
        {
          return diff.inMinutes;
        }
        case C[8] || CT.C8:
        {
          return diff.inSeconds;
        }
        case C[9] || CT.C9:
        {
          return dart.notNull(max.year) - dart.notNull(min.year);
        }
        default:
        {
          dart.throw(new _internal.ReachabilityError.new("`null` encountered as case in a switch expression with a non-nullable enum type."));
        }
      }
    }
    [_getNextDate](currentDate, intervalType, interval) {
      if (currentDate == null) dart.nullFailed(I[2], 793, 16, "currentDate");
      if (interval == null) dart.nullFailed(I[2], 793, 68, "interval");
      if (!(intervalType != null)) dart.assertFailed(null, I[2], 794, 12, "intervalType != null");
      switch (dart.nullCheck(intervalType)) {
        case C[4] || CT.C4:
        {
          return new core.DateTime.new(currentDate.year, dart.notNull(currentDate.month) + interval[$ceil](), 1);
        }
        case C[5] || CT.C5:
        {
          currentDate = currentDate.add(new core.Duration.new({days: interval[$ceil]()}));
          return new core.DateTime.new(currentDate.year, currentDate.month, currentDate.day);
        }
        case C[6] || CT.C6:
        {
          currentDate = currentDate.add(new core.Duration.new({hours: interval[$ceil]()}));
          return new core.DateTime.new(currentDate.year, currentDate.month, currentDate.day, currentDate.hour);
        }
        case C[7] || CT.C7:
        {
          return currentDate.add(new core.Duration.new({minutes: interval[$ceil]()}));
        }
        case C[8] || CT.C8:
        {
          return currentDate.add(new core.Duration.new({seconds: interval[$ceil]()}));
        }
        case C[9] || CT.C9:
        {
          return new core.DateTime.new(dart.notNull(currentDate.year) + interval[$ceil](), 1, 1);
        }
        default:
        {
          dart.throw(new _internal.ReachabilityError.new("`null` encountered as case in a switch expression with a non-nullable enum type."));
        }
      }
    }
    getValueFromPosition(position) {
      if (position == null) dart.nullFailed(I[2], 816, 39, "position");
      let valueFactor = this.sliderType == constants.SliderType.vertical ? (1 - (dart.notNull(this.actualTrackRect.height) - dart.notNull(position)) / dart.notNull(this.actualTrackRect.height))[$clamp](0.0, 1.0) : ((dart.notNull(position) - dart.notNull(this.actualTrackRect.left)) / dart.notNull(this.actualTrackRect.width))[$clamp](0.0, 1.0);
      if (this.sliderType != constants.SliderType.vertical) {
        if (this[_textDirection] == ui.TextDirection.rtl) {
          valueFactor = 1.0 - valueFactor;
        }
      }
      let actualValue = this.getValueFromFactor(valueFactor);
      return this.getActualValue({valueInDouble: T.doubleN().as(actualValue)});
    }
    getActualValue(opts) {
      let t15, t15$, t15$0, t15$1;
      let value = opts && 'value' in opts ? opts.value : null;
      let valueInDouble = opts && 'valueInDouble' in opts ? opts.valueInDouble : null;
      if (dart.test(this.isDiscrete)) {
        if (!dart.test(this.isDateTime)) {
          let maxMinDiff = this.getNumerizedValue(dart.dsend(this[_max], '-', [this[_min]]));
          let factorValue = (dart.notNull(this.getFactorFromValue((t15 = valueInDouble, t15 == null ? value : t15))) * (dart.notNull(maxMinDiff) / dart.nullCheck(this[_stepSize])))[$round]() / (dart.notNull(maxMinDiff) / dart.nullCheck(this[_stepSize]));
          value = this.getValueFromFactor((this.sliderType == constants.SliderType.horizontal && this[_textDirection] == ui.TextDirection.rtl ? 1 - factorValue : factorValue)[$clamp](0.0, 1.0));
        } else {
          let currentDate = core.DateTime.as(this[_min]);
          let nextDate = null;
          value = (t15$ = valueInDouble, t15$ == null ? dart.dsend(dart.dload(value, 'millisecondsSinceEpoch'), 'toDouble', []) : t15$);
          let clampedValue = core.double.as(dart.dsend(value, 'clamp', [this.actualMin, this.actualMax]));
          for (let i = this.actualMin; dart.notNull(i) < dart.notNull(this.actualMax);) {
            nextDate = new core.DateTime.new(dart.notNull(currentDate.year) + dart.notNull(dart.nullCheck(this[_stepDuration]).years), dart.notNull(currentDate.month) + dart.notNull(dart.nullCheck(this[_stepDuration]).months), dart.notNull(currentDate.day) + dart.notNull(dart.nullCheck(this[_stepDuration]).days), dart.notNull(currentDate.hour) + dart.notNull(dart.nullCheck(this[_stepDuration]).days), dart.notNull(currentDate.minute) + dart.notNull(dart.nullCheck(this[_stepDuration]).minutes), dart.notNull(currentDate.second) + dart.notNull(dart.nullCheck(this[_stepDuration]).seconds));
            let currentDateInms = currentDate.millisecondsSinceEpoch[$toDouble]();
            let nextDateInms = nextDate.millisecondsSinceEpoch[$toDouble]();
            if (dart.notNull(clampedValue) >= currentDateInms && dart.notNull(clampedValue) <= nextDateInms) {
              let dateDiff = (nextDateInms - currentDateInms)[$abs]();
              let halfDateDiff = dateDiff / 2;
              let shouldMoveNextInterval = dart.notNull(clampedValue) >= currentDateInms + halfDateDiff;
              value = shouldMoveNextInterval ? nextDate : currentDate;
              break;
            }
            i = nextDateInms;
            currentDate = nextDate;
          }
        }
      }
      return dart.test(this.isDateTime) ? (t15$0 = value, t15$0 == null ? new core.DateTime.fromMillisecondsSinceEpoch(dart.nullCheck(valueInDouble)[$toInt]()) : t15$0) : (t15$1 = value, t15$1 == null ? valueInDouble : t15$1);
    }
    getValueFromFactor(factor) {
      if (factor == null) dart.nullFailed(I[2], 889, 36, "factor");
      return dart.notNull(factor) * (dart.notNull(this.actualMax) - dart.notNull(this.actualMin)) + dart.notNull(this.actualMin);
    }
    getFactorFromCurrentPosition() {
      let factor = this.sliderType == constants.SliderType.vertical ? ((dart.notNull(this.actualTrackRect.bottom) - dart.notNull(this.mainAxisOffset)) / dart.notNull(this.actualTrackRect.height))[$clamp](0.0, 1.0) : ((dart.notNull(this.mainAxisOffset) - dart.notNull(this.actualTrackRect.left)) / dart.notNull(this.actualTrackRect.width))[$clamp](0.0, 1.0);
      if (this.sliderType == constants.SliderType.vertical) {
        return factor;
      } else {
        return this[_textDirection] == ui.TextDirection.rtl ? 1.0 - factor : factor;
      }
    }
    getRectangularTooltipRect(textPainter, offset, thumbCenter, trackRect, themeData) {
      if (textPainter == null) dart.nullFailed(I[2], 906, 46, "textPainter");
      if (offset == null) dart.nullFailed(I[2], 906, 66, "offset");
      if (thumbCenter == null) dart.nullFailed(I[2], 907, 14, "thumbCenter");
      if (trackRect == null) dart.nullFailed(I[2], 907, 32, "trackRect");
      if (themeData == null) dart.nullFailed(I[2], 907, 61, "themeData");
      let rectangularTooltipHeight = dart.notNull(textPainter.height) + dart.notNull(constants.tooltipTextPadding.dy) > 37 ? dart.notNull(textPainter.height) + dart.notNull(constants.tooltipTextPadding.dy) : 37;
      let halfTextWidth = dart.notNull(textPainter.width) + dart.notNull(constants.tooltipTextPadding.dx) > 47 ? (dart.notNull(textPainter.width) + dart.notNull(constants.tooltipTextPadding.dx)) / 2 : 47 / 2;
      let rightLineWidth = dart.notNull(thumbCenter.dx) + halfTextWidth > dart.notNull(trackRect.right) ? dart.notNull(trackRect.right) - dart.notNull(thumbCenter.dx) : halfTextWidth;
      let leftLineWidth = dart.notNull(thumbCenter.dx) - halfTextWidth < dart.notNull(trackRect.left) ? dart.notNull(thumbCenter.dx) - dart.notNull(trackRect.left) : halfTextWidth * 2 - rightLineWidth;
      rightLineWidth = leftLineWidth < halfTextWidth ? halfTextWidth - leftLineWidth + rightLineWidth : rightLineWidth;
      let left = dart.notNull(thumbCenter.dx) - leftLineWidth;
      let right = dart.notNull(thumbCenter.dx) + rightLineWidth;
      let top = dart.notNull(thumbCenter.dy) - rectangularTooltipHeight - dart.notNull(offset.dy) - 7;
      let bottom = dart.notNull(thumbCenter.dy) - dart.notNull(offset.dy);
      return new ui.Rect.fromLTRB(left, top, right, bottom);
    }
    getPaddleTooltipRect(textPainter, offset, thumbCenter, trackRect, themeData) {
      if (textPainter == null) dart.nullFailed(I[2], 938, 41, "textPainter");
      if (offset == null) dart.nullFailed(I[2], 938, 61, "offset");
      if (thumbCenter == null) dart.nullFailed(I[2], 939, 14, "thumbCenter");
      if (trackRect == null) dart.nullFailed(I[2], 939, 32, "trackRect");
      if (themeData == null) dart.nullFailed(I[2], 939, 61, "themeData");
      let paddleTooltipRadius = dart.notNull(textPainter.height) > 16 ? textPainter.height : 16;
      let topNeckRadius = dart.notNull(paddleTooltipRadius) - 3;
      let bottomNeckRadius = dart.notNull(themeData.thumbRadius) > 16 * 0.25 ? dart.notNull(themeData.thumbRadius) - 3 : 4.0;
      let halfTextWidth = dart.notNull(textPainter.width) / 2 + 8;
      let halfPaddleWidth = halfTextWidth > dart.notNull(paddleTooltipRadius) ? halfTextWidth : paddleTooltipRadius;
      let shift = this[_getAdjustPaddleWidth](thumbCenter, offset, halfTextWidth - dart.notNull(paddleTooltipRadius), paddleTooltipRadius, trackRect);
      let left = dart.notNull(thumbCenter.dx) - dart.notNull(halfPaddleWidth) - dart.notNull(shift);
      let right = dart.notNull(thumbCenter.dx) + dart.notNull(halfPaddleWidth) - dart.notNull(shift);
      let top = dart.notNull(thumbCenter.dy) - dart.notNull(paddleTooltipRadius) - dart.notNull(paddleTooltipRadius) * (1.0 - 0.25) - topNeckRadius - dart.notNull(offset.dy) * (1.0 - 0.25) - bottomNeckRadius;
      let bottom = dart.notNull(thumbCenter.dy) + dart.notNull(themeData.thumbRadius);
      return new ui.Rect.fromLTRB(left, top, right, bottom);
    }
    [_getAdjustPaddleWidth](thumbCenter, offset, halfTextWidth, paddleTopCircleRadius, trackRect) {
      if (thumbCenter == null) dart.nullFailed(I[2], 967, 39, "thumbCenter");
      if (offset == null) dart.nullFailed(I[2], 967, 59, "offset");
      if (halfTextWidth == null) dart.nullFailed(I[2], 968, 14, "halfTextWidth");
      if (paddleTopCircleRadius == null) dart.nullFailed(I[2], 968, 36, "paddleTopCircleRadius");
      if (trackRect == null) dart.nullFailed(I[2], 968, 64, "trackRect");
      let leftShiftWidth = dart.notNull(thumbCenter.dx) - dart.notNull(offset.dx) - dart.notNull(halfTextWidth) - dart.notNull(paddleTopCircleRadius);
      let shiftPaddleWidth = leftShiftWidth < 0 ? leftShiftWidth : 0.0;
      let rightEndPosition = dart.notNull(trackRect.right) + dart.notNull(trackRect.left) - dart.notNull(offset.dx);
      shiftPaddleWidth = dart.notNull(thumbCenter.dx) + dart.notNull(halfTextWidth) + dart.notNull(paddleTopCircleRadius) > rightEndPosition ? dart.notNull(thumbCenter.dx) + dart.notNull(halfTextWidth) + dart.notNull(paddleTopCircleRadius) - rightEndPosition : shiftPaddleWidth;
      return shiftPaddleWidth;
    }
    drawLabelsTicksAndDividers(context, trackRect, offset, thumbCenter, startThumbCenter, endThumbCenter, stateAnimation, value, values) {
      if (context == null) dart.nullFailed(I[2], 989, 23, "context");
      if (trackRect == null) dart.nullFailed(I[2], 990, 12, "trackRect");
      if (offset == null) dart.nullFailed(I[2], 991, 14, "offset");
      if (stateAnimation == null) dart.nullFailed(I[2], 995, 25, "stateAnimation");
      let dateTimePos = 0;
      let dx = this.sliderType == constants.SliderType.vertical ? trackRect.bottom : trackRect.left;
      let dy = this.sliderType == constants.SliderType.vertical ? trackRect.left : trackRect.top;
      let halfTrackHeight = this.sliderType == constants.SliderType.vertical ? dart.notNull(trackRect.width) / 2 : dart.notNull(trackRect.height) / 2;
      let isActive = startThumbCenter != null ? this.sliderType == constants.SliderType.vertical ? dart.notNull(offset.dy) <= dart.notNull(startThumbCenter.dy) && dart.notNull(offset.dy) >= dart.notNull(dart.nullCheck(endThumbCenter).dy) : dart.notNull(offset.dx) >= dart.notNull(startThumbCenter.dx) && dart.notNull(offset.dx) <= dart.notNull(dart.nullCheck(endThumbCenter).dx) : this.sliderType == constants.SliderType.vertical ? dart.notNull(offset.dy) <= dart.notNull(dart.nullCheck(thumbCenter).dy) : dart.notNull(offset.dx) <= dart.notNull(dart.nullCheck(thumbCenter).dx);
      let dividerRadius = dart.notNull(this[_dividerShape].getPreferredSize(this[_sliderThemeData], {isActive: isActive}).width) / 2;
      let tickRadius = this.sliderType == constants.SliderType.vertical ? dart.notNull(this[_tickShape].getPreferredSize(this[_sliderThemeData]).height) / 2 : dart.notNull(this[_tickShape].getPreferredSize(this[_sliderThemeData]).width) / 2;
      let textValue = dart.test(this.isDateTime) ? 0.0 : core.double.as(dart.dsend(this[_min], 'toDouble', []));
      let minorTickIndex = 0;
      let maxRange = core.double.as(dart.test(this.isDateTime) ? this.divisions : dart.dsend(this[_max], 'toDouble', []));
      if (this.divisions != null && dart.nullCheck(this.divisions) > 0) {
        while (dart.notNull(textValue) <= dart.notNull(maxRange)) {
          let tickPosition = this[_majorTickPositions][$_get](dateTimePos);
          if (dart.test(this[_showTicks])) {
            this[_drawTick](dx, tickPosition, dy, trackRect, dateTimePos, tickRadius, context, thumbCenter, startThumbCenter, endThumbCenter, value, values, stateAnimation);
          }
          if (this[_interval] != null && dart.nullCheck(this[_interval]) > 0) {
            if (dart.notNull(this[_minorTicksPerInterval]) > 0) {
              for (let j = 0; j < dart.notNull(this[_minorTicksPerInterval]); j = j + 1) {
                let currentMinorTickPosition = this[_minorTickPositions][$_get](minorTickIndex);
                minorTickIndex = minorTickIndex + 1;
                this[_drawMinorTick](currentMinorTickPosition, trackRect, dx, dy, context, thumbCenter, startThumbCenter, endThumbCenter, value, values, stateAnimation);
              }
            }
            if (dart.test(this[_showDividers])) {
              this[_drawDivider](dx, tickPosition, dy, halfTrackHeight, dateTimePos, dividerRadius, trackRect, context, thumbCenter, startThumbCenter, endThumbCenter, value, values, stateAnimation);
            }
          }
          if (dart.test(this[_showLabels])) {
            let dx = this.sliderType == constants.SliderType.vertical ? trackRect.bottom : trackRect.left;
            let isRTL = this[_textDirection] == ui.TextDirection.rtl;
            let offsetX = this.sliderType == constants.SliderType.vertical ? dart.notNull(dx) - dart.notNull(tickPosition) : dart.notNull(dx) + dart.notNull(tickPosition);
            if (this[_labelPlacement] == common.LabelPlacement.betweenTicks) {
              if (this.sliderType == constants.SliderType.vertical) {
                if (dateTimePos + 1 <= dart.nullCheck(this.divisions)) {
                  offsetX = offsetX - (dart.notNull(this[_majorTickPositions][$_get](dateTimePos + 1)) - dart.notNull(tickPosition)) / 2;
                } else {
                  break;
                }
              } else {
                offsetX = offsetX + (dart.notNull(dateTimePos + 1 <= dart.nullCheck(this.divisions) ? this[_majorTickPositions][$_get](dateTimePos + 1) : isRTL ? trackRect.left : trackRect.width) - dart.notNull(tickPosition)) / 2;
                if (isRTL ? offsetX <= dart.notNull(trackRect.left) : offsetX - dart.notNull(dx) >= dart.notNull(trackRect.width)) {
                  break;
                }
              }
            }
            this[_drawLabel](dateTimePos, dx, tickPosition, trackRect, dy, context, thumbCenter, startThumbCenter, endThumbCenter, value, values, stateAnimation, offsetX);
          }
          let intervalDiff = core.double.as(dart.test(this.isDateTime) ? 1.0 : this[_interval] != null && dart.nullCheck(this[_interval]) > 0 ? this[_interval] : dart.dsend(dart.dsend(this[_max], 'toDouble', []), '-', [dart.dsend(this[_min], 'toDouble', [])]));
          textValue = dart.notNull(textValue) + dart.notNull(intervalDiff);
          dateTimePos = dateTimePos + 1;
        }
      }
    }
    [_drawTick](dx, tickPosition, dy, trackRect, dateTimePos, tickRadius, context, thumbCenter, startThumbCenter, endThumbCenter, value, values, stateAnimation) {
      let t15, t15$, t15$0, t15$1, t15$2, t15$3;
      if (dx == null) dart.nullFailed(I[2], 1161, 14, "dx");
      if (tickPosition == null) dart.nullFailed(I[2], 1162, 14, "tickPosition");
      if (dy == null) dart.nullFailed(I[2], 1163, 14, "dy");
      if (trackRect == null) dart.nullFailed(I[2], 1164, 12, "trackRect");
      if (dateTimePos == null) dart.nullFailed(I[2], 1165, 11, "dateTimePos");
      if (tickRadius == null) dart.nullFailed(I[2], 1166, 14, "tickRadius");
      if (context == null) dart.nullFailed(I[2], 1167, 23, "context");
      if (stateAnimation == null) dart.nullFailed(I[2], 1173, 25, "stateAnimation");
      let actualTickOffset = this.sliderType == constants.SliderType.vertical ? new ui.Offset.new(dart.notNull(dy) + dart.notNull(trackRect.width), dart.notNull(dx) - dart.notNull(tickPosition))['+']((t15 = this[_sliderThemeData].tickOffset, t15 == null ? ui.Offset.zero : t15)) : new ui.Offset.new(dart.notNull(dx) + dart.notNull(tickPosition), dart.notNull(dy) + dart.notNull(trackRect.height))['+']((t15$ = this[_sliderThemeData].tickOffset, t15$ == null ? ui.Offset.zero : t15$));
      if (this[_majorTickPositions][$_get](dateTimePos) === 0.0) {
        actualTickOffset = this.sliderType == constants.SliderType.vertical ? new ui.Offset.new(dart.notNull(dy) + dart.notNull(trackRect.width), dart.notNull(dx) - dart.notNull(tickPosition) - dart.notNull(tickRadius))['+']((t15$0 = this[_sliderThemeData].tickOffset, t15$0 == null ? ui.Offset.zero : t15$0)) : new ui.Offset.new(dart.notNull(dx) + dart.notNull(tickPosition) + dart.notNull(tickRadius), dart.notNull(dy) + dart.notNull(trackRect.height))['+']((t15$1 = this[_sliderThemeData].tickOffset, t15$1 == null ? ui.Offset.zero : t15$1));
      } else if (this[_majorTickPositions][$_get](dateTimePos)[$toStringAsFixed](8) === (this.sliderType == constants.SliderType.vertical ? trackRect.height[$toStringAsFixed](8) : trackRect.width[$toStringAsFixed](8))) {
        actualTickOffset = this.sliderType == constants.SliderType.vertical ? new ui.Offset.new(dart.notNull(dy) + dart.notNull(trackRect.width), dart.notNull(dx) - dart.notNull(tickPosition) + dart.notNull(tickRadius))['+']((t15$2 = this[_sliderThemeData].tickOffset, t15$2 == null ? ui.Offset.zero : t15$2)) : new ui.Offset.new(dart.notNull(dx) + dart.notNull(tickPosition) - dart.notNull(tickRadius), dart.notNull(dy) + dart.notNull(trackRect.height))['+']((t15$3 = this[_sliderThemeData].tickOffset, t15$3 == null ? ui.Offset.zero : t15$3));
      }
      this[_tickShape].paint(context, actualTickOffset, thumbCenter, startThumbCenter, endThumbCenter, {parentBox: this, themeData: this[_sliderThemeData], currentValue: value, currentValues: values, enableAnimation: stateAnimation, textDirection: this[_textDirection]});
    }
    [_drawMinorTick](currentMinorTickPosition, trackRect, dx, dy, context, thumbCenter, startThumbCenter, endThumbCenter, value, values, stateAnimation) {
      let t15, t15$;
      if (currentMinorTickPosition == null) dart.nullFailed(I[2], 1214, 14, "currentMinorTickPosition");
      if (trackRect == null) dart.nullFailed(I[2], 1215, 12, "trackRect");
      if (dx == null) dart.nullFailed(I[2], 1216, 14, "dx");
      if (dy == null) dart.nullFailed(I[2], 1217, 14, "dy");
      if (context == null) dart.nullFailed(I[2], 1218, 23, "context");
      if (stateAnimation == null) dart.nullFailed(I[2], 1224, 25, "stateAnimation");
      if (dart.notNull(currentMinorTickPosition) < dart.notNull(this.sliderType == constants.SliderType.vertical ? trackRect.height : trackRect.width) && dart.notNull(currentMinorTickPosition) > 0) {
        let actualTickOffset = this.sliderType == constants.SliderType.vertical ? new ui.Offset.new(dart.notNull(dy) + dart.notNull(trackRect.width), dart.notNull(dx) - dart.notNull(currentMinorTickPosition))['+']((t15 = this[_sliderThemeData].tickOffset, t15 == null ? ui.Offset.zero : t15)) : new ui.Offset.new(dart.notNull(dx) + dart.notNull(currentMinorTickPosition), dart.notNull(dy) + dart.notNull(trackRect.height))['+']((t15$ = this[_sliderThemeData].tickOffset, t15$ == null ? ui.Offset.zero : t15$));
        this[_minorTickShape].paint(context, actualTickOffset, thumbCenter, startThumbCenter, endThumbCenter, {parentBox: this, themeData: this[_sliderThemeData], currentValue: value, currentValues: values, enableAnimation: stateAnimation, textDirection: this[_textDirection]});
      }
    }
    [_drawDivider](dx, tickPosition, dy, halfTrackHeight, _dateTimePos, dividerRadius, trackRect, context, thumbCenter, startThumbCenter, endThumbCenter, value, values, stateAnimation) {
      if (dx == null) dart.nullFailed(I[2], 1247, 14, "dx");
      if (tickPosition == null) dart.nullFailed(I[2], 1248, 14, "tickPosition");
      if (dy == null) dart.nullFailed(I[2], 1249, 14, "dy");
      if (halfTrackHeight == null) dart.nullFailed(I[2], 1250, 14, "halfTrackHeight");
      if (_dateTimePos == null) dart.nullFailed(I[2], 1251, 11, "_dateTimePos");
      if (dividerRadius == null) dart.nullFailed(I[2], 1252, 14, "dividerRadius");
      if (trackRect == null) dart.nullFailed(I[2], 1253, 12, "trackRect");
      if (context == null) dart.nullFailed(I[2], 1254, 23, "context");
      if (stateAnimation == null) dart.nullFailed(I[2], 1260, 25, "stateAnimation");
      let dividerCenter = this.sliderType == constants.SliderType.vertical ? new ui.Offset.new(dart.notNull(dy) + dart.notNull(halfTrackHeight), dart.notNull(dx) - dart.notNull(tickPosition)) : new ui.Offset.new(dart.notNull(dx) + dart.notNull(tickPosition), dart.notNull(dy) + dart.notNull(halfTrackHeight));
      if (this[_majorTickPositions][$_get](_dateTimePos) === 0.0) {
        dividerCenter = this.sliderType == constants.SliderType.vertical ? new ui.Offset.new(dart.notNull(dy) + dart.notNull(halfTrackHeight), dart.notNull(dx) - dart.notNull(tickPosition) - dart.notNull(dividerRadius)) : new ui.Offset.new(dart.notNull(dx) + dart.notNull(tickPosition) + dart.notNull(dividerRadius), dart.notNull(dy) + dart.notNull(halfTrackHeight));
      } else if (this[_majorTickPositions][$_get](_dateTimePos)[$toStringAsFixed](8) === (this.sliderType == constants.SliderType.vertical ? trackRect.height[$toStringAsFixed](8) : trackRect.width[$toStringAsFixed](8))) {
        dividerCenter = this.sliderType == constants.SliderType.vertical ? new ui.Offset.new(dart.notNull(dy) + dart.notNull(halfTrackHeight), dart.notNull(dx) - dart.notNull(tickPosition) + dart.notNull(dividerRadius)) : new ui.Offset.new(dart.notNull(dx) + dart.notNull(tickPosition) - dart.notNull(dividerRadius), dart.notNull(dy) + dart.notNull(halfTrackHeight));
      }
      this[_dividerShape].paint(context, dividerCenter, thumbCenter, startThumbCenter, endThumbCenter, {parentBox: this, themeData: this[_sliderThemeData], currentValue: value, currentValues: values, enableAnimation: stateAnimation, textDirection: this[_textDirection], paint: null});
    }
    [_drawLabel](_dateTimePos, dx, tickPosition, trackRect, dy, context, thumbCenter, startThumbCenter, endThumbCenter, value, values, stateAnimation, offsetX) {
      let t15, t15$;
      if (_dateTimePos == null) dart.nullFailed(I[2], 1295, 11, "_dateTimePos");
      if (dx == null) dart.nullFailed(I[2], 1296, 14, "dx");
      if (tickPosition == null) dart.nullFailed(I[2], 1297, 14, "tickPosition");
      if (trackRect == null) dart.nullFailed(I[2], 1298, 12, "trackRect");
      if (dy == null) dart.nullFailed(I[2], 1299, 14, "dy");
      if (context == null) dart.nullFailed(I[2], 1300, 23, "context");
      if (stateAnimation == null) dart.nullFailed(I[2], 1306, 25, "stateAnimation");
      if (offsetX == null) dart.nullFailed(I[2], 1307, 14, "offsetX");
      {
        let dy = this.sliderType == constants.SliderType.vertical ? trackRect.left : trackRect.top;
        let labelText = this[_visibleLabels][$_get](_dateTimePos);
        let actualLabelOffset = this.sliderType == constants.SliderType.vertical ? new ui.Offset.new(dart.notNull(dy) + dart.notNull(trackRect.width) + dart.notNull(this.actualTickWidth), offsetX)['+']((t15 = this[_sliderThemeData].labelOffset, t15 == null ? ui.Offset.zero : t15)) : new ui.Offset.new(offsetX, dart.notNull(dy) + dart.notNull(trackRect.height) + dart.notNull(this.actualTickHeight))['+']((t15$ = this[_sliderThemeData].labelOffset, t15$ == null ? ui.Offset.zero : t15$));
        this[_drawText](context, actualLabelOffset, thumbCenter, startThumbCenter, endThumbCenter, labelText, {parentBox: this, themeData: this[_sliderThemeData], currentValue: value, currentValues: values, enableAnimation: stateAnimation, textPainter: this.textPainter, textDirection: this[_textDirection]});
      }
    }
    [_drawText](context, center, thumbCenter, startThumbCenter, endThumbCenter, text, opts) {
      if (context == null) dart.nullFailed(I[2], 1328, 34, "context");
      if (center == null) dart.nullFailed(I[2], 1328, 50, "center");
      if (text == null) dart.nullFailed(I[2], 1329, 64, "text");
      let parentBox = opts && 'parentBox' in opts ? opts.parentBox : null;
      if (parentBox == null) dart.nullFailed(I[2], 1330, 32, "parentBox");
      let themeData = opts && 'themeData' in opts ? opts.themeData : null;
      if (themeData == null) dart.nullFailed(I[2], 1331, 34, "themeData");
      let currentValue = opts && 'currentValue' in opts ? opts.currentValue : null;
      let currentValues = opts && 'currentValues' in opts ? opts.currentValues : null;
      let enableAnimation = opts && 'enableAnimation' in opts ? opts.enableAnimation : null;
      if (enableAnimation == null) dart.nullFailed(I[2], 1334, 34, "enableAnimation");
      let textPainter = opts && 'textPainter' in opts ? opts.textPainter : null;
      if (textPainter == null) dart.nullFailed(I[2], 1335, 28, "textPainter");
      let textDirection = opts && 'textDirection' in opts ? opts.textDirection : null;
      if (textDirection == null) dart.nullFailed(I[2], 1336, 30, "textDirection");
      let isInactive = null;
      switch (textDirection) {
        case C[0] || CT.C0:
        {
          isInactive = startThumbCenter != null ? this.sliderType == constants.SliderType.vertical ? dart.notNull(center.dy) > dart.notNull(startThumbCenter.dy) || dart.notNull(center.dy) < dart.notNull(dart.nullCheck(endThumbCenter).dy) : dart.notNull(center.dx) < dart.notNull(startThumbCenter.dx) || dart.notNull(center.dx) > dart.notNull(dart.nullCheck(endThumbCenter).dx) : this.sliderType == constants.SliderType.vertical ? dart.notNull(center.dy) < dart.notNull(dart.nullCheck(thumbCenter).dy) : dart.notNull(center.dx) > dart.notNull(dart.nullCheck(thumbCenter).dx);
          break;
        }
        case C[1] || CT.C1:
        {
          isInactive = startThumbCenter != null ? this.sliderType == constants.SliderType.vertical ? dart.notNull(center.dy) > dart.notNull(startThumbCenter.dy) || dart.notNull(center.dy) < dart.notNull(dart.nullCheck(endThumbCenter).dy) : dart.notNull(center.dx) > dart.notNull(startThumbCenter.dx) || dart.notNull(center.dx) < dart.notNull(dart.nullCheck(endThumbCenter).dx) : this.sliderType == constants.SliderType.vertical ? dart.notNull(center.dy) < dart.notNull(dart.nullCheck(thumbCenter).dy) : dart.notNull(center.dx) < dart.notNull(dart.nullCheck(thumbCenter).dx);
          break;
        }
        default:
        {
          dart.throw(new _internal.ReachabilityError.new("`null` encountered as case in a switch expression with a non-nullable enum type."));
        }
      }
      let textSpan = new text_span.TextSpan.new({text: text, style: dart.test(isInactive) ? themeData.inactiveLabelStyle : themeData.activeLabelStyle});
      textPainter.text = textSpan;
      textPainter.layout();
      if (this.sliderType == constants.SliderType.vertical) {
        textPainter.paint(context.canvas, new ui.Offset.new(center.dx, dart.notNull(center.dy) - dart.notNull(textPainter.height) / 2));
      } else {
        textPainter.paint(context.canvas, new ui.Offset.new(dart.notNull(center.dx) - dart.notNull(textPainter.width) / 2, center.dy));
      }
    }
    getNextSemanticValue(value, semanticActionUnit, opts) {
      let actualValue = opts && 'actualValue' in opts ? opts.actualValue : null;
      if (actualValue == null) dart.nullFailed(I[2], 1383, 24, "actualValue");
      if (dart.test(this.isDateTime)) {
        if (this[_stepDuration] == null) {
          return new core.DateTime.fromMillisecondsSinceEpoch((dart.notNull(actualValue) + dart.notNull(core.num.as(semanticActionUnit)))[$clamp](this.actualMin, this.actualMax)[$toInt]());
        } else {
          let nextDate = new core.DateTime.new(core.int.as(dart.dsend(dart.dload(value, 'year'), '+', [dart.dload(semanticActionUnit, 'years')])), core.int.as(dart.dsend(dart.dload(value, 'month'), '+', [dart.dload(semanticActionUnit, 'months')])), core.int.as(dart.dsend(dart.dload(value, 'day'), '+', [dart.dload(semanticActionUnit, 'days')])), core.int.as(dart.dsend(dart.dload(value, 'hour'), '+', [dart.dload(semanticActionUnit, 'days')])), core.int.as(dart.dsend(dart.dload(value, 'minute'), '+', [dart.dload(semanticActionUnit, 'minutes')])), core.int.as(dart.dsend(dart.dload(value, 'second'), '+', [dart.dload(semanticActionUnit, 'seconds')])));
          let nextDateInms = nextDate.millisecondsSinceEpoch[$toDouble]();
          return nextDateInms < dart.notNull(this.actualMax) ? nextDate : this[_max];
        }
      } else {
        return dart.dsend(dart.dsend(value, '+', [semanticActionUnit]), 'clamp', [this[_min], this[_max]]);
      }
    }
    getPrevSemanticValue(value, semanticActionUnit, opts) {
      let actualValue = opts && 'actualValue' in opts ? opts.actualValue : null;
      if (actualValue == null) dart.nullFailed(I[2], 1408, 24, "actualValue");
      if (dart.test(this.isDateTime)) {
        if (this[_stepDuration] == null) {
          return new core.DateTime.fromMillisecondsSinceEpoch((dart.notNull(actualValue) - dart.notNull(core.num.as(semanticActionUnit)))[$clamp](this.actualMin, this.actualMax)[$toInt]());
        } else {
          let prevDate = new core.DateTime.new(core.int.as(dart.dsend(dart.dload(value, 'year'), '-', [dart.dload(semanticActionUnit, 'years')])), core.int.as(dart.dsend(dart.dload(value, 'month'), '-', [dart.dload(semanticActionUnit, 'months')])), core.int.as(dart.dsend(dart.dload(value, 'day'), '-', [dart.dload(semanticActionUnit, 'days')])), core.int.as(dart.dsend(dart.dload(value, 'hour'), '-', [dart.dload(semanticActionUnit, 'days')])), core.int.as(dart.dsend(dart.dload(value, 'minute'), '-', [dart.dload(semanticActionUnit, 'minutes')])), core.int.as(dart.dsend(dart.dload(value, 'second'), '-', [dart.dload(semanticActionUnit, 'seconds')])));
          let prevDateInms = prevDate.millisecondsSinceEpoch[$toDouble]();
          return prevDateInms > dart.notNull(this.actualMin) ? prevDate : this[_min];
        }
      } else {
        return dart.dsend(dart.dsend(value, '-', [semanticActionUnit]), 'clamp', [this[_min], this[_max]]);
      }
    }
    getNumerizedValue(value) {
      if (dart.test(this.isDateTime)) {
        return core.DateTime.as(value).millisecondsSinceEpoch[$toDouble]();
      }
      return core.double.as(dart.dsend(value, 'toDouble', []));
    }
    [_textSize](text, fontSize) {
      let t15;
      if (text == null) dart.nullFailed(I[2], 1442, 25, "text");
      if (fontSize == null) dart.nullFailed(I[2], 1442, 38, "fontSize");
      let textPainter = (t15 = new text_painter.TextPainter.new({text: new text_span.TextSpan.new({text: text, style: new text_style.TextStyle.new({fontSize: fontSize})}), maxLines: 1, textDirection: ui.TextDirection.ltr}), (() => {
        t15.layout({minWidth: 0.0, maxWidth: 1 / 0});
        return t15;
      })());
      return textPainter.size;
    }
    [_maximumLabelWidth]() {
      let t16, t15;
      let maxLabelWidth = 0.0;
      if (dart.test(this[_showLabels]) && this[_interval] != null && dart.nullCheck(this[_interval]) > 0) {
        let label = null;
        let currentValue = this[_min];
        let labelLength = null;
        this.divisions = core.double.as(dart.dsend(dart.dsend(dart.test(this.isDateTime) ? this[_getDateTimeDifference](core.DateTime.as(this[_min]), core.DateTime.as(this[_max]), this[_dateIntervalType]) : dart.dsend(this[_max], '-', [this[_min]]), 'toDouble', []), '/', [this[_interval]]));
        for (let i = 0; i <= dart.nullCheck(this.divisions)[$toInt](); i = i + 1) {
          label = (t15 = currentValue, t16 = this.getFormattedText(currentValue), this[_labelFormatterCallback](t15, t16));
          labelLength = this[_textSize](label, this.maximumFontSize).width;
          if (dart.notNull(maxLabelWidth) < dart.notNull(labelLength)) {
            maxLabelWidth = labelLength;
          }
          currentValue = dart.test(this.isDateTime) ? this[_getNextDate](core.DateTime.as(currentValue), this[_dateIntervalType], dart.nullCheck(this[_interval])) : dart.dsend(currentValue, '+', [this[_interval]]);
        }
      } else if (dart.test(this[_showLabels])) {
        maxLabelWidth = this[_edgeLabelWidth]();
      }
      return maxLabelWidth;
    }
    [_edgeLabelWidth]() {
      let t16, t15, t16$, t15$;
      let minLabel = null;
      let maxLabel = null;
      let maxLabelWidth = null;
      minLabel = (t15 = this[_min], t16 = this.getFormattedText(this[_min]), this[_labelFormatterCallback](t15, t16));
      maxLabel = (t15$ = this[_max], t16$ = this.getFormattedText(this[_max]), this[_labelFormatterCallback](t15$, t16$));
      let minLabelLength = this[_textSize](minLabel, this.maximumFontSize).width;
      let maxLabelLength = this[_textSize](maxLabel, this.maximumFontSize).width;
      maxLabelWidth = math.max(core.double, minLabelLength, maxLabelLength);
      return maxLabelWidth;
    }
    systemFontsDidChange() {
      super.systemFontsDidChange();
      this.textPainter.markNeedsLayout();
      this.updateTextPainter();
    }
    performLayout() {
      this.actualHeight = math.max(core.double, 2 * dart.notNull(this.trackOffset.dy), dart.notNull(this.trackOffset.dy) + dart.notNull(this.maxTrackHeight) / 2 + (this.sliderType == constants.SliderType.vertical ? math.max(core.double, this.actualTickWidth, this.actualMinorTickWidth) + dart.notNull(this[_maximumLabelWidth]()) + dart.notNull(this.actualLabelOffset) : math.max(core.double, this.actualTickHeight, this.actualMinorTickHeight) + dart.notNull(this.actualLabelHeight)));
      this.size = this.sliderType == constants.SliderType.vertical ? new ui.Size.new(dart.test(this.constraints.hasBoundedWidth) ? this.constraints.maxWidth : this.actualHeight, dart.test(this.constraints.hasBoundedHeight) ? this.constraints.maxHeight : dart.notNull(this.minTrackWidth) + 2 * dart.notNull(this.trackOffset.dx)) : new ui.Size.new(dart.test(this.constraints.hasBoundedWidth) ? this.constraints.maxWidth : dart.notNull(this.minTrackWidth) + 2 * dart.notNull(this.trackOffset.dx), dart.test(this.constraints.hasBoundedHeight) ? this.constraints.maxHeight : this.actualHeight);
      this.generateLabelsAndMajorTicks();
      this.generateMinorTicks();
    }
    handleEvent(event, entry) {
      if (event == null) dart.nullFailed(I[2], 1536, 33, "event");
      hit_test.HitTestEntry.as(entry);
      if (entry == null) dart.nullFailed(I[2], 1536, 53, "entry");
      if (dart.test(this.isInteractionEnd) && dart.test(event.down) && events.PointerDownEvent.is(event)) {
        if (this.sliderType == constants.SliderType.vertical) {
          dart.nullCheck(this.verticalDragGestureRecognizer).addPointer(event);
        } else {
          dart.nullCheck(this.horizontalDragGestureRecognizer).addPointer(event);
        }
        this.tapGestureRecognizer.addPointer(event);
      }
    }
  };
  (slider_base.RenderBaseSlider.new = function(opts) {
    let min = opts && 'min' in opts ? opts.min : null;
    let max = opts && 'max' in opts ? opts.max : null;
    let interval = opts && 'interval' in opts ? opts.interval : null;
    let stepSize = opts && 'stepSize' in opts ? opts.stepSize : null;
    let stepDuration = opts && 'stepDuration' in opts ? opts.stepDuration : null;
    let minorTicksPerInterval = opts && 'minorTicksPerInterval' in opts ? opts.minorTicksPerInterval : null;
    if (minorTicksPerInterval == null) dart.nullFailed(I[2], 25, 18, "minorTicksPerInterval");
    let showTicks = opts && 'showTicks' in opts ? opts.showTicks : null;
    if (showTicks == null) dart.nullFailed(I[2], 26, 19, "showTicks");
    let showLabels = opts && 'showLabels' in opts ? opts.showLabels : null;
    if (showLabels == null) dart.nullFailed(I[2], 27, 19, "showLabels");
    let showDividers = opts && 'showDividers' in opts ? opts.showDividers : null;
    if (showDividers == null) dart.nullFailed(I[2], 28, 19, "showDividers");
    let enableTooltip = opts && 'enableTooltip' in opts ? opts.enableTooltip : null;
    if (enableTooltip == null) dart.nullFailed(I[2], 29, 19, "enableTooltip");
    let labelPlacement = opts && 'labelPlacement' in opts ? opts.labelPlacement : null;
    if (labelPlacement == null) dart.nullFailed(I[2], 30, 29, "labelPlacement");
    let numberFormat = opts && 'numberFormat' in opts ? opts.numberFormat : null;
    if (numberFormat == null) dart.nullFailed(I[2], 31, 27, "numberFormat");
    let dateFormat = opts && 'dateFormat' in opts ? opts.dateFormat : null;
    let dateIntervalType = opts && 'dateIntervalType' in opts ? opts.dateIntervalType : null;
    let labelFormatterCallback = opts && 'labelFormatterCallback' in opts ? opts.labelFormatterCallback : null;
    if (labelFormatterCallback == null) dart.nullFailed(I[2], 34, 37, "labelFormatterCallback");
    let tooltipTextFormatterCallback = opts && 'tooltipTextFormatterCallback' in opts ? opts.tooltipTextFormatterCallback : null;
    if (tooltipTextFormatterCallback == null) dart.nullFailed(I[2], 35, 43, "tooltipTextFormatterCallback");
    let trackShape = opts && 'trackShape' in opts ? opts.trackShape : null;
    if (trackShape == null) dart.nullFailed(I[2], 36, 27, "trackShape");
    let dividerShape = opts && 'dividerShape' in opts ? opts.dividerShape : null;
    if (dividerShape == null) dart.nullFailed(I[2], 37, 29, "dividerShape");
    let overlayShape = opts && 'overlayShape' in opts ? opts.overlayShape : null;
    if (overlayShape == null) dart.nullFailed(I[2], 38, 29, "overlayShape");
    let thumbShape = opts && 'thumbShape' in opts ? opts.thumbShape : null;
    if (thumbShape == null) dart.nullFailed(I[2], 39, 27, "thumbShape");
    let tickShape = opts && 'tickShape' in opts ? opts.tickShape : null;
    if (tickShape == null) dart.nullFailed(I[2], 40, 26, "tickShape");
    let minorTickShape = opts && 'minorTickShape' in opts ? opts.minorTickShape : null;
    if (minorTickShape == null) dart.nullFailed(I[2], 41, 26, "minorTickShape");
    let tooltipShape = opts && 'tooltipShape' in opts ? opts.tooltipShape : null;
    if (tooltipShape == null) dart.nullFailed(I[2], 42, 29, "tooltipShape");
    let sliderThemeData = opts && 'sliderThemeData' in opts ? opts.sliderThemeData : null;
    if (sliderThemeData == null) dart.nullFailed(I[2], 43, 32, "sliderThemeData");
    let sliderType = opts && 'sliderType' in opts ? opts.sliderType : null;
    let tooltipPosition = opts && 'tooltipPosition' in opts ? opts.tooltipPosition : null;
    let textDirection = opts && 'textDirection' in opts ? opts.textDirection : null;
    if (textDirection == null) dart.nullFailed(I[2], 46, 28, "textDirection");
    let mediaQueryData = opts && 'mediaQueryData' in opts ? opts.mediaQueryData : null;
    if (mediaQueryData == null) dart.nullFailed(I[2], 47, 29, "mediaQueryData");
    this[minTrackWidth] = 48 * 3;
    this[textPainter] = new text_painter.TextPainter.new();
    this[__RenderBaseSlider__minInMilliseconds] = null;
    this[__RenderBaseSlider__minInMilliseconds_isSet] = false;
    this[__RenderBaseSlider__maxInMilliseconds] = null;
    this[__RenderBaseSlider__maxInMilliseconds_isSet] = false;
    this[divisions] = null;
    this[willDrawTooltip] = false;
    this[isInteractionEnd] = true;
    this[__RenderBaseSlider__visibleLabels] = null;
    this[__RenderBaseSlider__visibleLabels_isSet] = false;
    this[__RenderBaseSlider__majorTickPositions] = null;
    this[__RenderBaseSlider__majorTickPositions_isSet] = false;
    this[__RenderBaseSlider__minorTickPositions] = null;
    this[__RenderBaseSlider__minorTickPositions_isSet] = false;
    this[unformattedLabels] = null;
    this[horizontalDragGestureRecognizer] = null;
    this[verticalDragGestureRecognizer] = null;
    this[__RenderBaseSlider_tapGestureRecognizer] = null;
    this[__RenderBaseSlider_tapGestureRecognizer_isSet] = false;
    this[__RenderBaseSlider_actualHeight] = null;
    this[__RenderBaseSlider_actualHeight_isSet] = false;
    this[__RenderBaseSlider_trackOffset] = null;
    this[__RenderBaseSlider_trackOffset_isSet] = false;
    this[__RenderBaseSlider_maxTrackHeight] = null;
    this[__RenderBaseSlider_maxTrackHeight_isSet] = false;
    this[showOverlappingTooltipStroke] = false;
    this[showOverlappingThumbStroke] = false;
    this[mainAxisOffset] = 0.0;
    this[activeThumb] = null;
    this[__RenderBaseSlider_thumbElevationTween] = null;
    this[__RenderBaseSlider_thumbElevationTween_isSet] = false;
    this[currentPointerType] = null;
    this[sliderType$] = sliderType;
    this[_min] = min;
    this[_max] = max;
    this[_interval] = interval;
    this[_stepSize] = stepSize;
    this[_stepDuration] = stepDuration;
    this[_minorTicksPerInterval] = minorTicksPerInterval;
    this[_showTicks] = showTicks;
    this[_showLabels] = showLabels;
    this[_showDividers] = showDividers;
    this[_enableTooltip] = enableTooltip;
    this[_labelPlacement] = labelPlacement;
    this[_numberFormat] = numberFormat;
    this[_dateFormat] = dateFormat;
    this[_dateIntervalType] = dateIntervalType;
    this[_labelFormatterCallback] = labelFormatterCallback;
    this[_tooltipTextFormatterCallback] = tooltipTextFormatterCallback;
    this[_trackShape] = trackShape;
    this[_dividerShape] = dividerShape;
    this[_overlayShape] = overlayShape;
    this[_thumbShape] = thumbShape;
    this[_tickShape] = tickShape;
    this[_minorTickShape] = minorTickShape;
    this[_tooltipShape] = tooltipShape;
    this[_sliderThemeData] = sliderThemeData;
    this[_textDirection] = textDirection;
    this[_mediaQueryData] = mediaQueryData;
    this[_tooltipPosition] = tooltipPosition;
    slider_base.RenderBaseSlider.__proto__.new.call(this);
    this.maxTrackHeight = this.getMaxTrackHeight();
    this.trackOffset = this[_getTrackOffset]();
    if (dart.test(this.isDateTime)) {
      this[_minInMilliseconds] = core.DateTime.as(min).millisecondsSinceEpoch[$toDouble]();
      this[_maxInMilliseconds] = core.DateTime.as(max).millisecondsSinceEpoch[$toDouble]();
    }
    this[_visibleLabels] = T.JSArrayOfString().of([]);
    this[_majorTickPositions] = T.JSArrayOfdouble().of([]);
    this[_minorTickPositions] = T.JSArrayOfdouble().of([]);
    this.thumbElevationTween = new (T.TweenOfdouble()).new({begin: 1, end: 6});
  }).prototype = slider_base.RenderBaseSlider.prototype;
  dart.addTypeTests(slider_base.RenderBaseSlider);
  dart.addTypeCaches(slider_base.RenderBaseSlider);
  dart.setMethodSignature(slider_base.RenderBaseSlider, () => ({
    __proto__: dart.getMethods(slider_base.RenderBaseSlider.__proto__),
    updateTextPainter: dart.fnType(dart.void, []),
    [_getTrackOffset]: dart.fnType(ui.Offset, []),
    getMaxTrackHeight: dart.fnType(core.double, []),
    getFormattedText: dart.fnType(core.String, [dart.dynamic]),
    getFactorFromValue: dart.fnType(core.double, [dart.dynamic]),
    getPositionFromValue: dart.fnType(core.double, [core.double]),
    generateLabelsAndMajorTicks: dart.fnType(dart.void, []),
    [_generateLabelsAndMajorTicksBasedOnInterval]: dart.fnType(dart.void, []),
    [_generateEdgeLabelsAndMajorTicks]: dart.fnType(dart.void, []),
    generateMinorTicks: dart.fnType(dart.void, []),
    [_generateDateTimeMinorTicks]: dart.fnType(dart.void, []),
    [_updateMinorTicksPosition]: dart.fnType(core.double, [core.double]),
    [_generateNumericMinorTicks]: dart.fnType(dart.void, []),
    [_getDateTimeDifference]: dart.fnType(core.int, [core.DateTime, core.DateTime, dart.nullable(common.DateIntervalType)]),
    [_getNextDate]: dart.fnType(core.DateTime, [core.DateTime, dart.nullable(common.DateIntervalType), core.double]),
    getValueFromPosition: dart.fnType(dart.dynamic, [core.double]),
    getActualValue: dart.fnType(dart.dynamic, [], {value: dart.dynamic, valueInDouble: dart.nullable(core.double)}, {}),
    getValueFromFactor: dart.fnType(core.double, [core.double]),
    getFactorFromCurrentPosition: dart.fnType(core.double, []),
    getRectangularTooltipRect: dart.fnType(ui.Rect, [text_painter.TextPainter, ui.Offset, ui.Offset, ui.Rect, slider_theme.SfSliderThemeData]),
    getPaddleTooltipRect: dart.fnType(ui.Rect, [text_painter.TextPainter, ui.Offset, ui.Offset, ui.Rect, slider_theme.SfSliderThemeData]),
    [_getAdjustPaddleWidth]: dart.fnType(core.double, [ui.Offset, ui.Offset, core.double, core.double, ui.Rect]),
    drawLabelsTicksAndDividers: dart.fnType(dart.void, [object.PaintingContext, ui.Rect, ui.Offset, dart.nullable(ui.Offset), dart.nullable(ui.Offset), dart.nullable(ui.Offset), animation.Animation$(core.double), dart.dynamic, dart.nullable(common.SfRangeValues)]),
    [_drawTick]: dart.fnType(dart.void, [core.double, core.double, core.double, ui.Rect, core.int, core.double, object.PaintingContext, dart.nullable(ui.Offset), dart.nullable(ui.Offset), dart.nullable(ui.Offset), dart.dynamic, dart.nullable(common.SfRangeValues), animation.Animation$(core.double)]),
    [_drawMinorTick]: dart.fnType(dart.void, [core.double, ui.Rect, core.double, core.double, object.PaintingContext, dart.nullable(ui.Offset), dart.nullable(ui.Offset), dart.nullable(ui.Offset), dart.dynamic, dart.nullable(common.SfRangeValues), animation.Animation$(core.double)]),
    [_drawDivider]: dart.fnType(dart.void, [core.double, core.double, core.double, core.double, core.int, core.double, ui.Rect, object.PaintingContext, dart.nullable(ui.Offset), dart.nullable(ui.Offset), dart.nullable(ui.Offset), dart.dynamic, dart.nullable(common.SfRangeValues), animation.Animation$(core.double)]),
    [_drawLabel]: dart.fnType(dart.void, [core.int, core.double, core.double, ui.Rect, core.double, object.PaintingContext, dart.nullable(ui.Offset), dart.nullable(ui.Offset), dart.nullable(ui.Offset), dart.dynamic, dart.nullable(common.SfRangeValues), animation.Animation$(core.double), core.double]),
    [_drawText]: dart.fnType(dart.void, [object.PaintingContext, ui.Offset, dart.nullable(ui.Offset), dart.nullable(ui.Offset), dart.nullable(ui.Offset), core.String], {currentValue: dart.dynamic, currentValues: dart.nullable(common.SfRangeValues)}, {enableAnimation: animation.Animation$(core.double), parentBox: proxy_box.RenderProxyBox, textDirection: ui.TextDirection, textPainter: text_painter.TextPainter, themeData: slider_theme.SfSliderThemeData}),
    getNextSemanticValue: dart.fnType(dart.dynamic, [dart.dynamic, dart.dynamic], {}, {actualValue: core.double}),
    getPrevSemanticValue: dart.fnType(dart.dynamic, [dart.dynamic, dart.dynamic], {}, {actualValue: core.double}),
    getNumerizedValue: dart.fnType(core.double, [dart.dynamic]),
    [_textSize]: dart.fnType(ui.Size, [core.String, core.double]),
    [_maximumLabelWidth]: dart.fnType(core.double, []),
    [_edgeLabelWidth]: dart.fnType(core.double, [])
  }));
  dart.setGetterSignature(slider_base.RenderBaseSlider, () => ({
    __proto__: dart.getGetters(slider_base.RenderBaseSlider.__proto__),
    [_minInMilliseconds]: core.double,
    [_maxInMilliseconds]: core.double,
    [_visibleLabels]: core.List$(core.String),
    [_majorTickPositions]: core.List$(core.double),
    [_minorTickPositions]: core.List$(core.double),
    tapGestureRecognizer: tap.TapGestureRecognizer,
    actualHeight: core.double,
    trackOffset: ui.Offset,
    maxTrackHeight: core.double,
    thumbElevationTween: tween.Tween$(core.double),
    min: dart.dynamic,
    max: dart.dynamic,
    interval: dart.nullable(core.double),
    stepSize: dart.nullable(core.double),
    stepDuration: dart.nullable(common.SliderStepDuration),
    minorTicksPerInterval: core.int,
    showTicks: core.bool,
    showLabels: core.bool,
    showDividers: core.bool,
    enableTooltip: core.bool,
    labelPlacement: common.LabelPlacement,
    numberFormat: number_format.NumberFormat,
    dateIntervalType: dart.nullable(common.DateIntervalType),
    dateFormat: dart.nullable(date_format.DateFormat),
    labelFormatterCallback: dart.fnType(core.String, [dart.dynamic, core.String]),
    tooltipTextFormatterCallback: dart.fnType(core.String, [dart.dynamic, core.String]),
    thumbShape: slider_shapes.SfThumbShape,
    overlayShape: slider_shapes.SfOverlayShape,
    trackShape: slider_shapes.SfTrackShape,
    dividerShape: slider_shapes.SfDividerShape,
    tickShape: slider_shapes.SfTickShape,
    minorTickShape: slider_shapes.SfTickShape,
    tooltipShape: slider_shapes.SfTooltipShape,
    sliderThemeData: slider_theme.SfSliderThemeData,
    textDirection: ui.TextDirection,
    tooltipPosition: dart.nullable(common.SliderTooltipPosition),
    mediaQueryData: media_query.MediaQueryData,
    isDateTime: core.bool,
    actualMin: core.double,
    actualMax: core.double,
    isDiscrete: core.bool,
    [_actualDividerSize]: ui.Size,
    actualTickSize: ui.Size,
    actualMinorTickSize: ui.Size,
    maximumFontSize: core.double,
    actualLabelSize: ui.Size,
    actualTrackRect: ui.Rect,
    actualThumbSize: ui.Size,
    actualOverlaySize: ui.Size,
    actualTickHeight: core.double,
    actualTickWidth: core.double,
    actualMinorTickHeight: core.double,
    actualMinorTickWidth: core.double,
    actualLabelHeight: core.double,
    actualLabelOffset: core.double,
    tooltipStartY: core.double,
    adjustmentUnit: core.double,
    semanticActionUnit: dart.dynamic
  }));
  dart.setSetterSignature(slider_base.RenderBaseSlider, () => ({
    __proto__: dart.getSetters(slider_base.RenderBaseSlider.__proto__),
    [_minInMilliseconds]: core.double,
    [_maxInMilliseconds]: core.double,
    [_visibleLabels]: core.List$(core.String),
    [_majorTickPositions]: core.List$(core.double),
    [_minorTickPositions]: core.List$(core.double),
    tapGestureRecognizer: tap.TapGestureRecognizer,
    actualHeight: core.double,
    trackOffset: ui.Offset,
    maxTrackHeight: core.double,
    thumbElevationTween: tween.Tween$(core.double),
    min: dart.dynamic,
    max: dart.dynamic,
    interval: dart.nullable(core.double),
    stepSize: dart.nullable(core.double),
    stepDuration: dart.nullable(common.SliderStepDuration),
    minorTicksPerInterval: core.int,
    showTicks: core.bool,
    showLabels: core.bool,
    showDividers: core.bool,
    enableTooltip: core.bool,
    labelPlacement: common.LabelPlacement,
    numberFormat: number_format.NumberFormat,
    dateIntervalType: dart.nullable(common.DateIntervalType),
    dateFormat: dart.nullable(date_format.DateFormat),
    labelFormatterCallback: dart.fnType(core.String, [dart.dynamic, core.String]),
    tooltipTextFormatterCallback: dart.fnType(core.String, [dart.dynamic, core.String]),
    thumbShape: slider_shapes.SfThumbShape,
    overlayShape: slider_shapes.SfOverlayShape,
    trackShape: slider_shapes.SfTrackShape,
    dividerShape: slider_shapes.SfDividerShape,
    tickShape: slider_shapes.SfTickShape,
    minorTickShape: slider_shapes.SfTickShape,
    tooltipShape: slider_shapes.SfTooltipShape,
    sliderThemeData: slider_theme.SfSliderThemeData,
    textDirection: ui.TextDirection,
    tooltipPosition: dart.nullable(common.SliderTooltipPosition),
    mediaQueryData: media_query.MediaQueryData
  }));
  dart.setLibraryUri(slider_base.RenderBaseSlider, I[3]);
  dart.setFieldSignature(slider_base.RenderBaseSlider, () => ({
    __proto__: dart.getFields(slider_base.RenderBaseSlider.__proto__),
    minTrackWidth: dart.finalFieldType(core.double),
    textPainter: dart.finalFieldType(text_painter.TextPainter),
    [__RenderBaseSlider__minInMilliseconds]: dart.fieldType(dart.nullable(core.double)),
    [__RenderBaseSlider__minInMilliseconds_isSet]: dart.fieldType(core.bool),
    [__RenderBaseSlider__maxInMilliseconds]: dart.fieldType(dart.nullable(core.double)),
    [__RenderBaseSlider__maxInMilliseconds_isSet]: dart.fieldType(core.bool),
    sliderType: dart.finalFieldType(dart.nullable(constants.SliderType)),
    divisions: dart.fieldType(dart.nullable(core.double)),
    willDrawTooltip: dart.fieldType(core.bool),
    isInteractionEnd: dart.fieldType(core.bool),
    [__RenderBaseSlider__visibleLabels]: dart.fieldType(dart.nullable(core.List$(core.String))),
    [__RenderBaseSlider__visibleLabels_isSet]: dart.fieldType(core.bool),
    [__RenderBaseSlider__majorTickPositions]: dart.fieldType(dart.nullable(core.List$(core.double))),
    [__RenderBaseSlider__majorTickPositions_isSet]: dart.fieldType(core.bool),
    [__RenderBaseSlider__minorTickPositions]: dart.fieldType(dart.nullable(core.List$(core.double))),
    [__RenderBaseSlider__minorTickPositions_isSet]: dart.fieldType(core.bool),
    unformattedLabels: dart.fieldType(dart.nullable(core.List$(core.double))),
    horizontalDragGestureRecognizer: dart.fieldType(dart.nullable(monodrag.HorizontalDragGestureRecognizer)),
    verticalDragGestureRecognizer: dart.fieldType(dart.nullable(monodrag.VerticalDragGestureRecognizer)),
    [__RenderBaseSlider_tapGestureRecognizer]: dart.fieldType(dart.nullable(tap.TapGestureRecognizer)),
    [__RenderBaseSlider_tapGestureRecognizer_isSet]: dart.fieldType(core.bool),
    [__RenderBaseSlider_actualHeight]: dart.fieldType(dart.nullable(core.double)),
    [__RenderBaseSlider_actualHeight_isSet]: dart.fieldType(core.bool),
    [__RenderBaseSlider_trackOffset]: dart.fieldType(dart.nullable(ui.Offset)),
    [__RenderBaseSlider_trackOffset_isSet]: dart.fieldType(core.bool),
    [__RenderBaseSlider_maxTrackHeight]: dart.fieldType(dart.nullable(core.double)),
    [__RenderBaseSlider_maxTrackHeight_isSet]: dart.fieldType(core.bool),
    showOverlappingTooltipStroke: dart.fieldType(core.bool),
    showOverlappingThumbStroke: dart.fieldType(core.bool),
    mainAxisOffset: dart.fieldType(core.double),
    activeThumb: dart.fieldType(dart.nullable(common.SfThumb)),
    [__RenderBaseSlider_thumbElevationTween]: dart.fieldType(dart.nullable(tween.Tween$(core.double))),
    [__RenderBaseSlider_thumbElevationTween_isSet]: dart.fieldType(core.bool),
    currentPointerType: dart.fieldType(dart.nullable(constants.PointerType)),
    [_min]: dart.fieldType(dart.dynamic),
    [_max]: dart.fieldType(dart.dynamic),
    [_interval]: dart.fieldType(dart.nullable(core.double)),
    [_stepSize]: dart.fieldType(dart.nullable(core.double)),
    [_stepDuration]: dart.fieldType(dart.nullable(common.SliderStepDuration)),
    [_minorTicksPerInterval]: dart.fieldType(core.int),
    [_showTicks]: dart.fieldType(core.bool),
    [_showLabels]: dart.fieldType(core.bool),
    [_showDividers]: dart.fieldType(core.bool),
    [_enableTooltip]: dart.fieldType(core.bool),
    [_labelPlacement]: dart.fieldType(common.LabelPlacement),
    [_numberFormat]: dart.fieldType(number_format.NumberFormat),
    [_dateIntervalType]: dart.fieldType(dart.nullable(common.DateIntervalType)),
    [_dateFormat]: dart.fieldType(dart.nullable(date_format.DateFormat)),
    [_labelFormatterCallback]: dart.fieldType(dart.fnType(core.String, [dart.dynamic, core.String])),
    [_tooltipTextFormatterCallback]: dart.fieldType(dart.fnType(core.String, [dart.dynamic, core.String])),
    [_thumbShape]: dart.fieldType(slider_shapes.SfThumbShape),
    [_overlayShape]: dart.fieldType(slider_shapes.SfOverlayShape),
    [_trackShape]: dart.fieldType(slider_shapes.SfTrackShape),
    [_dividerShape]: dart.fieldType(slider_shapes.SfDividerShape),
    [_tickShape]: dart.fieldType(slider_shapes.SfTickShape),
    [_minorTickShape]: dart.fieldType(slider_shapes.SfTickShape),
    [_tooltipShape]: dart.fieldType(slider_shapes.SfTooltipShape),
    [_sliderThemeData]: dart.fieldType(slider_theme.SfSliderThemeData),
    [_textDirection]: dart.fieldType(ui.TextDirection),
    [_tooltipPosition]: dart.fieldType(dart.nullable(common.SliderTooltipPosition)),
    [_mediaQueryData]: dart.fieldType(media_query.MediaQueryData)
  }));
  dart.trackLibraries("packages/syncfusion_flutter_sliders/src/slider_shapes.dart", {
    "package:syncfusion_flutter_sliders/src/slider_shapes.dart": slider_shapes,
    "package:syncfusion_flutter_sliders/src/slider_base.dart": slider_base
  }, {
  }, '{"version":3,"sourceRoot":"","sources":["slider_shapes.dart","../../../../../../packages/flutter/lib/src/rendering/proxy_box.dart","slider_base.dart"],"names":[],"mappings":"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","file":"../../../../../../../../packages/syncfusion_flutter_sliders/src/slider_shapes.dart.lib.js"}');
  // Exports:
  return {
    src__slider_shapes: slider_shapes,
    src__slider_base: slider_base
  };
}));

//# sourceMappingURL=slider_shapes.dart.lib.js.map
